13/10/2023, 10:26 pm - Messages and calls are end-to-end encrypted. Only people in this chat can read, listen to, or share them. Learn more.
13/10/2023, 10:36 pm - Messages and calls are end-to-end encrypted. Only people in this chat can read, listen to, or share them. Learn more.
14/10/2023, 2:06 pm - Ansh Gupta: <Media omitted>
16/10/2023, 5:02 pm - Ayush: <Media omitted>
16/10/2023, 5:02 pm - Ayush: <Media omitted>
16/10/2023, 5:02 pm - Ayush: <Media omitted>
16/10/2023, 5:02 pm - Ayush: <Media omitted>
16/10/2023, 5:11 pm - Ayush: <Media omitted>
20/10/2023, 12:58 pm - Ayush: Assignment likh liya
20/10/2023, 12:58 pm - Ayush: Bhejna
20/10/2023, 1:00 pm - Ansh Gupta: Kiska ee ka
20/10/2023, 1:00 pm - Ayush: Haan
20/10/2023, 1:01 pm - Ansh Gupta: <Media omitted>
27/10/2023, 12:36 pm - Ayush: <Media omitted>
27/10/2023, 2:07 pm - Ansh Gupta: <Media omitted>
27/10/2023, 2:07 pm - Ansh Gupta: <Media omitted>
27/10/2023, 2:07 pm - Ansh Gupta: Ye 1st hai
27/10/2023, 2:07 pm - Ansh Gupta: <Media omitted>
27/10/2023, 2:08 pm - Ayush: Ok
27/10/2023, 2:08 pm - Ansh Gupta: Ye 2nd
27/10/2023, 9:38 pm - Ansh Gupta: <Media omitted>
27/10/2023, 9:50 pm - Ayush: Chutiya h tu kya
27/10/2023, 9:50 pm - Ayush: Kon si assignment bheja h lode
27/10/2023, 9:51 pm - Ansh Gupta: Abey sorry
27/10/2023, 9:52 pm - Ansh Gupta: Karde kuchh bhi pata thodi na chalta hai
27/10/2023, 10:15 pm - Ayush: You deleted this message
07/11/2023, 2:56 pm - Ayush: #include <stdio.h>
#include <stdlib.h>
int main(){
    int *arr;
    int n;
    int sum = 0;
    scanf("%d", &n);
    arr = (int*) malloc(n*sizeof(int));
    for(int i = 0; i < n; i++){
        scanf("%d", (arr+i));
    }
    for(int i = 0; i < n; i++){
        sum += arr[i];
    }
    printf("%d", sum);
}
18/11/2023, 3:42 pm - Ayush: Chat gpt wala dusra bhejna jara <This message was edited>
18/11/2023, 4:06 pm - Ansh Gupta: Laptop update ho rha hai
18/11/2023, 4:06 pm - Ayush: Thik
18/11/2023, 4:06 pm - Ansh Gupta: Thodi der main bhejta hu
18/11/2023, 4:21 pm - Ansh Gupta: #include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Function to check if a number is prime
bool isPrime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i * i <= num; ++i) {
        if (num % i == 0) return false;
    }
    return true;
}

// Function to print prime factorization of a number
void primeFactorization(int num) {
    printf("%d =", num);
    for (int i = 2; i <= num; ++i) {
        while (num % i == 0) {
            printf(" %d", i);
            num /= i;
            if (num > 1) printf(" *");
        }
    }
    printf("\n");
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);

    int matrix[n][m];

    int even_sum = 0, odd_sum = 0;

    // Input values into matrix and calculate sums
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf("%d", &matrix[i][j]);
            if ((i + j) % 2 == 0) {
                even_sum += matrix[i][j];
            } else {
                odd_sum += matrix[i][j];
            }
        }
    }

    // Calculate the difference
    int diff = odd_sum - even_sum;

    // Output the result based on the difference
    if (diff == 0) {
        printf("I got Zero is Assignment\n");
    } else if (diff == 1) {
        printf("I am the best\n");
    } else {
        if (isPrime(abs(diff))) {
            printf("%d is prime\n", diff);
        } else {
            primeFactorization(abs(diff));
        }
    }

    return 0;
}
18/11/2023, 4:21 pm - Ansh Gupta: This message was deleted
19/11/2023, 3:43 pm - Ansh Gupta: Lawde dekh tere kl rahul ko single nhi liya ja rha is madarchod se
02/12/2023, 1:46 pm - Ayush: Movie ka kya karna h
02/12/2023, 1:46 pm - Ansh Gupta: Nhi ja rahe dekhne
02/12/2023, 1:47 pm - Ayush: Confirm kr liya nhi jayega
02/12/2023, 1:47 pm - Ayush: Mai to ready hu agr chaloge tum sab
02/12/2023, 1:47 pm - Ansh Gupta: Abey achhi nhi bta rahe movie
02/12/2023, 1:48 pm - Ansh Gupta: Mai toh jau nhi
02/12/2023, 1:48 pm - Ansh Gupta: Ye bhi mana kar rahe hai
04/12/2023, 2:13 pm - Ayush: <Media omitted>
04/12/2023, 2:13 pm - Ayush: <Media omitted>
04/12/2023, 2:13 pm - Ayush: <Media omitted>
04/12/2023, 2:43 pm - Ayush: <Media omitted>
04/12/2023, 2:43 pm - Ayush: <Media omitted>
04/12/2023, 2:43 pm - Ayush: <Media omitted>
04/12/2023, 2:43 pm - Ayush: <Media omitted>
04/12/2023, 2:43 pm - Ayush: <Media omitted>
04/12/2023, 2:43 pm - Ayush: <Media omitted>
07/12/2023, 9:49 pm - Ansh Gupta: <Media omitted>
07/12/2023, 10:12 pm - Ayush: <Media omitted>
08/12/2023, 11:25 am - Ansh Gupta: 
10/12/2023, 4:43 pm - Ansh Gupta: <Media omitted>
10/12/2023, 4:43 pm - Ansh Gupta: <Media omitted>
14/12/2023, 3:44 pm - Ayush: <Media omitted>
22/12/2023, 1:22 am - Ayush: #include<stdio.h>
int factorial(int x);
int main()
{
    int n;
    printf("Enter the value of n:");
    scanf("%d",&n);
    int* k=n;
    if(n<0)
    printf("the factorial of%d does not exists",n);
    int fact=factorial(k);
    printf("%d\n",fact);
}
int factorial(int x)
{
if(x==1)
return 1;
else
return  x*factorial(x-1);
}
27/12/2023, 1:01 pm - Ayush: Math ki paper dekhne jayega
27/12/2023, 1:03 pm - Ansh Gupta: Haan
27/12/2023, 1:03 pm - Ayush: Mere bhi dekh lena
27/12/2023, 1:04 pm - Ayush: Ek video bnake bhej diyo n kis ques me kitte number diya
27/12/2023, 1:04 pm - Ayush: KB jayega?
27/12/2023, 1:04 pm - Ayush: Pradhan wali bhi dekh liyo
27/12/2023, 1:04 pm - Ayush: Hemant , mayank ke bs marks dekh liyo
27/12/2023, 1:05 pm - Ansh Gupta: K
27/12/2023, 1:06 pm - Ayush: Thik h bata diyo
27/12/2023, 1:06 pm - Ansh Gupta: K
27/12/2023, 4:08 pm - Ansh Gupta: 42.5 marks
27/12/2023, 4:12 pm - Ayush: Nikhil ,Anil ka bhi dekhle
27/12/2023, 4:12 pm - Ansh Gupta: 21.5 Anil ke
27/12/2023, 4:12 pm - Ayush: Nikhil?
27/12/2023, 4:13 pm - Ansh Gupta: 23.5
27/12/2023, 4:13 pm - Ayush: List h kya Puri koi
27/12/2023, 4:14 pm - Ansh Gupta: Nhi
27/12/2023, 4:14 pm - Ansh Gupta: Ek ek ka poochh rha hu
27/12/2023, 4:14 pm - Ayush: Dhaka ke?
27/12/2023, 4:15 pm - Ansh Gupta: 29
27/12/2023, 4:15 pm - Ayush: Km h uske
27/12/2023, 4:15 pm - Ayush: Sejal ke ?
27/12/2023, 4:15 pm - Ansh Gupta: Haan
27/12/2023, 4:15 pm - Ayush: Harsh ,priya ,rudre ke
27/12/2023, 4:15 pm - Ansh Gupta: 41.5
27/12/2023, 4:15 pm - Ansh Gupta: 35 ki range main hi hai
27/12/2023, 4:17 pm - Ayush: Highest kiske h ?
27/12/2023, 4:17 pm - Ayush: Nikunj ke
27/12/2023, 4:17 pm - Ayush: Aur Sai pranay ke
27/12/2023, 4:20 pm - Ansh Gupta: 
27/12/2023, 4:23 pm - Ayush: Goblin ke kitne aaye
27/12/2023, 4:24 pm - Ansh Gupta: 35 ke aaspas aaye hai
27/12/2023, 4:28 pm - Ayush: Sabke ache hi aaye h is baar toh
27/12/2023, 4:28 pm - Ayush: Sabko pass kr diya ma'am ne
27/12/2023, 4:28 pm - Ansh Gupta: Nhi kuchh log fail hai
27/12/2023, 4:28 pm - Ayush: South wale
27/12/2023, 4:29 pm - Ayush: North wale ke lagbhag 20 ke upar h na
27/12/2023, 4:29 pm - Ansh Gupta: Pta nhi logo ka ab
27/12/2023, 4:31 pm - Ayush: Ai Ds ke dekh Dena laude lgenge usme
27/12/2023, 4:31 pm - Ansh Gupta: Haan vahi
27/12/2023, 4:31 pm - Ayush: Ma'am ne kuch bola
27/12/2023, 4:32 pm - Ayush: Passing wagera ka Nikhil puch rha
27/12/2023, 4:33 pm - Ansh Gupta: Mam bol Rahi thi hemant border line pe hai par main use paas kar dungi
27/12/2023, 4:33 pm - Ansh Gupta: Aur hemant ke 15 hai
27/12/2023, 4:34 pm - Ansh Gupta: Manvi fail hai
27/12/2023, 4:34 pm - Ayush: Kitne aaye
27/12/2023, 4:34 pm - Ansh Gupta: Pta nhi par 10 se Kam hai
27/12/2023, 4:47 pm - Ansh Gupta: Tere 8.25 hai
27/12/2023, 4:48 pm - Ayush: Pahli quiz me itne aa gye h
27/12/2023, 4:48 pm - Ayush: Aur tum sab ke
27/12/2023, 4:50 pm - Ansh Gupta: Mere 6
27/12/2023, 4:50 pm - Ansh Gupta: Akki 4.25
27/12/2023, 4:51 pm - Ayush: Abhay
27/12/2023, 4:51 pm - Ayush: Mayank , hemant,anil , nikhil ke bhi dekh lena
27/12/2023, 4:50 pm - Ansh Gupta: Aur abhay ke 6.25
27/12/2023, 5:11 pm - Ayush: Inke dekhe kya ?
27/12/2023, 5:43 pm - Ansh Gupta: Nhi be haram jada hai voh
28/12/2023, 3:24 pm - Ayush: Paper dekhne jayega tu ?
28/12/2023, 3:26 pm - Ansh Gupta: Nahi
17/01/2024, 4:42 pm - Ansh Gupta: +918048195011 ye number Truecaller pe check kar
17/01/2024, 6:24 pm - Ayush: Fraud wala h
17/01/2024, 6:25 pm - Ansh Gupta: Theek hai
19/01/2024, 12:57 am - Ansh Gupta: 
19/01/2024, 12:59 am - Ayush: Bol kya hua
19/01/2024, 12:59 am - Ansh Gupta: Mere main kuchh dikha hi nahi raha
19/01/2024, 12:59 am - Ayush: Tune apne mail se kr diya tha kya
19/01/2024, 1:00 am - Ansh Gupta: Shayad haan
19/01/2024, 1:00 am - Ansh Gupta: Fuck yaar
19/01/2024, 1:00 am - Ayush: Tabhi nhi dikha rha
19/01/2024, 1:00 am - Ansh Gupta: Laude lag gaye
19/01/2024, 1:00 am - Ansh Gupta: Maa chud gayi
19/01/2024, 1:00 am - Ayush: Mail kr sardana ko
19/01/2024, 1:00 am - Ayush: Phle wala assignment kaise check hua tha fir tera
19/01/2024, 1:00 am - Ansh Gupta: Dubara submit Kiya tha
19/01/2024, 1:01 am - Ansh Gupta: Is vale se
19/01/2024, 1:02 am - Ayush: Isko bhi whi kr fir
19/01/2024, 1:06 am - Ansh Gupta: Bird eye view vala hai na ye
19/01/2024, 1:09 am - Ansh Gupta: Kaunsa hai ye ss bhejiyo tera
19/01/2024, 1:10 am - Ansh Gupta: Par mere pe mail aaya hai
19/01/2024, 1:10 am - Ayush: Nhi accessibility wala
19/01/2024, 1:10 am - Ansh Gupta: <Media omitted>
19/01/2024, 1:10 am - Ansh Gupta: Ye dikha raha hai mail pe
19/01/2024, 1:10 am - Ayush: Yhi wala h
19/01/2024, 1:10 am - Ayush: Classroom PE dekh
19/01/2024, 1:11 am - Ayush: <Media omitted>
19/01/2024, 1:11 am - Ansh Gupta: Class room pe nahi dikha raha number
19/01/2024, 1:11 am - Ayush: Galat mail se Kiya h fir tune sayad
19/01/2024, 1:11 am - Ansh Gupta: Mere main number hi nahi dikha raha
19/01/2024, 1:11 am - Ansh Gupta: Haan 😞
19/01/2024, 1:11 am - Ansh Gupta: Lag gayi back bc
19/01/2024, 1:11 am - Ansh Gupta: Isme bhi
19/01/2024, 1:11 am - Ayush: Wait kr sayad abhi nhi aaya hoga tera
19/01/2024, 1:11 am - Ayush: Mere Lund no deta h ye bkl
19/01/2024, 1:12 am - Ansh Gupta: Tujhe mile toh hai atleast
19/01/2024, 1:12 am - Ansh Gupta: Meri bc kismat hi lund se likhi gayi hai vo bhi gadhe ke se
19/01/2024, 1:12 am - Ayush: Are tu subh mail krna sardana ko
19/01/2024, 1:13 am - Ansh Gupta: Kuchh na kuchh toh karunga hi
19/01/2024, 1:13 am - Ansh Gupta: Dekhte hai
19/01/2024, 1:13 am - Ayush: Haan
19/01/2024, 1:13 am - Ansh Gupta: Varna back pakka
19/01/2024, 1:13 am - Ayush: Abe ye chor
19/01/2024, 1:13 am - Ansh Gupta: Achhi khasi webseries dekh Raha tha
19/01/2024, 1:14 am - Ayush: Dekh chor isko ,subh dekhna
19/01/2024, 1:14 am - Ansh Gupta: Ab muthi Marni padegi
19/01/2024, 1:15 am - Ansh Gupta: Sun iski pdf bhej mujhe Jo tune submit ki hai voh
19/01/2024, 1:19 am - Ayush: <Media omitted>
19/01/2024, 1:20 am - Ayush: Fail kr dega sala
19/01/2024, 1:20 am - Ansh Gupta: Nahi submit Karu Bhai main ye tension mat le
19/01/2024, 1:20 am - Ayush: Haa be ye kr ke bhi fail kr dega 😂
19/01/2024, 1:21 am - Ansh Gupta: Vahi toh
19/01/2024, 1:21 am - Ayush: Sala bkl 8 no kaun deta h
19/01/2024, 1:21 am - Ayush: Pichla wala khud se Kiya tha
19/01/2024, 1:21 am - Ayush: Ye chat gpt ya Google ka hai
19/01/2024, 1:21 am - Ayush: Fir bhi lga diya laude ne
19/01/2024, 1:21 am - Ansh Gupta: Pichle vale main toh besti kari
19/01/2024, 1:21 am - Ansh Gupta: Aur isme number nahi diye
19/01/2024, 1:22 am - Ayush: Haa 🥲
31/01/2024, 10:27 pm - Ayush: 
04/02/2024, 11:47 pm - Ayush: Bol phone kiye tha??
04/02/2024, 11:47 pm - Ansh Gupta: C4 aana
04/02/2024, 11:47 pm - Ayush: Ruk
06/02/2024, 2:19 pm - Ayush: Kaha h ?
06/02/2024, 2:22 pm - Ansh Gupta: Federal
06/02/2024, 2:22 pm - Ayush: Director me nhi jayega
06/02/2024, 2:22 pm - Ansh Gupta: Naa
06/02/2024, 2:23 pm - Ayush: Ok
06/02/2024, 2:23 pm - Ansh Gupta: Tu
07/02/2024, 4:00 pm - Ansh Gupta: #include <iostream>
#include <cstring>

class StringSwapper {
public:
    char* str1;
    char* str2;

    // Constructor to initialize strings
    StringSwapper(const char* s1, const char* s2) {
        str1 = new char[strlen(s1) + 1];
        str2 = new char[strlen(s2) + 1];
        strcpy(str1, s1);
        strcpy(str2, s2);
    }

    // Function to swap strings using public members
    void swapStrings() {
        char* temp = str1;
        str1 = str2;
        str2 = temp;
    }

    // Function to display swapped strings
    void displaySwappedStrings() {
        std::cout << "String 1 after swap: " << str1 << std::endl;
        std::cout << "String 2 after swap: " << str2 << std::endl;
    }

    // Destructor to free allocated memory
    ~StringSwapper() {
        delete[] str1;
        delete[] str2;
    }
};

int main() {
    // Example usage
    const char* initialString1 = "Hello";
    const char* initialString2 = "World";

    StringSwapper stringSwapper(initialString1, initialString2);

    std::cout << "String 1 before swap: " << initialString1 << std::endl;
    std::cout << "String 2 before swap: " << initialString2 << std::endl;

    stringSwapper.swapStrings();
    stringSwapper.displaySwappedStrings();

    return 0;
}
07/02/2024, 8:42 pm - Ayush: Mayank ko pta nhi kaha se pta chl gya
09/02/2024, 3:58 pm - Ayush: Jaa rha tu lawde
09/02/2024, 3:58 pm - Ansh Gupta: Haan
09/02/2024, 3:58 pm - Ansh Gupta: Vahi hu main
09/02/2024, 3:58 pm - Ayush: Kya kr rha
09/02/2024, 3:59 pm - Ansh Gupta: Time pass
09/02/2024, 3:59 pm - Ayush: Lab
09/02/2024, 3:59 pm - Ansh Gupta: Lund
09/02/2024, 3:59 pm - Ayush: 👍
09/02/2024, 4:32 pm - Ayush: Call Kiya tha ?
10/02/2024, 12:02 am - Ayush: Wo kshitiz wali payment ka baat kar Lena  Cr se
10/02/2024, 12:16 am - Ayush: Bola ?
10/02/2024, 12:16 am - Ansh Gupta: Nahi bol dunga
10/02/2024, 4:47 pm - Ayush: Deepak ka clear hua itp
10/02/2024, 4:47 pm - Ansh Gupta: Haan
10/02/2024, 4:47 pm - Ansh Gupta: Pass ho gaya
11/02/2024, 11:54 pm - Ayush: <Media omitted>
11/02/2024, 11:54 pm - Ayush: <Media omitted>
14/02/2024, 4:47 pm - Ayush: Kaha h ?
14/02/2024, 4:47 pm - Ansh Gupta: Federal hu
14/02/2024, 4:47 pm - Ansh Gupta: Acad aaraha hu
14/02/2024, 4:48 pm - Ayush: Kyu chla gya chutiye
14/02/2024, 4:48 pm - Ayush: Turant aana tha fir bhi
14/02/2024, 4:48 pm - Ansh Gupta: Tu Kam bata na
14/02/2024, 4:48 pm - Ayush: Aise hi pucha
14/02/2024, 4:49 pm - Ayush: Snacks chlate
16/02/2024, 1:56 pm - Ayush: Class chlega kya ?
16/02/2024, 8:08 pm - Ayush: <Media omitted>
17/02/2024, 5:46 pm - Ayush: Chalna h acad
19/02/2024, 4:22 pm - Ansh Gupta: Aaj toh bhadiya jagah baitha hai
19/02/2024, 4:24 pm - Ayush: Bs baitha hi hu na bsdk
19/02/2024, 4:26 pm - Ansh Gupta: Toh aur kya karega
19/02/2024, 4:26 pm - Ansh Gupta: Paani maangle
19/02/2024, 4:47 pm - Ansh Gupta: Aaj toh propose maar de
25/02/2024, 3:05 am - Ansh Gupta: Tune 5 ve ka a part main y^2 le liya
25/02/2024, 3:05 am - Ansh Gupta: Jabki sirf y aayega
25/02/2024, 7:40 am - Ayush: Haa shi bola ye jaldi bazzi me ho gya
25/02/2024, 2:22 pm - Ansh Gupta: Tere vale se toh 16/3 hi aa raha hai
25/02/2024, 2:23 pm - Ansh Gupta: Par mere vale se 32/3 aa raha hai
25/02/2024, 2:23 pm - Ayush: Chor iski maa ka
06/03/2024, 11:20 pm - Ayush: Prashant ko bhi bol dena
11/03/2024, 2:18 pm - Ayush: <Media omitted>
11/03/2024, 2:18 pm - Ayush: <Media omitted>
11/03/2024, 2:18 pm - Ayush: <Media omitted>
11/03/2024, 2:19 pm - Ayush: <Media omitted>
14/03/2024, 12:42 pm - Ansh Gupta: <Media omitted>
14/03/2024, 12:42 pm - Ansh Gupta: <Media omitted>
14/03/2024, 12:42 pm - Ansh Gupta: <Media omitted>
14/03/2024, 12:42 pm - Ansh Gupta: <Media omitted>
14/03/2024, 11:12 pm - Ayush: You deleted this message
15/03/2024, 10:56 am - Ayush: Kaha gye be tu
15/03/2024, 1:37 pm - Ayush: Director ki class ka kya krna h ?
15/03/2024, 1:37 pm - Ayush: Mst soya tha
16/03/2024, 1:41 pm - Ayush: Are Jo ek b type charger le gya tha room se abhay ke birthday me wo kidhar h
16/03/2024, 1:42 pm - Ansh Gupta: A5 main hi hoga
16/03/2024, 1:42 pm - Ansh Gupta: Main A2 main hu
16/03/2024, 1:42 pm - Ayush: Acha thik
20/03/2024, 11:04 pm - Ansh Gupta: <Media omitted>
20/03/2024, 11:07 pm - Ayush: <Media omitted>
21/03/2024, 2:58 pm - Ansh Gupta: Tune Jo meri photo Li thi freshers pe voh send karna
21/03/2024, 5:32 pm - Ayush: <Media omitted>
21/03/2024, 5:32 pm - Ayush: <Media omitted>
21/03/2024, 5:32 pm - Ayush: <Media omitted>
21/03/2024, 5:35 pm - Ayush: Acad chalega ya federal hi rahega
21/03/2024, 5:35 pm - Ayush: Soya tha to ghumne ka mn kar rha thora
21/03/2024, 5:35 pm - Ansh Gupta: ruk aata hu
21/03/2024, 5:35 pm - Ayush: Bhut Jayda so liya bhenchod
21/03/2024, 5:35 pm - Ansh Gupta: niche aajaye toh call kariyo
21/03/2024, 5:36 pm - Ayush: Ok 5 min
27/03/2024, 5:09 pm - Ayush: Assignment kar rha abhi ??
02/04/2024, 3:36 pm - Ayush: Director ki class jayega ??
02/04/2024, 3:37 pm - Ansh Gupta: chalte hain
04/04/2024, 11:39 am - Ayush: <Media omitted>
05/04/2024, 8:23 pm - Ayush: Sun na Mera bag lab 4 me h lete aana aate waqt
05/04/2024, 8:23 pm - Ayush: Green bag hoga janta hai na tu
05/04/2024, 8:46 pm - Ansh Gupta: 
12/04/2024, 3:13 pm - Ayush: <Media omitted>
12/04/2024, 3:13 pm - Ayush: <Media omitted>
16/04/2024, 7:28 pm - Ansh Gupta: 
18/04/2024, 12:05 am - Ayush: <Media omitted>
22/04/2024, 12:29 pm - Ayush: Class jayega ,ball le Lena tennis wali
22/04/2024, 12:34 pm - Ansh Gupta: main nahi jaa raha hu
22/04/2024, 12:35 pm - Ansh Gupta: jo jaye usko bol dena le jayega
22/04/2024, 12:47 pm - Ayush: Okay
24/04/2024, 2:57 pm - Ayush: https://www.geeksforgeeks.org/iterators-c-stl/amp/
24/04/2024, 3:15 pm - Ayush: #include <iostream>

template <typename T, int Size>
class Array {
private:
    T arr[Size];
    int count; // Current number of elements in the array

public:
    Array() : count(0) {}

    // Function to insert an element at the end of the array
    void insert(const T& element) {
        if (count < Size) {
            arr[count] = element;
            count++;
        } else {
            std::cout << "Array is full. Cannot insert more elements." << std::endl;
        }
    }

    // Function to delete an element at a specific index
    void removeAt(int index) {
        if (index >= 0 && index < count) {
            for (int i = index; i < count - 1; ++i) {
                arr[i] = arr[i + 1];
            }
            count--;
        } else {
            std::cout << "Invalid index. Element removal failed." << std::endl;
        }
    }

    // Function to display the elements in the array
    void display() const {
        std::cout << "Array Elements: ";
        for (int i = 0; i < count; ++i) {
            std::cout << arr[i] << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    Array<int, 5> intArray;

    // Insert elements
    intArray.insert(10);
    intArray.insert(20);
    intArray.insert(30);
    intArray.display();

    // Remove element at index 1
    intArray.removeAt(1);
    intArray.display();

    // Try to remove element at index 3 (which doesn't exist)
    intArray.removeAt(3);

    // Insert more elements
    intArray.insert(40);
    intArray.insert(50);
    intArray.insert(60); // This will fail because the array is full
    intArray.display();

    return 0;
}
25/04/2024, 4:09 pm - Ansh Gupta: Kitne aaye
25/04/2024, 4:09 pm - Ansh Gupta: Mere bhi dekh lena
25/04/2024, 4:10 pm - Ayush: Abhi nhi diya wo
25/04/2024, 4:10 pm - Ayush: Ok
25/04/2024, 4:10 pm - Ansh Gupta: Bilkul end main dega kya bhoskika
25/04/2024, 4:11 pm - Ansh Gupta: Lekar aaya hai voh sath apne
25/04/2024, 4:11 pm - Ayush: Hn sayad
25/04/2024, 4:11 pm - Ayush: Haa
25/04/2024, 5:03 pm - Ayush: 16 h tera
25/04/2024, 5:08 pm - Ansh Gupta: Tere kitne aaye
25/04/2024, 5:09 pm - Ansh Gupta: Aur abhay ke
25/04/2024, 5:16 pm - Ayush: 16
25/04/2024, 5:16 pm - Ayush: 20
25/04/2024, 5:16 pm - Ansh Gupta: Betee
26/04/2024, 10:01 am - Ayush: https://www.geeksforgeeks.org/vector-in-cpp-stl/amp/
26/04/2024, 10:16 am - Ayush: https://www.geeksforgeeks.org/list-cpp-stl/amp/
28/04/2024, 3:52 am - Ayush: https://youtube.com/playlist?list=PLOcyoCwR67V-CYreHoxWow-RZ3q-5F_nw&si=XPTwm193Z4OYtbDr
28/04/2024, 7:15 am - Ayush: 8 bje se rehta h breakfast aaj
28/04/2024, 7:16 am - Ansh Gupta: Toh jab itna ruke hai toh aur ruk jayenge
28/04/2024, 7:16 am - Ayush: Haa thik aata hu 7.50 pe
30/04/2024, 8:30 pm - Ansh Gupta: <Media omitted>
01/05/2024, 3:08 am - Ayush: https://youtu.be/6Wh7MLXl-zM?si=j6sqaIeQA_1-bs1Y
01/05/2024, 3:23 pm - Ayush: Implement different operations on a Deque le. adding an element in front and end, removing an element from front and end, sort the Deque, reverse the Deque, getting the size of the Deque.

A query can be of the following types:

1 x (Adding an element in front of the deque and printing the deque)

2 x (Adding an element in last of the deque and printing the deque)

3 (Removing the element from the front of the deque and printing the deque)

4 (Removing the element from the last of the deque and printing the deque)

5 (Sorting the deque and printing the deque)

6 (Reversing the deque and printing the deque)

7 (Printing the deque)

8 (Returning the size of the deque)

9 (Printing the element that is in front of the deque)

10 (Printing the element that is in back of the deque)
03/05/2024, 10:55 am - Ansh Gupta: Arey rudra aur Deepak ko kitne number mile
05/05/2024, 9:28 pm - Ansh Gupta: <Media omitted>
06/05/2024, 3:45 pm - Ansh Gupta: Padha Raha hai ya paka Raha hai
07/05/2024, 4:51 pm - Ayush: Sure, here are some questions that might help transition from a presentation about disconnected tech to reconnecting with nature:

1. How can we shift our focus from screens to the natural world around us?
2. What are some benefits of spending time in nature for our mental and physical well-being?
3. How can we incorporate elements of nature into our daily routines, even in tech-driven environments?
4. What strategies can we implement to balance our digital lives with reconnecting to nature?
5. How does nature inspire creativity and innovation in ways that technology cannot?
6. Can you share personal experiences or anecdotes about how spending time in nature has positively impacted you?
7. What are some practical ways to encourage others to disconnect from technology and spend more time outdoors?
8. How can we leverage technology to enhance our experiences in nature without becoming overly reliant on it?
9. What role does nature play in sustainability and environmental stewardship, and how can we foster a deeper connection to the natural world to promote these values?
10. How can reconnecting with nature help us cultivate a sense of mindfulness and presence in our lives?
08/05/2024, 12:34 pm - Ayush: https://youtube.com/playlist?list=PLGURAYuyMXk6Yo8uFKcZIvVLxG56UkOu7&si=jgYsNTJeFUPtIIY1
09/05/2024, 1:36 pm - Ayush: https://youtube.com/playlist?list=PLfVsf4Bjg79Cx42Myce8bIg1nVBVSFKyx&si=CZh8wUyJQ48OzcQO
09/05/2024, 1:37 pm - Ansh Gupta: Tune voh padh liya
09/05/2024, 1:37 pm - Ansh Gupta: Stl
09/05/2024, 1:37 pm - Ayush: Haa ho gya abhi padha hu
09/05/2024, 1:37 pm - Ansh Gupta: Mera toh map reh Raha hai abhi bhj
09/05/2024, 1:37 pm - Ayush: Kar le aasan h
09/05/2024, 1:37 pm - Ayush: Fir piche ka bhi padhna h
09/05/2024, 1:37 pm - Ansh Gupta: Haan ab Jaa raha hu padhne Naruto dekh Raha tha
09/05/2024, 1:38 pm - Ansh Gupta: Haan vahi
09/05/2024, 1:38 pm - Ayush: Thik h
13/05/2024, 3:11 am - Ayush: So gya ya jag rha laude ??
13/05/2024, 9:57 pm - Ayush: <Media omitted>
15/05/2024, 6:09 am - Ayush: https://drive.google.com/file/d/1z-OdwclRtz3yivvAz7TQ4K__WJuNN87E/view
16/05/2024, 12:30 am - Ayush: Bhej diya Kundu ko bol de
16/05/2024, 12:30 am - Ansh Gupta: Haan bol Diya
16/05/2024, 12:32 am - Ayush: Chla gya na
16/05/2024, 12:33 am - Ansh Gupta: Haan bol toh Raha hai
16/05/2024, 12:46 pm - Ayush: Khali h kya lawre ??
16/05/2024, 5:12 pm - Ansh Gupta: How will you ensure the safety and security of elderly passengers during transit, including measures for COVID-19 safety?
16/05/2024, 7:42 pm - Ansh Gupta: Abey presentation deke aao be fir city bhi Jana hai
16/05/2024, 7:47 pm - Ayush: ho gya aa rha hu
22/05/2024, 2:13 pm - Ayush: Kya karna h Aaj ke match ka
22/05/2024, 2:23 pm - Ansh Gupta: Mann toh kar nahi raha
22/05/2024, 2:26 pm - Ayush: Haa sala kal jitna tha
22/05/2024, 2:26 pm - Ayush: Batana kya karna h
22/05/2024, 4:02 pm - Ansh Gupta: Dekh rupay toh hai nahi chud Gaye sare ghoomne main
22/05/2024, 4:02 pm - Ansh Gupta: Toh ab bata kya karna hai
22/05/2024, 4:02 pm - Ansh Gupta: Dekh 200 rupay honge Shayad usme
22/05/2024, 4:03 pm - Ansh Gupta: Toh 200 200 aur dalte hai kya bolta hai
22/05/2024, 4:05 pm - Ayush: 200 kaha pure lagaye the na <This message was edited>
22/05/2024, 4:06 pm - Ayush: 250-250 kr de kya
22/05/2024, 4:06 pm - Ansh Gupta: Nahi shayad 1000 the na ek jitne ke baad
22/05/2024, 4:06 pm - Ayush: Nhi 890 hi the
22/05/2024, 4:07 pm - Ansh Gupta: Rcb ke jitne ke baad bhi 890 hi the
22/05/2024, 4:07 pm - Ayush: Haa
22/05/2024, 4:07 pm - Ayush: Usi din 890 hue the
22/05/2024, 4:08 pm - Ansh Gupta: Chal toh 250 karte hai
22/05/2024, 4:08 pm - Ansh Gupta: Par yrr
22/05/2024, 4:08 pm - Ansh Gupta: Laude na lag jaye
22/05/2024, 4:08 pm - Ayush: Chaaka to mar dena chahiye <This message was edited>
22/05/2024, 4:08 pm - Ayush: Mereko kr 250
22/05/2024, 4:09 pm - Ansh Gupta: Theek hai kitna dikha Raha hai
22/05/2024, 4:09 pm - Ayush: 1.7 h
22/05/2024, 4:09 pm - Ansh Gupta: Theek aur RR pe
22/05/2024, 4:09 pm - Ayush: 2
22/05/2024, 4:10 pm - Ayush: Prashant -Amit laga diye h
22/05/2024, 4:10 pm - Ansh Gupta: RR pe laga diya
22/05/2024, 4:10 pm - Ayush: nhi rcb
22/05/2024, 4:10 pm - Ansh Gupta: <Media omitted>
22/05/2024, 4:16 pm - Ayush: Lga diya
22/05/2024, 4:16 pm - Ayush: 500 ka 850 de rha
22/05/2024, 4:20 pm - Ansh Gupta: Ab Jo de Raha hai voh de   Raha hai kya kar sakte hai
23/05/2024, 10:19 pm - Ayush: Bhai 😭😕
23/05/2024, 10:19 pm - Ayush: Galat news sunliya ek 😭😭
23/05/2024, 10:19 pm - Ansh Gupta: Kya
23/05/2024, 10:19 pm - Ayush: Keshvi ka koi bf h 😭
23/05/2024, 10:19 pm - Ansh Gupta: Uski setting ho gayi kya
23/05/2024, 10:19 pm - Ansh Gupta: Kaun
23/05/2024, 10:20 pm - Ansh Gupta: Apne clg ka
23/05/2024, 10:20 pm - Ayush: College me nhi
23/05/2024, 10:20 pm - Ansh Gupta: Kisne bataya?
23/05/2024, 10:20 pm - Ayush: 
23/05/2024, 10:20 pm - Ansh Gupta: Arey yrr
23/05/2024, 10:20 pm - Ayush: Ye dekh
23/05/2024, 10:21 pm - Ayush: 
23/05/2024, 10:22 pm - Ayush: Ye wala bhi dekh le 😕
23/05/2024, 10:22 pm - Ansh Gupta: Arey bc ye kaise chhupa reh gaya humse
23/05/2024, 10:24 pm - Ayush: Kuch na hoga 🥲
23/05/2024, 10:24 pm - Ansh Gupta: Arey yrr ye toh bhot galat khabar pata chali
23/05/2024, 10:25 pm - Ansh Gupta: Uska kaise ho skta hai
23/05/2024, 10:25 pm - Ayush: Firse kat gya Bina kuch huye
23/05/2024, 10:25 pm - Ayush: Kya pta bhai
23/05/2024, 10:25 pm - Ansh Gupta: Isse bhadiya toh kuchh hoke kat jata
23/05/2024, 10:25 pm - Ansh Gupta: Kam se Kam tasalli toh rehti ki kuchh hua toh atleast
23/05/2024, 10:26 pm - Ayush: Yaha atleast nhi atmost hota h mere saath <This message was edited>
23/05/2024, 10:26 pm - Ansh Gupta: Ab confirm kaise kare is news ko
23/05/2024, 10:26 pm - Ayush: Sejal hi option h na
23/05/2024, 10:26 pm - Ansh Gupta: Usse direct puchhna theek nahi rahega
23/05/2024, 10:26 pm - Ayush: Kya pta wo bhi na bataye
23/05/2024, 10:27 pm - Ansh Gupta: Vahi toh
23/05/2024, 10:27 pm - Ansh Gupta: Kyonki batana hota toh pehle hi bata dete
23/05/2024, 10:27 pm - Ayush: Harika to pehle bhi ek baar boli thi to wo boli confirm nhi h
23/05/2024, 10:27 pm - Ansh Gupta: Pehle kab tune bataya nahi
23/05/2024, 10:27 pm - Ayush: Baad me exam ke time pta chla thora to nhi batai thi ,ab batai wo
23/05/2024, 10:27 pm - Ayush: Are wo boli confirm nhi h aise hi h usko galat fehmi Hui h
23/05/2024, 10:28 pm - Ansh Gupta: Toh ab confirm ho gaya shayad tabhi usne batadiya
23/05/2024, 10:28 pm - Ayush: Haa lgbhag 80-90 %
23/05/2024, 10:28 pm - Ansh Gupta: Sejal se puchhega bhi kaise tu ??
23/05/2024, 10:28 pm - Ansh Gupta: Agar direct puchh lega toh desperate lagega
23/05/2024, 10:28 pm - Ayush: Whi na kaise puchu
23/05/2024, 10:29 pm - Ayush: Aur kisiko pata nhi hoga
23/05/2024, 10:29 pm - Ayush: Aur kisi se baat bhi nhi hoti h
23/05/2024, 10:29 pm - Ansh Gupta: Yrr mere khayal se bharatpur ko bhi pata hoga tabhi usne chhod diya ab dikhayi nahi deta uske aaspas
23/05/2024, 10:30 pm - Ansh Gupta: Aur ek din bol bhi Raha tha ki ab baat nahi hoti
23/05/2024, 10:30 pm - Ayush: Kya pta kuch keh nhi sakte
23/05/2024, 10:30 pm - Ansh Gupta: Ab kuchh nahi ho skta
23/05/2024, 10:30 pm - Ayush: Ye to pta h
23/05/2024, 10:30 pm - Ansh Gupta: Aisa bola voh
23/05/2024, 10:30 pm - Ayush: Ab kuch nhi ho skta bc 🥲😭
23/05/2024, 10:31 pm - Ansh Gupta: Koi na Bhai har kisi ko nahi milta yaha pyar jindagi main
23/05/2024, 10:31 pm - Ayush: Lauda kabhi nhi milta h
23/05/2024, 10:31 pm - Ayush: Sala sayari sunane laga 😂
23/05/2024, 10:31 pm - Ansh Gupta: Kal subha sochenge ki kaise Sejal se kaise puchhe
23/05/2024, 10:32 pm - Ayush: Lag gye laude ,ye bhi gyi haath se
23/05/2024, 10:32 pm - Ansh Gupta: Kyonki abhi raat ko toh nahi puchh sakte usse
23/05/2024, 10:32 pm - Ayush: Naa abhi nhi
23/05/2024, 10:32 pm - Ansh Gupta: Arey Aisa kuchh nahi hai long distance jyada der Tak nahi chalta
23/05/2024, 10:32 pm - Ansh Gupta: Abhi Tera compitition sirf voh ek Banda hai
23/05/2024, 10:33 pm - Ayush: Phir bhi bhai mere saath ka kat gya tha ,fir kaat gya 😭😂. Hasu ya royu bc
23/05/2024, 10:33 pm - Ayush: Bc ,bs bolne wala ye baat hota h 🥲 <This message was edited>
23/05/2024, 10:33 pm - Ansh Gupta: Aisa kaise ho skta hai ki uska pehle se ho aur usne comment nahi kar rakha ho uski photo pe
23/05/2024, 10:34 pm - Ayush: Haa yrr wahi samjh nhi aa rha mujhe bhi
23/05/2024, 10:34 pm - Ansh Gupta: Ab kya hi motivation du main bhi iske alawa kuchh aur nahi aata
23/05/2024, 10:34 pm - Ayush: Kya pta Ghar Wale strict ho aur insta pe ho toh wo nhi karta hoga
23/05/2024, 10:35 pm - Ansh Gupta: Ruk ruk ek aur aata hai mohabbat thi isliye Jane Diya jidd hoti toh baho main hoti
23/05/2024, 10:35 pm - Ayush: Sale nahi shudrega 😂
23/05/2024, 10:35 pm - Ansh Gupta: Haan ye bhi ho skta hai par kahi na kahi toh Kiya hoga ruk dhundte hai
23/05/2024, 10:35 pm - Ayush: Uske following list me dekh kuch milta h kya
23/05/2024, 10:36 pm - Ansh Gupta: Haan vahi dekhne Jaa Raha hu
23/05/2024, 10:36 pm - Ayush: Jaa jile zindagi 😕
23/05/2024, 10:40 pm - Ansh Gupta: Usne kabhi kisi ladke ki story lagai hai bday ki
23/05/2024, 10:41 pm - Ayush: Dhyan nhi sayad ek  baar lagai thi
23/05/2024, 10:42 pm - Ansh Gupta: Haan koi vyom karke tha par ab following ya followers main nahi dikh Raha
23/05/2024, 10:43 pm - Ayush: Tujhe kaise pta chala
23/05/2024, 10:43 pm - Ansh Gupta: Maine bhi dekhi thi voh story
23/05/2024, 10:43 pm - Ansh Gupta: Kisi ke mobile main
23/05/2024, 10:44 pm - Ayush: Name yaad tha tujhe
23/05/2024, 10:44 pm - Ayush: Kya pata kaun h ab
23/05/2024, 10:44 pm - Ansh Gupta: Confirm nahi hai isliye toh tujhse puchh Raha hu
23/05/2024, 10:47 pm - Ayush: Nhi yaad mujhe
23/05/2024, 10:48 pm - Ansh Gupta: Kya lover banega re tu
23/05/2024, 10:48 pm - Ansh Gupta: Aisi chhoti chhoti cheeje yaad nahi rehti
23/05/2024, 11:01 pm - Ayush: <Media omitted>
24/05/2024, 7:24 am - Ansh Gupta: Haan shayad ye hi tha
24/05/2024, 9:39 am - Ayush: Lagadu SRH pe
24/05/2024, 1:49 pm - Ansh Gupta: 500 ke aaspas lagade
24/05/2024, 2:22 pm - Ayush: Pura nhi lagana h ??
24/05/2024, 2:25 pm - Ayush: 
24/05/2024, 7:33 pm - Ayush: Jeet gye na
24/05/2024, 7:33 pm - Ansh Gupta: Maje aagaye
24/05/2024, 7:34 pm - Ansh Gupta: Pehli gaind pe maar diya
24/05/2024, 7:36 pm - Ayush: Jeet gye
24/05/2024, 7:37 pm - Ayush: 700 lgaya tha 1200 milenge
24/05/2024, 7:39 pm - Ansh Gupta: Moj ho gayi asli Sattebaaj
25/05/2024, 2:01 pm - Ansh Gupta: Aagaye kya Aaj ke paise
25/05/2024, 2:19 pm - Ayush: Haa
25/05/2024, 2:20 pm - Ayush: Raat me hi aa gya tha
25/05/2024, 2:53 pm - Ansh Gupta: Kitne hue hai usme total
25/05/2024, 4:28 pm - Ayush: 1340
26/05/2024, 6:51 pm - Ayush: Kispe lagana h aaj
26/05/2024, 6:52 pm - Ayush: 
26/05/2024, 7:44 pm - Ansh Gupta: Haar Gaye 😭😭
26/05/2024, 7:54 pm - Ayush: Chud gya bc
26/05/2024, 8:17 pm - Ayush: Haar gye buri tarah 😭😭
26/05/2024, 8:17 pm - Ayush: SRH Jeet bhi nhi payegi ab
26/05/2024, 8:17 pm - Ansh Gupta: Koi ni bhai agar rupay dikhaye toh
26/05/2024, 8:17 pm - Ansh Gupta: Nikal liyo
26/05/2024, 8:18 pm - Ayush: Second innings me hi na
26/05/2024, 8:20 pm - Ansh Gupta: Haan tabhi
26/05/2024, 8:48 pm - Ayush: Gya bc ,ab pura gya
26/05/2024, 9:13 pm - Ansh Gupta: Koi ni 2.5 ka loss ho gaya
27/05/2024, 9:04 am - Ayush: Bhai paise withdraw kiye aaya hi nhi abhi tk account me
27/05/2024, 9:31 am - Ansh Gupta: Koi ni aajaye toh theek hai na aaye toh sochenge ki haar Gaye
27/05/2024, 9:39 am - Ayush: 🥲🥲
27/05/2024, 11:35 am - Ayush: 
27/05/2024, 1:36 pm - Ansh Gupta: Haan betichod khush hoja
27/05/2024, 1:36 pm - Ansh Gupta: Ab toh nahi nikla uska
27/05/2024, 1:42 pm - Ayush: Kya pta 🙂
27/05/2024, 1:53 pm - Ansh Gupta: Arey sach hi hoga yrr
27/05/2024, 4:08 pm - Ayush: Paise aa gye ,kar diya tujhe
27/05/2024, 4:08 pm - Ansh Gupta: Kitne kiye
27/05/2024, 4:08 pm - Ayush: 248
27/05/2024, 4:09 pm - Ansh Gupta: Aur voh vale nahi aaye jya
27/05/2024, 4:09 pm - Ansh Gupta: Jo tune cashout kiye thw
27/05/2024, 4:09 pm - Ayush: Cash out kaha kr paya
27/05/2024, 4:09 pm - Ayush: Kyuki 2 nd innings me bola tha na karne ko
27/05/2024, 4:10 pm - Ayush: Second innings me KKR dominate ki starting se 50 ke under hi tha toh cash out kya khak hoga 😕
27/05/2024, 4:11 pm - Ansh Gupta: Koi na
27/05/2024, 4:11 pm - Ayush: Wc me hoga ab
27/05/2024, 4:13 pm - Ansh Gupta: Ab toh bhabhi ji bhi committed nahi nikli
27/05/2024, 4:22 pm - Ayush: Are yrr 🫶
27/05/2024, 4:51 pm - Ayush: Abe Keshvi ne paragliding kar li 😕
27/05/2024, 4:51 pm - Ayush: Saale hm nhi kar paye the 🥴😂
27/05/2024, 4:51 pm - Ansh Gupta: Paisa hai bhai unpe
27/05/2024, 4:51 pm - Ansh Gupta: Kisne bola hum nahi kar paye
27/05/2024, 4:52 pm - Ayush: Mtlb sab ke liye toh kiye hi h ,bs apne me yeh h 😂
27/05/2024, 4:52 pm - Ansh Gupta: Snap bheji hai kya
27/05/2024, 4:52 pm - Ayush: Haa 😁
27/05/2024, 4:52 pm - Ansh Gupta: Launde
27/05/2024, 4:52 pm - Ansh Gupta: Par voh toh pehle bhi aati thi bas reel nahi aati samne se
27/05/2024, 4:52 pm - Ayush: Sachai kaun itna bolta h 😕
27/05/2024, 4:52 pm - Ansh Gupta: Tu Sejal se ye bhi puchh leta ki voh tujh main interested hai bhi ya nahi
27/05/2024, 4:53 pm - Ayush: Lauda 🥲
27/05/2024, 4:53 pm - Ayush: Na hi bolti isme puchu kya 😂
27/05/2024, 4:53 pm - Ansh Gupta: Kyon 😁
27/05/2024, 4:53 pm - Ansh Gupta: Arey toh atleast schai toh pata chalti
27/05/2024, 4:53 pm - Ayush: Abey yrr itna toh pta hi hota h
27/05/2024, 4:54 pm - Ansh Gupta: Arey isse ye pata chal jata hai ki tu Jo kar Raha hai voh use sahi lag bhi Raha hai ya nahi
27/05/2024, 4:55 pm - Ayush: Ruk ab agli baar
27/05/2024, 4:56 pm - Ayush: Utna samjh nhi aaya us samay
27/05/2024, 4:56 pm - Ansh Gupta: Arey direct mat puchh liyo
27/05/2024, 4:56 pm - Ayush: Haa be direct is baar bhi nhi pucha hu
27/05/2024, 4:56 pm - Ayush: Utna himmat nhi h 😂
27/05/2024, 4:56 pm - Ansh Gupta: Ab pehle reel veel bhejiyo uske thodi modi baat cheet fir puchh liyo
27/05/2024, 4:56 pm - Ansh Gupta: Shaabash
27/05/2024, 4:57 pm - Ayush: Tu leader wala Kam kar rha, sab bata rha kaisa karna h  😂
27/05/2024, 4:57 pm - Ayush: 😂
27/05/2024, 4:58 pm - Ansh Gupta: Kisi ka Ghar bas Jaye toh bhadiya baat ho Mera toh basna nahi 😂
27/05/2024, 5:01 pm - Ayush: Dekhte h kya hota h 😂
31/05/2024, 8:34 am - Ayush: <Media omitted>
31/05/2024, 8:36 am - Ayush: Dono badi team ya dono chooti team h tabhi jayda fayda hoga
31/05/2024, 8:45 am - Ansh Gupta: Haan voh toh hoga hi
31/05/2024, 8:52 am - Ayush: Batana kya krna h
31/05/2024, 9:07 am - Ansh Gupta: Abhi 2 din hai kyon itna pareshan ho Raha hai
31/05/2024, 9:49 am - Ayush: Mai khola tha to bol rha bs be
01/06/2024, 10:53 am - Ayush: Alice in Borderland dekh liya aur premalu bhi
01/06/2024, 10:53 am - Ayush: Kuch Naya bta
01/06/2024, 12:06 pm - Ansh Gupta: Wednesday dekhle
02/06/2024, 9:43 pm - Ayush: Khane khakr karta hu
02/06/2024, 11:07 pm - Ansh Gupta: ANSH@123ansh
02/06/2024, 11:07 pm - Ansh Gupta: imansh9636@gmail.com
02/06/2024, 11:21 pm - Ayush: Haar gye bc 🥲
02/06/2024, 11:22 pm - Ayush: 50 lagane ki hi soch rha tha 🥲
02/06/2024, 11:22 pm - Ansh Gupta: Koi ni naseeb hi kharab hai 😭
02/06/2024, 11:23 pm - Ayush: So jaa 😭
11/06/2024, 4:11 pm - Ansh Gupta: Stake ne koi bonus diya hai tujhe
11/06/2024, 4:12 pm - Ansh Gupta: Ind vs pak match ka
11/06/2024, 7:03 pm - Ayush: Ruk dekhta hu
11/06/2024, 7:13 pm - Ayush: Haa 83 diya h
11/06/2024, 7:13 pm - Ansh Gupta: Mujhe toh kuchh 90 ke aaspas mile hai
11/06/2024, 7:13 pm - Ayush: Mai ek dost ke saath khel rha hu stakes
11/06/2024, 7:13 pm - Ayush: 3 din jitta hu
11/06/2024, 7:13 pm - Ansh Gupta: Bsdk
11/06/2024, 7:13 pm - Ansh Gupta: Gaddari karta hai
11/06/2024, 7:14 pm - Ayush: Tu bola baad me karenga
11/06/2024, 7:14 pm - Ayush: Aus , Ind aur Sa pe
11/06/2024, 7:14 pm - Ansh Gupta: Arey koi ni majak kar raha hu
11/06/2024, 7:14 pm - Ansh Gupta: Kitne kamaye total
11/06/2024, 7:15 pm - Ayush: Do din 400 ka 600 aur ek din 415 ka 700
11/06/2024, 7:15 pm - Ansh Gupta: Sahi hai
11/06/2024, 7:15 pm - Ayush: Kl yrr Sa pe 2.8 tha pr Mai jab lgaya 1.5 pe
11/06/2024, 7:15 pm - Ayush: Aaj 50 lga diya hu Canada pe
11/06/2024, 7:15 pm - Ansh Gupta: Arey yrr
11/06/2024, 7:15 pm - Ayush: 7x h
11/06/2024, 7:16 pm - Ayush: Initial benefit hote hi nikal dunga
11/06/2024, 7:16 pm - Ansh Gupta: Main bhi laga du kya
11/06/2024, 7:16 pm - Ansh Gupta: 50 hi lagaunga
11/06/2024, 7:16 pm - Ansh Gupta: Agar tu nikale toh msg kariyo
11/06/2024, 7:17 pm - Ayush: Jitna mushkil h pr agar starting me Canada lead ki toh 200-250 hua nikal lunga
11/06/2024, 7:17 pm - Ayush: Chooti team pe aise hi profit hoga
11/06/2024, 7:17 pm - Ansh Gupta: Haan isliye toh lagane ki soch raha hu
11/06/2024, 7:17 pm - Ansh Gupta: Ruk laga raha hu
11/06/2024, 7:18 pm - Ayush: Sale jhuth bolta h
11/06/2024, 7:18 pm - Ansh Gupta: Kaunsa jhooth
11/06/2024, 7:18 pm - Ayush: Sun kabhi bhi jaise hi 100-150 ka profit hua nikal lena
11/06/2024, 7:18 pm - Ayush: Ki lga diya 🤣
11/06/2024, 7:18 pm - Ansh Gupta: Maine kab bola ki laga diya
11/06/2024, 7:19 pm - Ansh Gupta: Main bol raha tha ki lagane ki soch raha hu
11/06/2024, 7:19 pm - Ayush: Haa tu bola hu lga rha sorry 😐
11/06/2024, 7:19 pm - Ansh Gupta: Ja maaf kita
11/06/2024, 7:19 pm - Ansh Gupta: Kiya*
11/06/2024, 7:19 pm - Ayush: Lga de Mai nikalunga tb bata dunga
11/06/2024, 7:19 pm - Ayush: Dhanyawad
11/06/2024, 7:20 pm - Ansh Gupta: Haan ye sahi hai
11/06/2024, 7:20 pm - Ayush: Thik
11/06/2024, 7:20 pm - Ansh Gupta: Laga di
11/06/2024, 7:21 pm - Ayush: Thik phir Amir bante h
11/06/2024, 7:22 pm - Ayush: Thora thora krke 500 pahucha de
11/06/2024, 7:22 pm - Ansh Gupta: Tu toh sale phonch gaya hoga
11/06/2024, 7:22 pm - Ayush: 900 hua h pr do log ka h
11/06/2024, 7:22 pm - Ansh Gupta: Haan toh 450 ho gaye na
11/06/2024, 7:23 pm - Ayush: NZ vs wi pe lga diya 300  abhi hi
11/06/2024, 7:23 pm - Ayush: Wo 2.3 de rha tha NZ pe
11/06/2024, 7:23 pm - Ayush: Dekh kya hota h
11/06/2024, 7:23 pm - Ansh Gupta: Bhai ameer log
11/06/2024, 7:23 pm - Ayush: Sale saath hi Amer hue the
11/06/2024, 7:23 pm - Ayush: Buisness partners 👽
11/06/2024, 7:23 pm - Ansh Gupta: Aur gareeb bhi
11/06/2024, 7:23 pm - Ansh Gupta: Trip ke waqt
11/06/2024, 7:24 pm - Ayush: Toh phir Amer bnna padega trip ke liye
11/06/2024, 7:25 pm - Ansh Gupta: Haan mushkil waqt commando sakht
11/06/2024, 7:25 pm - Ayush: Toh chaliye shuru krte h phir se
15/06/2024, 2:07 pm - Ayush: 
15/06/2024, 2:07 pm - Ayush: 
15/06/2024, 2:07 pm - Ayush: 
15/06/2024, 2:07 pm - Ayush: Laude sabko pta chal jayega padh wo
15/06/2024, 2:08 pm - Ansh Gupta: Teri kaise baat ho gayi varshini se
15/06/2024, 2:09 pm - Ansh Gupta: I saw selenophile in someone's bio 😂
15/06/2024, 2:09 pm - Ayush: Abe kabhi kbhi kr leti h wo
15/06/2024, 2:09 pm - Ansh Gupta: Sabse pehle tujhe ye bolna tha ki voh maine nahi likha
15/06/2024, 2:09 pm - Ayush: Story pe react wagera ya aise hi
15/06/2024, 2:09 pm - Ansh Gupta: Bol deta ki shayad ansh ne likha hai
15/06/2024, 2:09 pm - Ansh Gupta: Masti ke liye
15/06/2024, 2:09 pm - Ayush: Pahle ye toh pta chalna chahiye log kya sochte h ,phir wo to batana hi h
15/06/2024, 2:10 pm - Ayush: Bol deta hu 😂
15/06/2024, 2:10 pm - Ansh Gupta: Bolna ki mujhe lagta hai ansh ne likha hai bas
15/06/2024, 2:10 pm - Ayush: Abhi ruk Anuja bhi maje le ek do min 😂
15/06/2024, 2:10 pm - Ansh Gupta: Arey voh nahi legi
15/06/2024, 2:10 pm - Ayush: Abey kl baat Hui thi insta pe 2 min
15/06/2024, 2:11 pm - Ansh Gupta: Toh sale sahi toh hai sabko pata chal raha hai
15/06/2024, 2:11 pm - Ayush: Ruk bhejta hu thori der me
15/06/2024, 2:11 pm - Ansh Gupta: Toh kya boli
15/06/2024, 2:20 pm - Ayush: 
15/06/2024, 2:20 pm - Ayush: 
15/06/2024, 2:20 pm - Ayush: 
15/06/2024, 2:21 pm - Ansh Gupta: Bhai sahi toh hai fir aur kya chahiye
15/06/2024, 2:21 pm - Ansh Gupta: Sale ab party dede ab mujhe
15/06/2024, 2:21 pm - Ansh Gupta: Samne se bola hai ki tum selenophile ka dhyan rakho
15/06/2024, 2:22 pm - Ayush: Dhyan rakho ka kya mtlb hota h be 😂
15/06/2024, 2:22 pm - Ansh Gupta: Bhai soch main bhari class main tujhe selenophile kehkar bulaunga toh kitna maja aayega
15/06/2024, 2:22 pm - Ayush: Laude abhi se kyu faad rha h 😂
15/06/2024, 2:22 pm - Ansh Gupta: Mtlb bas uspar focus Karo baki sab chhod do
15/06/2024, 2:22 pm - Ayush: Baat ki gehrai pr Jaa rha
15/06/2024, 2:22 pm - Ansh Gupta: Nahi main toh bas tujhe aabhaas kara raha hu ki kya hone vala hai tere sath
15/06/2024, 2:23 pm - Ansh Gupta: Baat ki gehrai ❌ baat ki sachai ✅
15/06/2024, 2:23 pm - Ayush: Mtlb tum sab milke meri Marne waale ho 😥
15/06/2024, 2:23 pm - Ayush: Instagram ✅
15/06/2024, 2:23 pm - Ansh Gupta: Tune varshini ko bata diya ki shayad ansh ne likha hai
15/06/2024, 2:24 pm - Ansh Gupta: Harika ka koi msg aaya is baat pe
15/06/2024, 2:24 pm - Ayush: Aage dekha nhi , ruk dekhta hu insta oe
15/06/2024, 2:24 pm - Ayush: Baat nhi Hui kuch din se
15/06/2024, 2:24 pm - Ansh Gupta: Theek hai
15/06/2024, 7:31 pm - Ansh Gupta: Abhay vala msg delete kar gandu
15/06/2024, 7:32 pm - Ansh Gupta: Tu jhantu hai jya
15/06/2024, 7:32 pm - Ayush: Bs likha hu pucha hu usse
15/06/2024, 7:32 pm - Ayush: Aisa kuch nhi likha ki Shak ho
15/06/2024, 7:33 pm - Ansh Gupta: Koi ni
21/06/2024, 3:52 pm - Ansh Gupta: Tere paas kisi ka subscription pada hai kya
21/06/2024, 5:46 pm - Ayush: Nahi abhi toh nhi h
01/07/2024, 11:52 pm - Ayush: 
01/07/2024, 11:52 pm - Ayush: Yahi last MSG h whatsapp pe
01/07/2024, 11:54 pm - Ansh Gupta: Arey bhai tune bol bhi Diya
01/07/2024, 11:54 pm - Ansh Gupta: Ab toh tu Samne se msg hi nahi karega
01/07/2024, 11:56 pm - Ayush: 
02/07/2024, 12:10 pm - Ayush: Khelega bgmi ?
02/07/2024, 12:11 pm - Ansh Gupta: Mobile charge nahi hai
02/07/2024, 12:11 pm - Ayush: Thik
03/07/2024, 12:18 pm - Ayush: Khelega bgmi ?
03/07/2024, 12:23 pm - Ansh Gupta: Aaja
04/07/2024, 11:46 am - Ansh Gupta: This message was deleted
05/07/2024, 9:20 pm - Ayush: Bgmi khelega  ?
05/07/2024, 9:25 pm - Ansh Gupta: Aaja
06/07/2024, 9:07 pm - Ansh Gupta: Khelega
06/07/2024, 9:23 pm - Ayush: 10 min ruk
06/07/2024, 9:23 pm - Ayush: Khana kha rha hu
06/07/2024, 9:23 pm - Ansh Gupta: Theek hai
06/07/2024, 9:23 pm - Ansh Gupta: Jaldi aaio
06/07/2024, 9:47 pm - Ansh Gupta: Kya be khana khaa raha hai ya bana raha hai
06/07/2024, 9:51 pm - Ayush: Aa gya hu
07/07/2024, 11:44 am - Ansh Gupta: Khelega
07/07/2024, 11:45 am - Ayush: Aata hu 10 min ruk
07/07/2024, 11:58 am - Ansh Gupta: Aana bhai
07/07/2024, 9:12 pm - Ansh Gupta: Khelega
07/07/2024, 9:13 pm - Ayush: 10 bje
08/07/2024, 9:02 pm - Ansh Gupta: Kya be sale akela khel raha hai
08/07/2024, 9:18 pm - Ayush: Haa khel rha tha ab baad me 10 bje khelunga
08/07/2024, 9:36 pm - Ansh Gupta: Theek
09/07/2024, 10:38 pm - Ansh Gupta: Limit gaya kya
09/07/2024, 10:38 pm - Ayush: Haa
09/07/2024, 10:38 pm - Ayush: Ek sec ruk
09/07/2024, 10:43 pm - Ayush: 2 min ruk
09/07/2024, 10:53 pm - Ayush: Rhne de dusri wali khul hi nhi Rahi h kl khelenge
10/07/2024, 11:50 am - Ayush: Kheloge ?
10/07/2024, 11:51 am - Ansh Gupta: Nahi bhai baad main khelunga
11/07/2024, 9:23 pm - Ansh Gupta: Khelega
11/07/2024, 9:36 pm - Ayush: Nhi ring ceremony me aaya hu
11/07/2024, 9:36 pm - Ayush: Aaj toh nhi hi khelunga
13/07/2024, 11:20 am - Ansh Gupta: Khelega
13/07/2024, 1:54 pm - Ayush: Rahul wali assignment bhej na dekhta hu kya kaise krna h
13/07/2024, 1:55 pm - Ansh Gupta: <Media omitted>
13/07/2024, 2:06 pm - Ayush: Isne to dono ka lagaya h bhai
13/07/2024, 2:06 pm - Ayush: Ics and communication dono ka
13/07/2024, 2:53 pm - Ansh Gupta: Voh pata nahi mujhe
13/07/2024, 4:06 pm - Ayush: <Media omitted>
13/07/2024, 4:07 pm - Ayush: Dekh liya toh hu
13/07/2024, 4:07 pm - Ansh Gupta: Ye tu thodi na hai
13/07/2024, 4:07 pm - Ansh Gupta: Ye charukesh hai
13/07/2024, 4:08 pm - Ayush: Lund ko bhi ho maine daal diya
13/07/2024, 4:10 pm - Ansh Gupta: Aur agar ye charukesh ne Dali hogi toh tu kaise batayega ki main hu
13/07/2024, 4:11 pm - Ayush: Laude lagenge fir
13/07/2024, 4:11 pm - Ayush: Wo chor baaki dekh toh
13/07/2024, 4:14 pm - Ansh Gupta: Sahi bana Diya londe main bana raha hu abhi
13/07/2024, 4:14 pm - Ayush: Bana be
13/07/2024, 4:15 pm - Ayush: Maine abhay ko bhej diya wo edit karke dega ab
13/07/2024, 4:15 pm - Ansh Gupta: Haan bana ke main bhi bhejunga use
13/07/2024, 4:15 pm - Ayush: Laptop h khudse kar  🤣
13/07/2024, 4:16 pm - Ansh Gupta: Na voh sahi se kardega
13/07/2024, 4:24 pm - Ayush: <Media omitted>
13/07/2024, 4:26 pm - Ansh Gupta: This message was deleted
13/07/2024, 4:26 pm - Ayush: Good boy 🤣
13/07/2024, 4:34 pm - Ansh Gupta: <Media omitted>
13/07/2024, 4:34 pm - Ansh Gupta: isko mirror image karke bhej
13/07/2024, 4:34 pm - Ansh Gupta: <Media omitted>
13/07/2024, 4:35 pm - Ansh Gupta: <Media omitted>
13/07/2024, 4:35 pm - Ansh Gupta: in teeno ko mirror image karke bhejde
13/07/2024, 4:36 pm - Ansh Gupta: <Media omitted>
13/07/2024, 4:42 pm - Ansh Gupta: bhej na bhai
13/07/2024, 4:42 pm - Ansh Gupta: 
13/07/2024, 4:44 pm - Ayush: Ek sec ek call aa gya tha
13/07/2024, 4:44 pm - Ayush: Bhejta hu
13/07/2024, 4:46 pm - Ayush: <Media omitted>
13/07/2024, 4:46 pm - Ayush: <Media omitted>
13/07/2024, 4:46 pm - Ayush: <Media omitted>
13/07/2024, 4:46 pm - Ayush: <Media omitted>
13/07/2024, 4:46 pm - Ayush: Confession pe daal kuch funny bsdk Abhay bol rha
13/07/2024, 4:47 pm - Ansh Gupta: Laude assignment bana raha hu abhi baad main karte hai kuchh
13/07/2024, 4:48 pm - Ayush: Wo mujhe bol raha h 😂
13/07/2024, 5:13 pm - Ansh Gupta: toh daal de
13/07/2024, 5:13 pm - Ayush: Kya daalu bsdk
13/07/2024, 5:35 pm - Ayush: <Media omitted>
13/07/2024, 5:50 pm - Ayush: Hua tera ya abhi bhi laga h
13/07/2024, 5:53 pm - Ansh Gupta: hone vala hai bas 15 20 min aur lagegi
13/07/2024, 5:58 pm - Ansh Gupta: <Media omitted>
15/07/2024, 7:24 pm - Ansh Gupta: Karta hu 10min baad
15/07/2024, 7:24 pm - Ayush: Thik h
15/07/2024, 7:24 pm - Ayush: Wo confession wale me kariyo tab abhay bhi rahega
15/07/2024, 7:24 pm - Ansh Gupta: Kya karu
15/07/2024, 7:25 pm - Ayush: Call bola us group pe kariyo
15/07/2024, 7:37 pm - Ansh Gupta: Theek hai
16/07/2024, 9:49 pm - Ayush: Khelega ?
16/07/2024, 9:52 pm - Ansh Gupta: Na Bhai sounga thodi der main
17/07/2024, 4:29 pm - Ansh Gupta: Ye bata Tera bgmi chal raha hai
17/07/2024, 4:45 pm - Ayush: Mai toh so rha tha
17/07/2024, 4:45 pm - Ayush: Ruko dekhta hu
17/07/2024, 5:06 pm - Ansh Gupta: Khelega toh aaja
17/07/2024, 5:11 pm - Ayush: Abhi just utha hu thori der baad
18/07/2024, 12:51 pm - Ansh Gupta: Khelega
18/07/2024, 1:17 pm - Ayush: Update karke aao khelte h
18/07/2024, 1:27 pm - Ansh Gupta: Abhi ruko baad main khelte hai
18/07/2024, 1:28 pm - Ayush: Okay
18/07/2024, 9:34 pm - Ansh Gupta: Khelega
18/07/2024, 9:57 pm - Ayush: Aata hu 5 min me
18/07/2024, 9:57 pm - Ayush: Khana kha rha tha <This message was edited>
20/07/2024, 5:02 pm - Ansh Gupta: Dekh liya bhai par reply nahi kiya
20/07/2024, 5:05 pm - Ayush: Bezatti ho gyi na bsdk 🥲😑
20/07/2024, 5:15 pm - Ansh Gupta: 😁
20/07/2024, 5:16 pm - Ansh Gupta: Fir likhta hu ruk
20/07/2024, 5:55 pm - Ayush: Fir reply nhi Kiya 😂
20/07/2024, 5:57 pm - Ansh Gupta: Abhi tak dekha hi nahi
21/07/2024, 9:58 pm - Ayush: <Media omitted>
22/07/2024, 10:42 am - Ansh Gupta: Khelega
22/07/2024, 4:01 pm - Ayush: Khelega ?
22/07/2024, 4:02 pm - Ayush: 
22/07/2024, 4:09 pm - Ansh Gupta: Nahi bhai bus stand pe hu main
22/07/2024, 5:53 pm - Ansh Gupta: Ye bata voh tune submit kardiya
22/07/2024, 7:16 pm - Ayush: Nhi kiya
22/07/2024, 9:22 pm - Ansh Gupta: Khelega
23/07/2024, 11:30 am - Ayush: Kheloge
23/07/2024, 1:18 pm - Ayush: Kheloge ?
23/07/2024, 3:39 pm - Ayush: Aa rha hu 2 mint me
23/07/2024, 3:39 pm - Ayush: Ek tdm khelo
23/07/2024, 5:28 pm - Ansh Gupta: Arey voh fees bharne vala link kaha pe hai
23/07/2024, 5:37 pm - Ayush: Mail pe aaya tha
23/07/2024, 9:26 pm - Ansh Gupta: Kab khelega ?
23/07/2024, 9:43 pm - Ansh Gupta: Kaha gaya bhai
24/07/2024, 11:17 am - Ayush: Kheloge ?
24/07/2024, 11:18 am - Ansh Gupta: Nahi bhai Baad mein
24/07/2024, 3:06 pm - Ayush: Ruko abhi Mai msg krunga jab aayenge sab
24/07/2024, 3:07 pm - Ayush: 3.15
24/07/2024, 3:07 pm - Ansh Gupta: Okk
24/07/2024, 3:25 pm - Ansh Gupta: Kya be tdm khelke hi aaoge ab
24/07/2024, 9:40 pm - Ansh Gupta: Aaja
24/07/2024, 10:37 pm - Ayush: Limit aa gya bhai 🥲
24/07/2024, 10:37 pm - Ansh Gupta: Chal koi na
24/07/2024, 10:53 pm - Ayush: Call Kiya tha
24/07/2024, 10:53 pm - Ansh Gupta: Main toh course registration ki puchh raha tha
24/07/2024, 10:54 pm - Ayush: Abhi sab kar dete h
24/07/2024, 10:54 pm - Ayush: Baad me La drop kr denge Jo nhi Lena hoga
24/07/2024, 10:54 pm - Ansh Gupta: Karke ss bhejna
24/07/2024, 10:54 pm - Ayush: <Media omitted>
24/07/2024, 10:54 pm - Ansh Gupta: Haan ye bhi sahi hai
24/07/2024, 10:54 pm - Ayush: Ye wali Jo Abhishek bheja h
24/07/2024, 10:54 pm - Ansh Gupta: Ye toh Abhishek vala hai
24/07/2024, 10:55 pm - Ansh Gupta: Toh ye submit kar dena hai
24/07/2024, 10:55 pm - Ayush: Yahi kr dete h
24/07/2024, 10:55 pm - Ayush: 5 credit ka h la uske according
24/07/2024, 10:55 pm - Ansh Gupta: Toh baad main drop kaise karenge
24/07/2024, 10:55 pm - Ayush: Baad me ,koi 2 credit hata denge ek week se phle
24/07/2024, 10:56 pm - Ayush: Abhay se puchte h group me kya krna h
24/07/2024, 10:56 pm - Ansh Gupta: Kaunsa 1 week paper se pehle vala
24/07/2024, 10:56 pm - Ansh Gupta: Theek hai
24/07/2024, 10:56 pm - Ayush: Nhi waha jane ke baad phla wala week
24/07/2024, 10:57 pm - Ansh Gupta: Achha aise hata bhi sakte hai
24/07/2024, 10:57 pm - Ayush: Group pe btaya tha Abhishek
24/07/2024, 10:57 pm - Ayush: Ek baar use puch lena tu call karke
24/07/2024, 10:57 pm - Ayush: Ye bhi puch lena kaise drop hota h online ya offline
24/07/2024, 11:00 pm - Ansh Gupta: Abhi nahi bataya hai ki kaise drop karna hai
25/07/2024, 11:52 am - Ansh Gupta: Kheloge
25/07/2024, 11:57 am - Ayush: Aate h 5 mint me
25/07/2024, 12:14 pm - Ansh Gupta: Okk
25/07/2024, 12:19 pm - Ansh Gupta: Bhai kab aaoge 5 min toh kab ke ho gaye
25/07/2024, 9:19 pm - Ansh Gupta: Kab kheloge
25/07/2024, 9:21 pm - Ayush: 9.30
26/07/2024, 12:00 am - Ansh Gupta: 6 ghanta ho gaya kya
26/07/2024, 12:00 am - Ayush: Rehne de limit aa gya
26/07/2024, 12:00 am - Ayush: Kl khelenge 😢
26/07/2024, 12:00 am - Ayush: Sala limit ki maa ka
26/07/2024, 12:01 am - Ansh Gupta: Bhai in mamlo main mujhe koi dikkat nahi hai mera kabhi nahi aaya limit ka msg
26/07/2024, 12:01 am - Ayush: Aa jayega kabhi khelo toh
26/07/2024, 12:02 am - Ansh Gupta: Utna time nahi milta ki 6 ghanta khel pau max 4 ghanta ho pata hai
26/07/2024, 12:02 am - Ayush: Bhai 🫡
26/07/2024, 4:46 pm - Ansh Gupta: Salo Roy queen ke sath khel raha hai
26/07/2024, 11:12 pm - Ayush: Kuch bta n download kr leta hu dekhne ke liye
28/07/2024, 7:50 pm - Ansh Gupta: 
29/07/2024, 7:58 pm - Ansh Gupta: 
29/07/2024, 9:59 pm - Ansh Gupta: 
01/08/2024, 9:32 am - Ansh Gupta: Ruk aata hu 10 min main
01/08/2024, 10:07 am - Ansh Gupta: Bahar aa
03/08/2024, 1:56 am - Ayush: Jag rha ya so gya
04/08/2024, 6:28 pm - Ansh Gupta: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
04/08/2024, 11:34 pm - Ayush: <Media omitted>
05/08/2024, 2:20 pm - Ayush: <Media omitted>
05/08/2024, 2:20 pm - Ayush: <Media omitted>
05/08/2024, 2:20 pm - Ayush: <Media omitted>
05/08/2024, 2:22 pm - Ayush: <Media omitted>
05/08/2024, 10:41 pm - Ayush: Padh riya h kya  bete <This message was edited>
05/08/2024, 10:41 pm - Ansh Gupta: Nahi
05/08/2024, 10:42 pm - Ansh Gupta: Kyon khelna tha
05/08/2024, 10:42 pm - Ayush: 🤡
05/08/2024, 10:42 pm - Ayush: Nhi bsdk 😈
05/08/2024, 10:42 pm - Ansh Gupta: Toh fir kyo puchha
05/08/2024, 10:42 pm - Ayush: Aise hi 🙂
06/08/2024, 10:45 am - Ansh Gupta: n = int(input("Enter value: "))

def cube(n):
    cube_number = n * n * n
    print(cube_number)

cube(n)
06/08/2024, 10:52 am - Ansh Gupta: def celsius_to_fahrenheit(celsius):
  return (celsius * 9/5) + 32

celsius = float(input("Enter temperature in Celsius: "))
fahrenheit = celsius_to_fahrenheit(celsius)
print("Temperature in Fahrenheit:", fahrenheit)

def farneheit_to_celcsius(fahrenheit):
  return (fahrenheit-32)*5/9

fahrenheit = float(input("Enter temperature in farneheit: "))
celsius = farneheit_to_celcsius(fahrenheit)
print("Temperature in celsius:", celsius)
08/08/2024, 12:23 pm - Ayush: def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def print_primes_between(a, b):
    """Print all prime numbers between a and b inclusive."""
    for num in range(a, b + 1):
        if is_prime(num):
            print(num)

# Example usage
a = int(input("Enter the first number: "))
b = int(input("Enter the second number: "))
print_primes_between(a, b)
08/08/2024, 12:25 pm - Ansh Gupta: def sum_of_odd_and_even(start, end):
    sum_odd = 0
    sum_even = 0

    for num in range(start, end + 1):
        if num % 2 == 0:
            sum_even += num
        else:
            sum_odd += num

    return sum_odd, sum_even

def main():
    start = int(input("Enter the starting number: "))
    end = int(input("Enter the ending number: "))

    sum_odd, sum_even = sum_of_odd_and_even(start, end)

    print(f"Sum of odd numbers between {start} and {end} (inclusive): {sum_odd}")
    print(f"Sum of even numbers between {start} and {end} (inclusive): {sum_even}")

if __name__ == "__main__":
    main()
08/08/2024, 12:55 pm - Ansh Gupta: n = int(input("enter n: "))
for i in range(1, n + 1):
    for j in range(1, i + 1):
        print(j, end=" ")
    print()
08/08/2024, 12:56 pm - Ansh Gupta: for i in range(5, 0, -1):
  for j in range(i):
    print(i, end="")
  print()
08/08/2024, 1:12 pm - Ansh Gupta: char = 65
for i in range(1,7):
  for j in range(i):
    print(chr(char), end=" ")
    char += 1
  print()
08/08/2024, 2:49 pm - Ayush: 3.40 pe chalenge
11/08/2024, 11:18 am - Ayush: 2 mint ruko ..
12/08/2024, 7:16 pm - Ansh Gupta: <Media omitted>
12/08/2024, 7:16 pm - Ansh Gupta: <Media omitted>
13/08/2024, 10:33 am - Ansh Gupta: sum = 0
count = 0

while True:
    user_input = input("Please enter a number (or 'done' to finish): ")
    if user_input.lower() == 'done':
            avg = sum / count
            print(sum)
            print(count)
            print(avg)
    try:
        x = int(user_input)
        sum += x
        count += 1
    except ValueError:
        print("Oops! That was not a valid number. Try again...")
14/08/2024, 9:36 am - Ayush: 9.45 pr chalte h
14/08/2024, 2:25 pm - Ayush: // Simple C++ program to add two polynomials
#include <iostream>
using namespace std;

// A utility function to return maximum of two integers
int max(int m, int n) { return (m > n) ? m : n; }

// A[] represents coefficients of first polynomial
// B[] represents coefficients of second polynomial
// m and n are sizes of A[] and B[] respectively
int* add(int A[], int B[], int m, int n)
{
    int size = max(m, n);
    int* sum = new int[size];

    // Initialize the product polynomial
    for (int i = 0; i < m; i++)
        sum[i] = A[i];

    // Take every term of first polynomial
    for (int i = 0; i < n; i++)
        sum[i] += B[i];

    return sum;
}

// A utility function to print a polynomial
void printPoly(int poly[], int n)
{
    for (int i = 0; i < n; i++) {
        cout << poly[i];
        if (i != 0)
            cout << "x^" << i;
        if (i != n - 1)
            cout << " + ";
    }
}

// Driver program to test above functions
int main()
{
    // The following array represents polynomial 5 + 10x^2 +
    // 6x^3
    int A[] = { 5, 0, 10, 6 };

    // The following array represents polynomial 1 + 2x +
    // 4x^2
    int B[] = { 1, 2, 4 };
    int m = sizeof(A) / sizeof(A[0]);
    int n = sizeof(B) / sizeof(B[0]);

    cout << "First polynomial is \n";
    printPoly(A, m);
    cout << "\nSecond polynomial is \n";
    printPoly(B, n);

    int* sum = add(A, B, m, n);
    int size = max(m, n);

    cout << "\nsum polynomial is \n";
    printPoly(sum, size);

    return 0;
}


#include <iostream> 
using namespace std; 
  
// A[] represents coefficients of first polynomial 
// B[] represents coefficients of second polynomial 
// m and n are sizes of A[] and B[] respectively 
int *multiply(int A[], int B[], int m, int n) 
{ 
   int *prod = new int[m+n-1]; 
  
   // Initialize the product polynomial 
   for (int i = 0; i<m+n-1; i++) 
     prod[i] = 0; 
  
   // Multiply two polynomials term by term 
  
   // Take ever term of first polynomial 
   for (int i=0; i<m; i++) 
   { 
     // Multiply the current term of first polynomial 
     // with every term of second polynomial. 
     for (int j=0; j<n; j++) 
         prod[i+j] += A[i]*B[j]; 
   } 
  
   return prod; 
} 
  
// A utility function to print a polynomial 
void printPoly(int poly[], int n) 
{ 
    for (int i=0; i<n; i++) 
    { 
       cout << poly[i]; 
       if (i != 0) 
        cout << "x^" << i ; 
       if (i != n-1) 
       cout << " + "; 
    } 
} 
  
// Driver program to test above functions 
int main() 
{ 
    // The following array represents polynomial 5 + 10x^2 + 6x^3 
    int A[] = {5, 0, 10, 6}; 
  
    // The following array represents polynomial 1 + 2x + 4x^2 
    int B[] = {1, 2, 4}; 
    int m = sizeof(A)/sizeof(A[0]); 
    int n = sizeof(B)/sizeof(B[0]); 
  
    cout << "First polynomial is "; 
    printPoly(A, m); 
    cout <<endl<< "Second polynomial is "; 
    printPoly(B, n); 
  
    int *prod = multiply(A, B, m, n); 
  
    cout <<endl<< "Product polynomial is "; 
    printPoly(prod, m+n-1); 
  
    return 0; 
} 


// C++ Program to illustrate how to use a stack to convert
// an infix expression to a postfix expression
#include <iostream>
#include <stack>
#include <string>
using namespace std;

// Function to check the precedence of operators
int precedence(char op)
{
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    return 0;
}

// Function to convert infix expression to postfix
// expression
string infixToPostfix(string infix)
{
    stack<char> st;
    string postfix = "";
    for (int i = 0; i < infix.length(); i++) {
        char c = infix[i];

        // If the scanned character is an operand, add it to
        // output string.
        if (isalnum(c))
            postfix += c;

        // If the scanned character is an '(', push it to
        // the stack.
        else if (c == '(')
            st.push('(');

        // If the scanned character is an ')', pop and to
        // output string from the stack until an '(' is
        // encountered.
        else if (c == ')') {
            while (st.top() != '(') {
                postfix += st.top();
                st.pop();
            }
            st.pop();
        }

        // If an operator is scanned
        else {
            while (!st.empty()
                   && precedence(c)
                          <= precedence(st.top())) {
                postfix += st.top();
                st.pop();
            }
            st.push(c);
        }
    }

    // Pop all the remaining elements from the stack
    while (!st.empty()) {
        postfix += st.top();
        st.pop();
    }

    return postfix;
}

int main()
{
    string infix = "A+B*C";
    cout << "Infix Expression: " << infix << endl;
    cout << "Postfix Expression: " << infixToPostfix(infix)
         << endl;
    return 0;
}

// C++ Program to illustrate how we can use the stack data
// structure to evaluate the value of a postfix expression
#include <iostream>
#include <stack>
#include <string>
using namespace std;

// Function to perform an operation based on the operator
// and return the result
int performOperation(int operand1, int operand2,
                     char operation)
{
    switch (operation) {
    case '+':
        return operand1 + operand2;
    case '-':
        return operand1 - operand2;
    case '*':
        return operand1 * operand2;
    case '/':
        return operand1 / operand2;
    default:
        return 0;
    }
}

// Function to evaluate the postfix expression
int evaluatePostfixExpression(const string& expression)
{
    stack<int> stack;

    for (char c : expression) {
        if (isdigit(c)) {
            // Convert char digit to int and push onto the
            // stack
            stack.push(c - '0');
        }
        else {
            // Pop the top two elements for the operation
            int operand2 = stack.top();
            stack.pop();
            int operand1 = stack.top();
            stack.pop();

            // Perform operation and push the result back
            // onto the stack
            int result
                = performOperation(operand1, operand2, c);
            stack.push(result);
        }
    }
    // The final result should be the only item left in the
    // stack
    return stack.top();
}

int main()
{

    string expression2 = "73*4+";
    int result = evaluatePostfixExpression(expression2);
    cout << "Result of Postfix Expression \"" << expression2
         << "\" is: " << result << endl;

    return 0;
}
14/08/2024, 2:34 pm - Ansh Gupta: #include <iostream>
#include <cstring>
using namespace std;

int prec(char c) {
    if (c == '^')
        return 3;
    else if (c == '/' || c == '*')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return -1;
}
bool isOperand(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9');
}

void infixToPostfix(string s) {
    const int MAX = 100; 
    char stack[MAX];
    int top = -1;
    string result;

    for (int i = 0; i < s.length(); i++) {
        char c = s[i];

        if (isOperand(c))
            result += c;

        else if (c == '(')
            stack[++top] = '(';

        else if (c == ')') {
            while (top != -1 && stack[top] != '(') {
                result += stack[top--];
            }
            top--; 
        }

        else {
            while (top != -1 && prec(c) <= prec(stack[top])) {
                result += stack[top--];
            }
            stack[++top] = c;
        }
    }

    while (top != -1) {
        result += stack[top--];
    }

    cout << "Postfix expression: " << result << endl;
}

int main() {
    string exp = "(p+q)*(m-n)";
    cout << "Infix expression: " << exp << endl;
    infixToPostfix(exp);
    return 0;
}
14/08/2024, 2:51 pm - Ayush: #include <iostream>
#include <string>
using namespace std;
void reverseString(string& str) 
{
    int n = str.length();
    char stack[n];
    int top = -1;
    for (int i = 0; i < n; i++)
     {
        stack[++top] = str[i];
    }

    for (int i = 0; i < n; i++) {
        str[i] = stack[top--];
    }
}
int main() {
    string str = "Ayush Raj Singh";
    reverseString(str);
    cout << "Reversed String: " << str << endl;
    return 0;
}
14/08/2024, 3:23 pm - Ansh Gupta: #include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;

int prec(char c) {

    if(c=='^')
        return 4;
    else if (c == '/' || c == '*')
        return 3;
    else if (c == '%')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return -1;
}

bool isOperand(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9');
}

void reverseAndReplace(char s[], int len) {
    reverse(s, s + len);
    for (int i = 0; i < len; i++) {
        if (s[i] == '(')
            s[i] = ')';
        else if (s[i] == ')')
            s[i] = '(';
    }
}

string infixToPostfix(char infix[], int len) {
    char stack[100];
    int top = -1; 
    string result = ""; 

    for (int i = 0; i < len; i++) {
        char c = infix[i];

        
        if (isOperand(c)) {
            result += c;
        }
        else if (c == '(') {
            stack[++top] = '(';
        }
       
        else if (c == ')') {
            while (top != -1 && stack[top] != '(') {
                result += stack[top--];
            }
            top--;
        }
        
        else {
            while (top != -1 && prec(c) <= prec(stack[top])) {
                result += stack[top--];
            }
            stack[++top] = c;
        }
    }

    while (top != -1) {
        result += stack[top--];
    }

    return result; 
}

string infixToPrefix(char infix[], int len) {
    
    reverseAndReplace(infix, len);
    string postfix = infixToPostfix(infix, len);

    reverse(postfix.begin(), postfix.end());

    return postfix;
}

int main() {
    char exp[] = "(p+q)*(m-n)";
    int len = strlen(exp);
    cout << "Infix expression: " << exp << endl;

    string prefix = infixToPrefix(exp, len);

    cout << "Prefix expression: " << prefix << endl;

    return 0;
}
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:01 am - Ayush: <Media omitted>
16/08/2024, 1:39 pm - Ayush: <Media omitted>
16/08/2024, 1:45 pm - Ayush: <Media omitted>
16/08/2024, 1:55 pm - Ayush: <Media omitted>
16/08/2024, 1:58 pm - Ayush: <Media omitted>
16/08/2024, 2:06 pm - Ayush: <Media omitted>
17/08/2024, 9:30 pm - Ansh Gupta: Khel raha hai kya
20/08/2024, 1:34 pm - Ayush: Thori der baad abhi leta hua hu
20/08/2024, 11:28 pm - Ayush: <Media omitted>
20/08/2024, 11:28 pm - Ayush: <Media omitted>
21/08/2024, 10:15 am - Ansh Gupta: import random

# Generate 100 random integers that are either 8 or 1
random_list = [random.choice([8, 1]) for _ in range(100)]

# Find the longest run of 8s
max_run = 0
current_run = 0

for num in random_list:
    if num == 8:
        current_run += 1
        if current_run > max_run:
            max_run = current_run
    else:
        current_run = 0

print(f"Random List: {random_list}")
print(f"Longest run of 8s: {max_run}")
21/08/2024, 10:15 am - Ansh Gupta: def right_rotate(lst, n):
    # Calculate the effective rotation amount
    n = n % len(lst)
    return lst[-n:] + lst[:-n]

# Example usage
list1 = [1, 2, 3, 4, 5, 6]
n = 2
print(f"Original List: {list1}")
print(f"Rotated List by {n}: {right_rotate(list1, n)}")

list2 = [3, 0, 1, 4, 2, 3]
n = 3
print(f"Original List: {list2}")
print(f"Rotated List by {n}: {right_rotate(list2, n)}")
21/08/2024, 10:15 am - Ansh Gupta: L = ['apple', 'banana', 'kiwi', 'orange', 'fig', 'grape']

# (a) A list that consists of the strings of L with their first characters removed
list_a = [s[1:] for s in L]
print(f"Strings with first characters removed: {list_a}")

# (b) A list of the lengths of the strings of L
list_b = [len(s) for s in L]
print(f"Lengths of the strings: {list_b}")

# (c) A list that consists of only those strings of L that are at least three characters long
list_c = [s for s in L if len(s) >= 3]
print(f"Strings with at least three characters: {list_c}")
21/08/2024, 10:47 am - Ayush: # Dictionary containing usernames and their corresponding passwords
user_credentials = {
    "user1": "password123",
    "user2": "abc123",
    "user3": "mypassword",
    "user4": "pass456",
    "user5": "qwerty",
    "user6": "letmein",
    "user7": "admin123",
    "user8": "welcome",
    "user9": "trustno1",
    "user10": "secret"
}

# Ask the user to enter their username and password
username = input("Enter your username: ")
password = input("Enter your password: ")

# Check if the username is in the dictionary
if username in user_credentials:
    # Check if the entered password matches the password in the dictionary
    if user_credentials[username] == password:
        print("You are now logged in to the system.")
    else:
        print("Invalid password.")
else:
    print("The username is not valid.")
21/08/2024, 1:58 pm - Ansh Gupta: #include<iostream>
using namespace std;

const int MAX_SIZE = 1000;
int queue[MAX_SIZE];
int front = -1;
int rear = -1;

bool isEmpty() {
    return front == rear;
}

void enqueue(int data) {
    if (rear == MAX_SIZE - 1) {
        cout << "Queue is Full" << endl;
    } else {
        if (front == -1) {
            front = 0;
        }
        rear++;
        queue[rear] = data;
    }
}

int dequeue() {
    if (isEmpty()) {
        cout << "Queue is Empty" << endl;
        return -1;
    } else {
        int ans = queue[front];
        queue[front] = -1;
        front++;
        if (front > rear) {
            front = -1;
            rear = -1;
        }
        return ans;
    }
}

int getFront() {
    if (isEmpty()) {
        cout << "Queue is Empty" << endl;
        return -1;
    } else {
        return queue[front];
    }
}

int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    cout << "Front element: " << getFront() << endl;
    cout << "Dequeue element: " << dequeue() << endl;
    cout << "Front element after dequeue: " << getFront() << endl;
    enqueue(40);
    cout << "Front element after enqueue: " << getFront() << endl;
    return 0;
}
21/08/2024, 1:58 pm - Ansh Gupta: #include <iostream>
using namespace std;

const int MAX_SIZE = 5;  
int queue[MAX_SIZE];
int front = -1;
int rear = -1;

bool isFull() {
    return (front == 0 && rear == MAX_SIZE - 1) || (rear == (front - 1) % (MAX_SIZE - 1));
}

bool isEmpty() {
    return front == -1;
}

void enqueue(int value) {
    if (isFull()) {
        cout << "Queue is Full" << endl;
        return;
    } else if (isEmpty()) {  
        front = rear = 0;
        queue[rear] = value;
    } else if (rear == MAX_SIZE - 1 && front != 0) {  
        rear = 0;
        queue[rear] = value;
    } else {
        rear++;
        queue[rear] = value;
    }
    cout << value << " enqueued to queue." << endl;
}

int dequeue() {
    if (isEmpty()) {
        cout << "Queue is Empty" << endl;
        return -1;
    }

    int data = queue[front];
    queue[front] = -1; 

    if (front == rear) {
        front = -1;
        rear = -1;
    } else if (front == MAX_SIZE - 1) {  // Wrap around
        front = 0;
    } else {
        front++;
    }

    cout << data << " dequeued from queue." << endl;
    return data;
}

void displayQueue() {
    if (isEmpty()) {
        cout << "Queue is Empty" << endl;
        return;
    }

    cout << "Queue elements: ";
    if (rear >= front) {
        for (int i = front; i <= rear; i++)
            cout << queue[i] << " ";
    } else {
        for (int i = front; i < MAX_SIZE; i++)
            cout << queue[i] << " ";
        for (int i = 0; i <= rear; i++)
            cout << queue[i] << " ";
    }
    cout << endl;
}

int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    enqueue(40);
    enqueue(50);

    displayQueue();

    dequeue();
    dequeue();

    displayQueue();

    enqueue(60);
    enqueue(70);

    displayQueue();

    return 0;
}
21/08/2024, 1:59 pm - Ayush: #include<iostream>
using namespace std;

class Queue {
    int *arr;
    int front;
    int rear;
    int size;

public:
    Queue() {
        size = 10;
        arr = new int[size]; // Correct array allocation
        front = 0;
        rear = 0;
    }

    bool isEmpty() {
        return front == rear; // Simplified
    }

    void enqueue(int data) {
        if (rear == size) { // Correct comparison
            cout << "Queue is full" << endl;
        } else {
            arr[rear] = data;
            rear++;
        }
    }

    int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return -1;
        } else {
            int value = arr[front]; // Capture the dequeued value
            front++;
            if (front == rear) {
                // Reset front and rear when queue becomes empty
                front = 0;
                rear = 0;
            }
            return value; // Return the dequeued value
        }
    }

    void display() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
        } else {
            cout << "Queue elements: ";
            for (int i = front; i < rear; i++) {
                cout << arr[i] << " ";
            }
            cout << endl;
        }
    }

    ~Queue() {
        delete[] arr; // Deallocate memory
    }
};

int main() {
    Queue q;

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);

    cout << "Queue after enqueues: ";
    q.display();

    cout << "Dequeued: " << q.dequeue() << endl;
    cout << "Queue after one dequeue: ";
    q.display();

    q.enqueue(40);
    

    cout << "Queue after another enqueue: ";
    q.display();

    cout << "Dequeued: " << q.dequeue() << endl;
    cout << "Dequeued: " << q.dequeue() << endl;

    cout << "Queue after more dequeues: ";
    q.display();

    return 0;
}
21/08/2024, 1:59 pm - Ayush: #include<iostream>
using namespace std;
class CircularQueue {
    int *arr;
    int front;
    int rear;
    int size;
public:
    CircularQueue(int s = 10) {
        size = s;
        arr = new int[size];
        front = -1;
        rear = -1;
    }

    bool enqueue(int value) {
        // Check if the queue is full
        if ((front == 0 && rear == size - 1) || (rear == (front - 1 + size) % size)) {
            cout << "Queue is full" << endl;
            return false;
        }
        // Insert the first element
        else if (front == -1) {
            front = rear = 0;
            arr[rear] = value;
        }
        // Wrap around to the beginning of the array if rear is at the end
        else if (rear == size - 1 && front != 0) {
            rear = 0;
            arr[rear] = value;
        }
        // Normal case: increment rear and insert the element
        else {
            rear++;
            arr[rear] = value;
        }
        return true;
    }

    int dequeue() {
        if (front == -1) {
            cout << "Queue is empty" << endl;
            return -1;
        }
        int ans = arr[front];
        // Check if the queue is now empty after dequeuing
        if (front == rear) {
            front = rear = -1; // Queue is empty
        } else if (front == size - 1) {
            front = 0; // Wrap around to the beginning
        } else {
            front++;
        }
        return ans;
    }

    void display() {
        if (front == -1) {
            cout << "Queue is empty" << endl;
            return;
        }

        cout << "Queue elements: ";
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear) break;
            i = (i + 1) % size;
        }
        cout << endl;
    }

    ~CircularQueue() {
        delete[] arr; // Deallocate memory
    }
};

int main() {
    CircularQueue q(5);

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);

    cout << "Queue after enqueues: ";
    q.display();

    q.dequeue();
    q.dequeue();

    cout << "Queue after two dequeues: ";
    q.display();

    q.enqueue(50);
    q.enqueue(60);

    cout << "Queue after additional enqueues: ";
    q.display();

    q.enqueue(70); // This should show "Queue is full"

    cout << "Final Queue: ";
    q.display();

    return 0;
}
22/08/2024, 7:58 pm - Ayush: Question bhej na ache se krna kya h assignment wale me ...
22/08/2024, 7:59 pm - Ansh Gupta: Ruk 10 min bhejta hu
22/08/2024, 8:11 pm - Ansh Gupta: priority queue having two row and one for priority and one for number or letter and these number are inserted directly in 1st row and after those number are sort according to priority in cpp using array wihtour using class 
dekh main ye dala hu
22/08/2024, 8:20 pm - Ansh Gupta: 
22/08/2024, 8:45 pm - Ayush: #include <iostream>
using namespace std;

const int MAX_SIZE = 100;

// Function to sort the queue based on priority using Bubble Sort
void sortQueue(int queue[][MAX_SIZE], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (queue[1][j] > queue[1][j + 1]) {
                // Swap priorities
                int tempPriority = queue[1][j];
                queue[1][j] = queue[1][j + 1];
                queue[1][j + 1] = tempPriority;

                // Swap corresponding values
                int tempValue = queue[0][j];
                queue[0][j] = queue[0][j + 1];
                queue[0][j + 1] = tempValue;
            }
        }
    }
}

// Function to add an element to the queue
void enqueue(int queue[][MAX_SIZE], int &n, int value, int priority) {
    if (n == MAX_SIZE) {
        cout << "Queue is full" << endl;
        return;
    }
    queue[0][n] = value;      // Store value
    queue[1][n] = priority;   // Store priority
    n++;
    sortQueue(queue, n);  // Sort the queue based on priority after insertion
}

// Function to remove the element with the highest priority
void dequeue(int queue[][MAX_SIZE], int &n) {
    if (n == 0) {
        cout << "Queue is empty" << endl;
        return;
    }
    cout << "Dequeued: " << queue[0][0] << " with priority " << queue[1][0] << endl;
    
    // Shift all elements to the left
    for (int i = 0; i < n - 1; i++) {
        queue[0][i] = queue[0][i + 1];
        queue[1][i] = queue[1][i + 1];
    }
    n--;
}

// Function to display the queue
void display(int queue[][MAX_SIZE], int n) {
    if (n == 0) {
        cout << "Queue is empty" << endl;
        return;
    }
    cout << "Queue elements with priorities:" << endl;
    for (int i = 0; i < n; i++) {
        cout << "Value: " << queue[0][i] << ", Priority: " << queue[1][i] << endl;
    }
}

int main() {
    int queue[2][MAX_SIZE];
    int n = 0;  // Current number of elements in the queue
    
    // Example operations
    enqueue(queue, n, 10, 2);
    enqueue(queue, n, 30, 3);
    enqueue(queue, n, 20, 1);
    enqueue(queue, n, 40, 0);
    
    display(queue, n);

    dequeue(queue, n);
    dequeue(queue, n);

    display(queue, n);

    return 0;
}
22/08/2024, 8:45 pm - Ayush: Dekhna ye shi h kya
22/08/2024, 8:51 pm - Ayush: Bata ?
22/08/2024, 8:52 pm - Ansh Gupta: Abhi khana khane Jaa rha hu
22/08/2024, 8:52 pm - Ansh Gupta: Baad main dekhke batata hu
22/08/2024, 8:52 pm - Ansh Gupta: Dekhne main toh sahi lag raha hai
22/08/2024, 8:54 pm - Ayush: Thik
24/08/2024, 10:28 am - Ayush: 10 min ruk
24/08/2024, 10:28 am - Ayush: Thora charge aur ho haye
24/08/2024, 10:28 am - Ayush: "jaye
24/08/2024, 10:28 am - Ansh Gupta: Ok
25/08/2024, 7:31 pm - Ansh Gupta: <Media omitted>
25/08/2024, 8:05 pm - Ansh Gupta: What to Do: Both Indian and global companies should increase their investment on R&D to constantly create more new products and technologies.
-
Who Should Act: Indian Companies should look to grow their business outside India, while Global companies should explore new opportunities in fast-growing regions like India (i.e. they should focus on Emerging Markets).
-
When to Act: Both Indian and Global companies should start taking these steps within the next few years (1-3 years) to make the most of the current market opportunities and stay ahead of competition.
-
Where to Focus: Indian companies should try to expand majorly in the Asian and African Markets (High demand for Affordable solutions), while Global companies should strengthen their position in India and similar regions.
-
How to Achieve This: Companies should work together through partnerships and joint ventures to combine their strengths, share knowledge, and thus creating better products and services for everyone.
28/08/2024, 10:07 am - Ayush: <Media omitted>
28/08/2024, 10:07 am - Ayush: class Time:
    def __init__(self, seconds):
        self.seconds = seconds

    def convert_to_minutes(self):
        minutes = self.seconds // 60
        seconds = self.seconds % 60
        return f"{minutes}:{seconds:02}"

    def convert_to_hours(self):
        hours = self.seconds // 3600
        minutes = (self.seconds % 3600) // 60
        seconds = self.seconds % 60
        return f"{hours}:{minutes:02}:{seconds:02}"

# Example usage
time1 = Time(230)
print(time1.convert_to_minutes())  # Output: 3:50
print(time1.convert_to_hours())    # Output: 0:03:50
28/08/2024, 10:08 am - Ansh Gupta: class Investment:
    def __init__(self, principal, interest):
        self.principal = principal
        self.interest = interest

    def value_after(self, years):
        return self.principal * (1 + self.interest) ** years

    def __str__(self):
        return f"Principal ${self.principal:.2f}, Interest rate {self.interest * 100:.2f}%"

# Example usage:
investment = Investment(1000, 0.0512)
print(investment)  # Output: Principal $1000.00, Interest rate 5.12%
print(f"Value after 5 years: ${investment.value_after(5):.2f}")  # Output: Value after 5 years: $1282.04
28/08/2024, 10:27 am - Ayush: <Media omitted>
28/08/2024, 10:33 am - Ayush: lass Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def get_person_info(self):
        return f"Name: {self.name}, Age: {self.age}"

class Address:
    def __init__(self, street, city, postcode):
        self.street = street
        self.city = city
        self.postcode = postcode
    
    def get_address_info(self):
        return f"Street: {self.street}, City: {self.city}, Postcode: {self.postcode}"
28/08/2024, 2:23 pm - Ayush: #include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next;
    // constructor
    Node(int value)
    {
        data = value;
        next = NULL;
    }
};
int main()
{
    Node *Head;
    Head = NULL;
    int arr[] = {2, 4, 6, 8, 10};
    // insert node at begining

    // linked list does not exist
    for (int i = 0; i < 5; i++)
    {
        if (Head == NULL)
        {
            Head = new Node(arr[i]);
        }
        // linked list already exists
        else
        {
            Node *temp;
            temp = new Node(arr[i]);
            temp->next = Head;
            Head = temp;
        }
    }
    // printing the value
    Node *temp1;
    temp1 = Head;
    while (temp1 != NULL)
    {
        cout << temp1->data << " ";
        temp1 = temp1->next;
    }
}
28/08/2024, 2:23 pm - Ayush: #include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next;
    // constructor
    Node(int value)
    {
        data = value;
        next = NULL;
    }
};
int main()
{
    Node *Head;
    Head=NULL;
    int arr[]={2,4,6,8};

    //insert at end
    for(int i=0;i<4;i++)
    {
        if(Head==NULL)
        {
            Head=new Node(arr[i]);
        }
        else
        {
          Node *tail =Head;
          while(tail->next!=NULL)
          {
            tail=tail->next;
          }
          Node *temp;
          temp=new Node(arr[i]);
          tail->next=temp;
          //tail->next=new Node(arr[i]);
        }
    }
        Node * temp1;
        temp1=Head;
        while(temp1!=NULL)
        {
            cout<<temp1->data<<" ";
            temp1=temp1->next;
        }
}
28/08/2024, 3:56 pm - Ansh Gupta: <Media omitted>
29/08/2024, 12:46 pm - Ansh Gupta: import sqlite3

conn = sqlite3.connect('roster.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE Roster (
    Name TEXT,
    Species TEXT,
    IQ INTEGER
)
''')

roster_entries = [
    ('Jean-Baptiste Zorg', 'Human', 122),
    ('Korben Dallas', 'Meat Popsicle', 100),
    ('Ak’not', 'Mangalore', -5)
]

cursor.executemany('INSERT INTO Roster (Name, Species, IQ) VALUES (?, ?, ?)', roster_entries)

cursor.execute('''
UPDATE Roster
SET Species = 'Human'
WHERE Name = 'Korben Dallas'
''')

cursor.execute('''
SELECT Name, IQ
FROM Roster
WHERE Species = 'Human'
''')

human_roster = cursor.fetchall()

for row in human_roster:
    print(f"Name: {row[0]}, IQ: {row[1]}")

conn.commit()
conn.close()
29/08/2024, 9:32 pm - Ayush: Ghar pe baat krke aata hu ruk
01/09/2024, 8:17 pm - Ayush: <Media omitted>
03/09/2024, 11:02 am - Ayush: Kl nhi h lab exam
03/09/2024, 11:02 am - Ayush: Next week Tuesday ko hoga
03/09/2024, 11:03 am - Ansh Gupta: Sahi hai ye bata Aaj lab usne
03/09/2024, 11:09 am - Ansh Gupta: Batana Aaj lab li kya usne
03/09/2024, 11:10 am - Ayush: Nhi
03/09/2024, 11:10 am - Ansh Gupta: Okk
03/09/2024, 11:10 am - Ayush: Sayad agle class me le
03/09/2024, 11:10 am - Ansh Gupta: Theek hai
04/09/2024, 10:53 am - Ayush: Create a NumPy 8 × 8 array of integers with ones on all the edges and zeros everywhere else. Hint: use NumPy's ones function and then use slicing to set the interior elements of the array to zero. Print the result. It should look like this:
04/09/2024, 3:12 pm - Ayush: #include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next;

    Node(int value) : data(value), next(nullptr) {}
};

class CircularLinkedList
{
private:
    Node *head;

public:
    CircularLinkedList() : head(nullptr) {}

    void insert(int value)
    {
        Node *newNode = new Node(value);
        if (!head)
        {
            head = newNode;
            newNode->next = head;
        }
        else
        {
            Node *temp = head;
            while (temp->next != head)
            {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->next = head;
        }
    }

    void display()
    {
        if (!head)
        {
         cout << "List is empty." << endl;
            return;
        }

        Node *temp = head;
        do
        {
            cout << temp->data << " -> ";
            temp = temp->next;
        } while (temp != head);

        cout << "(head)" << endl;
    }

    void swapKthNodes(int k)
    {
        if (!head || k <= 0)
            return;

        Node *prev1 = nullptr;
        Node *curr1 = head;

        for (int i = 1; i < k && curr1->next != head; i++)
        {
            prev1 = curr1;
            curr1 = curr1->next;
        }

        if (curr1->next == head && curr1 == head)
            return;

        Node *curr2 = curr1->next;
        Node *next2 = curr2->next;

        if (curr2 == head)
        {
            if (prev1)
            {
                prev1->next = head;
            }
            curr1->next = head->next;
            head->next = curr1;
            head = curr1;
        }
        else
        {
            if (prev1)
            {
                prev1->next = curr2;
            }
            else
            {
                head = curr2;
            }
            curr1->next = next2;
            curr2->next = curr1;
        }
    }
};

int main()
{
    CircularLinkedList list;

    list.insert(10);
    list.insert(20);
    list.insert(30);
    list.insert(40);
    list.insert(50);

    cout << "Original Circular Linked List: ";
    list.display();

    int k;
    cout << "Enter the value of k: ";
    cin >> k;

    list.swapKthNodes(k);

    cout << "List after swapping " << k << "th and " << k + 1 << "th nodes: ";
    list.display();

    return 0;
}
04/09/2024, 3:52 pm - Ayush: <Media omitted>
05/09/2024, 12:27 pm - Ayush: import numpy as np
arr=np.array([0,1,2,3,4,5,6,7,8,9])
arr[arr%2!=0]=-1
print(arr)
05/09/2024, 12:33 pm - Ayush: import numpy as np
a=np.array([1,2,3])
repeated=np.repeat(a,3)
stacked=np.hstack([a]*3)
result=np.concatenate((repeated,stacked))
print(result)
05/09/2024, 9:08 pm - Ansh Gupta: Game main aana laude
05/09/2024, 9:08 pm - Ayush: Wait a Lil bit
09/09/2024, 1:25 am - Ayush: <Media omitted>
09/09/2024, 1:25 am - Ayush: <Media omitted>
09/09/2024, 1:25 am - Ayush: <Media omitted>
09/09/2024, 1:25 am - Ayush: <Media omitted>
09/09/2024, 2:22 pm - Ansh Gupta: <Media omitted>
11/09/2024, 12:55 am - Ansh Gupta: <Media omitted>
11/09/2024, 10:09 am - Ayush: <Media omitted>
11/09/2024, 10:13 am - Ayush: import numpy as np

# Original vector
original = np.array([1, 2, 3, 4, 5])

# Create a new array of zeros with a length 4 times the original (3 zeros + 1 value)
result = np.zeros(len(original) * 4 - 3, dtype=int)

# Assign values from the original array to the appropriate positions in the result array
result[::4] = original

print(result)
11/09/2024, 10:19 am - Ayush: import numpy as np

# Create a random vector of size 10
vector = np.random.rand(10)

print("Original vector:")
print(vector)

# Find the index of the maximum value
max_index = np.argmax(vector)

# Replace the maximum value with 0
vector[max_index] = 0

print("\nVector after replacing the maximum value with 0:")
print(vector)
11/09/2024, 8:15 pm - Ansh Gupta: https://youtu.be/MxKBRgyO-94
11/09/2024, 10:20 pm - Ayush: https://youtu.be/mSTrwd1ofbI?si=UqJ3-sb1gYJmewuY
12/09/2024, 7:29 pm - Ayush: #include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class SinglyLinkedList {
public:
    Node* head;

    SinglyLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the beginning
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {  // If the list is empty
            head = newNode;
        } else {
            Node* temp = head;

            // Traverse to the last node
            while (temp->next != nullptr) {
                temp = temp->next;
            }

            temp->next = newNode;
        }
    }

    // Function to insert a node at any position
    void insertAtPosition(int value, int position) {
        if (position <= 0) {
            cout << "Position must be greater than 0." << endl;
            return;
        }

        Node* newNode = new Node(value);

        if (position == 1) {  // Insert at the beginning
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* temp = head;
        int count = 1;

        // Traverse to the node just before the desired position
        while (count < position - 1 && temp != nullptr) {
            temp = temp->next;
            count++;
        }

        if (temp == nullptr) {
            cout << "Position out of range!" << endl;
            delete newNode;
            return;
        }

        // Insert the new node
        newNode->next = temp->next;
        temp->next = newNode;
    }

    // Function to delete a node from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* toDelete = head;
        head = head->next;
        delete toDelete;
    }

    // Function to delete a node from the end
    void deleteFromEnd() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        if (head->next == nullptr) {  // If there's only one node
            delete head;
            head = nullptr;
            return;
        }

        Node* temp = head;

        // Traverse to the second-last node
        while (temp->next->next != nullptr) {
            temp = temp->next;
        }

        Node* toDelete = temp->next;  // Last node
        temp->next = nullptr;  // Second-last node points to nullptr
        delete toDelete;
    }

    // Function to delete a node at any position
    void deleteAtPosition(int position) {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        if (position == 1) {  // Delete the first node
            deleteFromBeginning();
            return;
        }

        Node* temp = head;
        int count = 1;

        // Traverse to the node just before the node to be deleted
        while (count < position - 1 && temp->next != nullptr) {
            temp = temp->next;
            count++;
        }

        if (temp->next == nullptr) {
            cout << "Position out of range!" << endl;
            return;
        }

        Node* toDelete = temp->next;
        temp->next = temp->next->next;  // Skip over the node to be deleted
        delete toDelete;
    }

    // Function to display the singly linked list
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    SinglyLinkedList sll;

    // Inserting elements
    sll.insertAtEnd(10);
    sll.insertAtEnd(20);
    sll.insertAtEnd(30);
    sll.insertAtEnd(40);
    sll.insertAtEnd(50);

    // Displaying the list
    cout << "Singly Linked List: ";
    sll.display();  // Output: 10 20 30 40 50

    // Delete from the beginning
    sll.deleteFromBeginning();
    cout << "After deleting from the beginning: ";
    sll.display();  // Output: 20 30 40 50

    // Delete from the end
    sll.deleteFromEnd();
    cout << "After deleting from the end: ";
    sll.display();  // Output: 20 30 40

    // Delete at position 2
    sll.deleteAtPosition(2);
    cout << "After deleting node at position 2: ";
    sll.display();  // Output: 20 40

    // Attempt to delete at an out-of-range position
    sll.deleteAtPosition(5);  // Output: Position out of range!

    return 0;
}
12/09/2024, 7:37 pm - Ayush: Lund
12/09/2024, 7:37 pm - Ayush: ...
12/09/2024, 9:35 pm - Ayush: #include <iostream>
using namespace std;

#define MAX 1000  // Define the maximum size of the stack

class Stack {
    int top;       // Variable to keep track of the index of the top element
public:
    int a[MAX];    // Array to store stack elements

    // Constructor to initialize the stack
    Stack() { top = -1; }

    // Member functions for the stack operations
    int push(int x);  // Function to push an element onto the stack
    int pop();        // Function to pop (remove) an element from the stack
    int peek();       // Function to view the top element of the stack without removing it
    int isEmpty();    // Function to check if the stack is empty
};

// Pushes an element 'x' onto the stack
int Stack::push(int x) {
    if (top >= (MAX - 1)) {  // Check if the stack is full (overflow condition)
        cout << "Stack Overflow\n";
        return 0;  // Return 0 to indicate failure (stack overflow)
    } else {
        a[++top] = x;  // Increment 'top' and then insert the element
        cout << x << " pushed into stack\n";
        return 1;  // Return 1 to indicate success
    }
}

// Removes and returns the top element from the stack
int Stack::pop() {
    if (top < 0) {  // Check if the stack is empty (underflow condition)
        cout << "Stack Underflow\n";
        return 0;  // Return 0 to indicate failure (stack underflow)
    } else {
        int x = a[top--];  // Retrieve the top element and then decrement 'top'
        return x;          // Return the popped element
    }
}

// Returns the top element of the stack without removing it
int Stack::peek() {
    if (top < 0) {  // Check if the stack is empty
        cout << "Stack is Empty\n";
        return 0;  // Return 0 to indicate that the stack is empty
    } else {
        return a[top];  // Return the top element
    }
}

// Checks if the stack is empty
int Stack::isEmpty() {
    return (top < 0);  // Returns 1 if empty, 0 otherwise
}

// Main function to test the stack implementation
int main() {
    Stack s;        // Create a stack object 's'
    s.push(10);     // Push 10 onto the stack
    s.push(20);     // Push 20 onto the stack
    s.push(30);     // Push 30 onto the stack
    cout << s.pop() << " popped from stack\n";  // Pop the top element and display it
    return 0;
}
12/09/2024, 10:00 pm - Ayush: #include <iostream>
using namespace std;

// Node structure for the stack
class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

// Stack class with linked list implementation
class Stack {
private:
    Node* top; // Pointer to the top of the stack

public:
    // Constructor to initialize the stack
    Stack() {
        top = nullptr;
    }

    // Push element onto the stack
    void push(int value) {
        Node* newNode = new Node(value); // Create a new node
        if (top == nullptr) {
            top = newNode; // If stack is empty, new node becomes the top
        } else {
            newNode->next = top; // Link the new node with the top
            top = newNode; // Update the top to the new node
        }
        cout << value << " pushed to stack." << endl;
    }

    // Pop element from the stack
    void pop() {
        if (top == nullptr) {
            cout << "Stack underflow. Cannot pop from an empty stack." << endl;
            return;
        }
        Node* temp = top;
        top = top->next; // Move the top pointer to the next node
        cout << temp->data << " popped from stack." << endl;
        delete temp; // Delete the popped node
    }

    // Peek at the top element of the stack
    int peek() {
        if (top == nullptr) {
            cout << "Stack is empty." << endl;
            return -1;
        }
        return top->data;
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }

    // Display all elements in the stack
    void display() {
        if (top == nullptr) {
            cout << "Stack is empty." << endl;
            return;
        }
        Node* temp = top;
        cout << "Stack elements: ";
        while (temp != nullptr) {
            cout << temp->data << " "; // Print each node's data
            temp = temp->next; // Move to the next node
        }
        cout << endl;
    }

    // Destructor to clean up memory
    ~Stack() {
        while (!isEmpty()) {
            pop(); // Pop all elements to free memory
        }
    }
};

int main() {
    Stack stack;

    stack.push(10);
    stack.push(20);
    stack.push(30);

    stack.display(); // Display the stack elements

    cout << "Top element is " << stack.peek() << endl;

    stack.pop();
    stack.display(); // Display the stack after popping an element

    stack.pop();
    stack.display(); // Display the stack again

    cout << "Top element is " << stack.peek() << endl;

    stack.pop();
    stack.display(); // Display the stack after popping all elements

    return 0;
}
12/09/2024, 10:47 pm - Ansh Gupta: #include <iostream>
using namespace std;

#define MAX 100 // Maximum size of the queue

class Queue {
public:
    int arr[MAX]; // Array to hold queue elements
    int front;    // Index of the front element
    int rear;     // Index of the rear element
    int size;     // Current number of elements in the queue

    // Constructor to initialize the queue
    Queue() : front(0), rear(-1), size(0) {}

    // Check if the queue is empty
    bool isEmpty() {
        return size == 0;
    }

    // Check if the queue is full
    bool isFull() {
        return size == MAX;
    }

    // Enqueue element to the rear of the queue
    void enqueue(int value) {
        if (isFull()) {
            cout << "Queue overflow. Cannot enqueue to a full queue." << endl;
            return;
        }
        rear++; // Move rear to the next index
        arr[rear] = value; // Add the element at rear
        size++;
        cout << value << " enqueued to queue." << endl;
    }

    // Dequeue element from the front of the queue
    void dequeue() {
        if (isEmpty()) {
            cout << "Queue underflow. Cannot dequeue from an empty queue." << endl;
            return;
        }
        cout << arr[front] << " dequeued from queue." << endl;
        front++; // Move front to the next index
        size--;
    }

    // Peek at the front element of the queue
    int peek() {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return -1;
        }
        return arr[front];
    }

    // Display all elements in the queue
    void display() {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return;
        }
        cout << "Queue elements: ";
        for (int i = front; i <= rear; i++) {
            cout << arr[i] << " "; // Print each element from front to rear
        }
        cout << endl;
    }
};

int main() {
    Queue queue;

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);

    queue.display(); // Display the queue elements

    cout << "Front element is " << queue.peek() << endl;

    queue.dequeue();
    queue.display(); // Display the queue after dequeuing an element

    queue.dequeue();
    queue.display(); // Display the queue again

    cout << "Front element is " << queue.peek() << endl;

    queue.dequeue();
    queue.display(); // Display the queue after dequeuing all elements

    return 0;
}
12/09/2024, 10:49 pm - Ansh Gupta: #include <iostream>
using namespace std;

// Node structure for the queue
class Node {
public:
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

// Queue class with linked list implementation
class Queue {
private:
    Node* front; // Pointer to the front of the queue
    Node* rear;  // Pointer to the rear of the queue

public:
    // Constructor to initialize the queue
    Queue() : front(nullptr), rear(nullptr) {}

    // Enqueue element to the rear of the queue
    void enqueue(int value) {
        Node* newNode = new Node(value); // Create a new node
        if (rear == nullptr) {
            front = rear = newNode; // If the queue is empty, both front and rear point to the new node
        } else {
            rear->next = newNode; // Link the new node to the rear
            rear = newNode; // Update the rear to the new node
        }
        cout << value << " enqueued to queue." << endl;
    }

    // Dequeue element from the front of the queue
    void dequeue() {
        if (front == nullptr) {
            cout << "Queue underflow. Cannot dequeue from an empty queue." << endl;
            return;
        }
        Node* temp = front;
        front = front->next; // Move the front pointer to the next node
        if (front == nullptr) {
            rear = nullptr; // If the queue becomes empty, update rear to nullptr
        }
        cout << temp->data << " dequeued from queue." << endl;
        delete temp; // Delete the dequeued node
    }

    // Peek at the front element of the queue
    int peek() {
        if (front == nullptr) {
            cout << "Queue is empty." << endl;
            return -1;
        }
        return front->data;
    }

    // Check if the queue is empty
    bool isEmpty() {
        return front == nullptr;
    }

    // Display all elements in the queue
    void display() {
        if (front == nullptr) {
            cout << "Queue is empty." << endl;
            return;
        }
        Node* temp = front;
        cout << "Queue elements: ";
        while (temp != nullptr) {
            cout << temp->data << " "; // Print each node's data
            temp = temp->next; // Move to the next node
        }
        cout << endl;
    }

    // Destructor to clean up memory
    ~Queue() {
        while (!isEmpty()) {
            dequeue(); // Dequeue all elements to free memory
        }
    }
};

int main() {
    Queue queue;

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);

    queue.display(); // Display the queue elements

    cout << "Front element is " << queue.peek() << endl;

    queue.dequeue();
    queue.display(); // Display the queue after dequeuing an element

    queue.dequeue();
    queue.display(); // Display the queue again

    cout << "Front element is " << queue.peek() << endl;

    queue.dequeue();
    queue.display(); // Display the queue after dequeuing all elements

    return 0;
}
12/09/2024, 11:48 pm - Ayush: #include <iostream>
using namespace std;

#define MAX 100 // Maximum size of the queue

class CircularQueue {
private:
    int arr[MAX];  // Array to hold queue elements
    int front;     // Index of the front element
    int rear;      // Index of the rear element
    int size;      // Current number of elements in the queue

public:
    // Constructor to initialize the queue
    CircularQueue() : front(0), rear(-1), size(0) {}

    // Enqueue element to the rear of the queue
    void enqueue(int value) {
        if (size == MAX) {
            cout << "Queue overflow. Cannot enqueue to a full queue." << endl;
            return;
        }
        rear = (rear + 1) % MAX; // Move rear to the next position (circularly)
        arr[rear] = value;       // Insert the element at the rear
        size++;
        cout << value << " enqueued to queue." << endl;
    }

    // Dequeue element from the front of the queue
    void dequeue() {
        if (size == 0) {
            cout << "Queue underflow. Cannot dequeue from an empty queue." << endl;
            return;
        }
        cout << arr[front] << " dequeued from queue." << endl;
        front = (front + 1) % MAX; // Move front to the next position (circularly)
        size--;
    }

    // Peek at the front element of the queue
    int peek() {
        if (size == 0) {
            cout << "Queue is empty." << endl;
            return -1; // Return -1 to indicate the queue is empty
        }
        return arr[front]; // Return the data of the front element
    }

    // Check if the queue is empty
    bool isEmpty() {
        return size == 0;
    }

    // Check if the queue is full
    bool isFull() {
        return size == MAX;
    }

    // Display all elements in the queue
    void display() {
        if (size == 0) {
            cout << "Queue is empty." << endl;
            return;
        }
        cout << "Queue elements: ";
        int i = front;
        for (int count = 0; count < size; count++) {
            cout << arr[i] << " "; // Print each element
            i = (i + 1) % MAX;    // Move to the next position (circularly)
        }
        cout << endl;
    }
};

int main() {
    CircularQueue queue;

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);

    queue.display(); // Display the queue elements

    cout << "Front element is " << queue.peek() << endl;

    queue.dequeue();
    queue.display(); // Display the queue after dequeuing an element

    queue.enqueue(40);
    queue.display(); // Display the queue after enqueuing a new element

    cout << "Front element is " << queue.peek() << endl;

    queue.dequeue();
    queue.display(); // Display the queue after dequeuing another element

    return 0;
}
12/09/2024, 11:52 pm - Ansh Gupta: #include <iostream>
using namespace std;

#define MAX 100 // Maximum size of the queue

class CircularQueue {
public:
    int arr[MAX];  // Array to hold queue elements
    int front;     // Index of the front element
    int rear;      // Index of the rear element
    int size;      // Current number of elements in the queue

    // Constructor to initialize the queue
    CircularQueue() : front(0), rear(-1), size(0) {}

    // Enqueue element to the rear of the queue
    void enqueue(int value) {
        if (size == MAX) {
            cout << "Queue overflow. Cannot enqueue to a full queue." << endl;
            return;
        }
        rear = (rear + 1); // Move rear to the next position
        arr[rear] = value;       // Insert the element at the rear
        size++;
        cout << value << " enqueued to queue." << endl;
    }

    // Dequeue element from the front of the queue
    void dequeue() {
        if (size == 0) {
            cout << "Queue underflow. Cannot dequeue from an empty queue." << endl;
            return;
        }
        cout << arr[front] << " dequeued from queue." << endl;
        front = (front + 1) ; // Move front to the next position
        size--;
    }

    // Peek at the front element of the queue
    int peek() {
        if (size == 0) {
            cout << "Queue is empty." << endl;
            return -1; // Return -1 to indicate the queue is empty
        }
        return arr[front]; // Return the data of the front element
    }

    // Check if the queue is empty
    bool isEmpty() {
        return size == 0;
    }

    // Check if the queue is full
    bool isFull() {
        return size == MAX;
    }

    // Display all elements in the queue
    void display() {
        if (size == 0) {
            cout << "Queue is empty." << endl;
            return;
        }
        cout << "Queue elements: ";
        int i = front;
        for (int count = 0; count < size; count++) {
            cout << arr[i] << " "; // Print each element
            i = (i + 1);    // Move to the next position 
        }
        cout << endl;
    }
};

int main() {
    CircularQueue queue;

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);

    queue.display(); // Display the queue elements

    cout << "Front element is " << queue.peek() << endl;

    queue.dequeue();
    queue.display(); // Display the queue after dequeuing an element

    queue.enqueue(40);
    queue.display(); // Display the queue after enqueuing a new element

    cout << "Front element is " << queue.peek() << endl;

    queue.dequeue();
    queue.display(); // Display the queue after dequeuing another element

    return 0;
}
12/09/2024, 11:56 pm - Ansh Gupta: #include <iostream>
using namespace std;

class CircularQueue {
private:
    int front, rear, size;
    int queue[100];  // Define a fixed size array

public:
    CircularQueue(int size) {
        this->size = size;
        front = rear = -1;
    }

    bool isFull() {
        return (front == 0 && rear == size - 1) || (rear == (front - 1) % (size - 1));
    }

    bool isEmpty() {
        return front == -1;
    }

    void enqueue(int value) {
        if (isFull()) {
            cout << "Queue is Full\n";
            return;
        }

        if (front == -1) {  // Insertion for the first element
            front = rear = 0;
        } else if (rear == size - 1 && front != 0) {
            rear = 0;  // Wrap around
        } else {
            rear++;
        }

        queue[rear] = value;
        cout << "Inserted " << value << endl;
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is Empty\n";
            return;
        }

        cout << "Deleted " << queue[front] << endl;

        if (front == rear) {
            front = rear = -1;  // Queue becomes empty
        } else if (front == size - 1) {
            front = 0;  // Wrap around
        } else {
            front++;
        }
    }

    void displayQueue() {
        if (isEmpty()) {
            cout << "Queue is Empty\n";
            return;
        }

        cout << "Queue elements: ";
        if (rear >= front) {
            for (int i = front; i <= rear; i++)
                cout << queue[i] << " ";
        } else {
            for (int i = front; i < size; i++)
                cout << queue[i] << " ";
            for (int i = 0; i <= rear; i++)
                cout << queue[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    CircularQueue q(5);

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);

    q.displayQueue();

    q.dequeue();
    q.dequeue();

    q.displayQueue();

    q.enqueue(60);
    q.enqueue(70);

    q.displayQueue();

    return 0;
}
13/09/2024, 12:53 am - Ayush: #include <iostream>
using namespace std;

// Node structure for the circular queue with a constructor
class Node {
public:
    int data;
    Node* next;

    // Constructor to initialize the node
    Node(int value) {
        data = value;
        next = nullptr;
    }
};

// Circular Queue class using linked list
class CircularQueue {
private:
    Node* front;  // Pointer to the front node
    Node* rear;   // Pointer to the rear node

public:
    // Constructor to initialize the circular queue
    CircularQueue() {
        front = rear = nullptr;
    }

    // Check if the circular queue is empty
    bool isEmpty() {
        return front == nullptr;
    }

    // Enqueue: Add an element to the circular queue
    void enqueue(int value) {
        Node* newNode = new Node(value); // Create a new node using the constructor
        if (isEmpty()) {
            front = rear = newNode;   // First element in the queue
        } else {
            rear->next = newNode; // Link the new node at the end
        }
        rear = newNode;       // Update the rear
        rear->next = front;   // Make it circular by pointing rear to front
        cout << value << " enqueued to queue." << endl;
    }

    // Dequeue: Remove an element from the circular queue
    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty. Cannot dequeue." << endl;
            return;
        }

        if (front == rear) {
            // Only one element in the queue
            cout << front->data << " dequeued from queue." << endl;
            delete front;
            front = rear = nullptr; // Reset both pointers
        } else {
            // More than one element in the queue
            Node* temp = front;
            cout << front->data << " dequeued from queue." << endl;
            front = front->next;   // Move front to the next element
            rear->next = front;    // Maintain the circular link
            delete temp;           // Delete the old front node
        }
    }

    // Display: Show all elements in the circular queue
    void display() {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return;
        }
        Node* temp = front;
        cout << "Queue elements: ";
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != front); // Loop until we come back to the front node
        cout << endl;
    }
};

// Main function to demonstrate circular queue operations
int main() {
    CircularQueue queue;

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);
    queue.display(); // Display the queue elements

    queue.dequeue();  // Remove the front element
    queue.display();  // Display the queue elements again

    queue.enqueue(40); // Add a new element to the queue
    queue.display();   // Display the updated queue

    queue.dequeue();   // Remove another element
    queue.display();   // Display the updated queue

    return 0;
}
13/09/2024, 9:40 am - Ayush: #include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class CircularDoublyLinkedList {
public:
    Node* head;

    CircularDoublyLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the beginning
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            head->prev = newNode;
            last->next = newNode;

            head = newNode;
        }
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            last->next = newNode;
            head->prev = newNode;
        }
    }

    // Function to insert a node at any given position
    void insertAtPosition(int value, int position) {
        if (position <= 0) {
            cout << "Invalid position!" << endl;
            return;
        }

        if (position == 1) {  // Insert at the beginning
            insertAtBeginning(value);
            return;
        }

        Node* newNode = new Node(value);
        Node* temp = head;

        int count = 1;
        while (count < position - 1 && temp->next != head) {
            temp = temp->next;
            count++;
        }

        if (temp->next == head && count != position - 1) {
            cout << "Position out of range!" << endl;
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        newNode->prev = temp;
        temp->next->prev = newNode;
        temp->next = newNode;
    }

    // Function to display the circular doubly linked list
    void displayForward() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

int main() {
    CircularDoublyLinkedList cdll;

    // Inserting elements
    cdll.insertAtEnd(10);
    cdll.insertAtEnd(20);
    cdll.insertAtEnd(30);

    // Displaying the list
    cout << "Circular Doubly Linked List: ";
    cdll.displayForward();  // Output: 10 20 30

    // Insert at the beginning
    cdll.insertAtBeginning(5);
    cout << "After inserting 5 at the beginning: ";
    cdll.displayForward();  // Output: 5 10 20 30

    // Insert at the end
    cdll.insertAtEnd(40);
    cout << "After inserting 40 at the end: ";
    cdll.displayForward();  // Output: 5 10 20 30 40

    // Insert at position 3
    cdll.insertAtPosition(15, 3);
    cout << "After inserting 15 at position 3: ";
    cdll.displayForward();  // Output: 5 10 15 20 30 40

    return 0;
}
13/09/2024, 9:41 am - Ayush: #include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class CircularDoublyLinkedList {
public:
    Node* head;

    CircularDoublyLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            last->next = newNode;
            head->prev = newNode;
        }
    }

    // Function to delete a node from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        Node* last = head->prev;
        Node* toDelete = head;

        if (head->next == head) {  // Only one node
            head = nullptr;
        } else {
            head = head->next;
            head->prev = last;
            last->next = head;
        }

        delete toDelete;
    }

    // Function to delete a node from the end
    void deleteFromEnd() {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        Node* last = head->prev;
        Node* toDelete = last;

        if (head->next == head) {  // Only one node
            head = nullptr;
        } else {
            last->prev->next = head;
            head->prev = last->prev;
        }

        delete toDelete;
    }

    // Function to delete a node from any position
    void deleteFromPosition(int position) {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        if (position <= 0) {
            cout << "Invalid position!" << endl;
            return;
        }

        Node* temp = head;

        if (position == 1) {  // Deleting the first node
            deleteFromBeginning();
            return;
        }

        int count = 1;
        while (count < position && temp->next != head) {
            temp = temp->next;
            count++;
        }

        if (temp->next == head && count != position) {
            cout << "Position out of range!" << endl;
            return;
        }

        // Deleting the node at the given position
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;

        delete temp;
    }

    // Function to display the circular doubly linked list
    void displayForward() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

int main() {
    CircularDoublyLinkedList cdll;

    // Inserting elements
    cdll.insertAtEnd(10);
    cdll.insertAtEnd(20);
    cdll.insertAtEnd(30);
    cdll.insertAtEnd(40);
    cdll.insertAtEnd(50);

    // Displaying the list
    cout << "Circular Doubly Linked List: ";
    cdll.displayForward();  // Output: 10 20 30 40 50

    // Delete from the beginning
    cdll.deleteFromBeginning();
    cout << "After deleting from the beginning: ";
    cdll.displayForward();  // Output: 20 30 40 50

    // Delete from the end
    cdll.deleteFromEnd();
    cout << "After deleting from the end: ";
    cdll.displayForward();  // Output: 20 30 40

    // Delete from position 2
    cdll.deleteFromPosition(2);
    cout << "After deleting from position 2: ";
    cdll.displayForward();  // Output: 20 40

    return 0;
}
13/09/2024, 9:53 am - Ayush: #include <iostream>
using namespace std;

// Node structure for polynomial terms
class Node {
public:
    int coeff;   // Coefficient
    int exp;     // Exponent
    Node* next;

    Node(int c, int e) {
        coeff = c;
        exp = e;
        next = nullptr;
    }
};

// Polynomial class to represent a polynomial
class Polynomial {
public:
    Node* head;

    Polynomial() {
        head = nullptr;
    }

    // Function to insert a new term into the polynomial in decreasing order of exponent
    void insertTerm(int coeff, int exp) {
        Node* newNode = new Node(coeff, exp);

        if (head == nullptr || head->exp < exp) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr && temp->next->exp > exp) {
                temp = temp->next;
            }
            if (temp->next != nullptr && temp->next->exp == exp) {
                temp->next->coeff += coeff;  // Combine terms with same exponent
            } else {
                newNode->next = temp->next;
                temp->next = newNode;
            }
        }
    }

    // Function to display the polynomial
    void display() {
        if (head == nullptr) {
            cout << "Polynomial is empty!" << endl;
            return;
        }

        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->coeff << "x^" << temp->exp;
            if (temp->next != nullptr && temp->next->coeff >= 0) {
                cout << " + ";
            }
            temp = temp->next;
        }
        cout << endl;
    }
};

// Function to add two polynomials
Polynomial addPolynomials(Polynomial& p1, Polynomial& p2) {
    Polynomial result;
    Node* ptr1 = p1.head;
    Node* ptr2 = p2.head;

    while (ptr1 != nullptr && ptr2 != nullptr) {
        if (ptr1->exp > ptr2->exp) {
            result.insertTerm(ptr1->coeff, ptr1->exp);
            ptr1 = ptr1->next;
        } else if (ptr1->exp < ptr2->exp) {
            result.insertTerm(ptr2->coeff, ptr2->exp);
            ptr2 = ptr2->next;
        } else {
            result.insertTerm(ptr1->coeff + ptr2->coeff, ptr1->exp);
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
    }

    // Insert remaining terms from the first polynomial
    while (ptr1 != nullptr) {
        result.insertTerm(ptr1->coeff, ptr1->exp);
        ptr1 = ptr1->next;
    }

    // Insert remaining terms from the second polynomial
    while (ptr2 != nullptr) {
        result.insertTerm(ptr2->coeff, ptr2->exp);
        ptr2 = ptr2->next;
    }

    return result;
}

int main() {
    Polynomial poly1, poly2;

    // Inserting terms into the first polynomial
    poly1.insertTerm(3, 2);
    poly1.insertTerm(5, 1);
    poly1.insertTerm(6, 0);

    cout << "First Polynomial: ";
    poly1.display();  // Output: 3x^2 + 5x^1 + 6

    // Inserting terms into the second polynomial
    poly2.insertTerm(4, 3);
    poly2.insertTerm(2, 2);
    poly2.insertTerm(5, 0);

    cout << "Second Polynomial: ";
    poly2.display();  // Output: 4x^3 + 2x^2 + 5

    // Adding the two polynomials
    Polynomial sum = addPolynomials(poly1, poly2);

    // Displaying the result
    cout << "Sum of Polynomials: ";
    sum.display();  // Output: 4x^3 + 5x^2 + 5x^1 + 11

    return 0;
}
17/09/2024, 10:47 am - Ayush: How do you create a Pandas Series from a list or dictionary?

How do you access elements in a Pandas Series using labels and positions!

How do you perform mathematical operations on a Serles?

How can you detect and handle missing data in a Pandas Series?

How can you filter values in a Pandas Serles based on a condition?

How do you apply a function to each element of a Pandas Series?

How do you calculate summary statistics like mean, sun, or standard deviation for a Series?

How do you check for unique values and their frequency in a Pandas Series?

How can you sort a Pandas Series by values or by index?
17/09/2024, 3:02 pm - Ayush: following tasks need to be performed

Detect the missing walues

Understand the distribution of missing data.

Handle missing values using different strategies like removal, imputation, and interpolation

data {

customer id: [101, 102, 103, 104, 105), name: [Alice, Bob Charlie David', None].

age [25, None, 35, 40, None].

gender: [FM, M', None, 'F'].

total purchases [5, 3, None, 2, 2]。

last purchase date [2021-06-01, None, 2021-07-15, 2031-07-20', '2021-08-05]

use isnull() to detect missing values, and sum() to get the count of missing values per column.

Drop Rows with Missing Values

Drop Columns with Missing Values

Fill Missing Values with a Constant Value

For numeric columns like age and total purchases, you can fill the missing values with the mean or

median of the column

use ffill() (forward fill) or bfill() (backward fill) to fill missing values based on nearby values.
17/09/2024, 3:05 pm - Ayush: import pandas as pd

# Create the data
data = {
    'customer_id': [101, 102, 103, 104, 105],
    'name': ['Alice', 'Bob', 'Charlie', 'David', None],
    'age': [25, None, 35, 40, None],
    'gender': ['F', 'M', None, 'F', 'M'],
    'total_purchases': [5, 3, None, 2, 2],
    'last_purchase_date': ['2021-06-01', None, '2021-07-15', '2021-07-20', '2021-08-05']
}

# Create a DataFrame
df = pd.DataFrame(data)

# Task 1: Detect the missing values and count them per column
print("Missing Values Count:")
print(df.isnull().sum())

# Task 2: Drop rows with missing values
df_dropped_rows = df.dropna()
print("\nData after dropping rows with missing values:")
print(df_dropped_rows)

# Task 3: Drop columns with missing values
df_dropped_columns = df.dropna(axis=1)
print("\nData after dropping columns with missing values:")
print(df_dropped_columns)

# Task 4: Fill missing values with a constant value
df_filled_constant = df.fillna("Unknown")
print("\nData after filling missing values with 'Unknown':")
print(df_filled_constant)

# Task 5: Fill missing values in numeric columns with the mean or median
df['age'].fillna(df['age'].mean(), inplace=True)
df['total_purchases'].fillna(df['total_purchases'].median(), inplace=True)
print("\nData after filling missing values in numeric columns with mean/median:")
print(df)

# Task 6: Forward fill (ffill) or backward fill (bfill)
df_ffill = df.fillna(method='ffill')
df_bfill = df.fillna(method='bfill')

print("\nData after forward fill:")
print(df_ffill)

print("\nData after backward fill:")
print(df_bfill)
18/09/2024, 2:58 pm - Ansh Gupta: void sort(){
        if(head== nullptr){
            cout<<"list is empty"<<endl;
            return;
        }
        Node* ptr1 = head;
        Node* ptr2 = nullptr;

        do{
            ptr1 = head;
            Node* lastswap = nullptr;

            while(ptr1->next != ptr2 && ptr1->next != head){
                if (ptr1->data > ptr1->next->data) {
                swap(ptr1->data, ptr1->next->data);
                    lastswap = ptr1;
                }
                ptr1 = ptr1->next;
            }

            ptr2 = lastswap;
        }while(ptr2!=nullptr);
    }
18/09/2024, 3:06 pm - Ayush: #include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

// Function to merge two sorted linked lists
Node* mergeSortedLists(Node* l1, Node* l2) {
    // Create a dummy node to store the result
    Node* dummy = new Node(-1);
    Node* current = dummy;

    // Traverse both lists
    while (l1 != nullptr && l2 != nullptr) {
        if (l1->data <= l2->data) {
            current->next = l1;
            l1 = l1->next;
        } else {
            current->next = l2;
            l2 = l2->next;
        }
        current = current->next;
    }

    // Attach the remaining nodes, if any
    if (l1 != nullptr) {
        current->next = l1;
    } else {
        current->next = l2;
    }

    // Return the merged list starting from dummy->next
    return dummy->next;
}

// Function to print a linked list
void printList(Node* head) {
    while (head != nullptr) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    // Example of list 1: 1 -> 3 -> 5
    Node* l1 = new Node(1);
    l1->next = new Node(3);
    l1->next->next = new Node(5);

    // Example of list 2: 2 -> 4 -> 6
    Node* l2 = new Node(2);
    l2->next = new Node(4);
    l2->next->next = new Node(6);

    Node* mergedList = mergeSortedLists(l1, l2);
    cout << "Merged Linked List: ";
    printList(mergedList);

    return 0;
}
18/09/2024, 3:27 pm - Ansh Gupta: #include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

Node* mergeCircularLists(Node* head1, Node* head2) {
    if (head1 == nullptr) return head2;
    if (head2 == nullptr) return head1;

    Node* dummy = new Node(-1); 
    Node* current = dummy;

    Node* l1 = head1;
    Node* l2 = head2;

    Node* temp1 = head1;
    while (temp1->next != head1) {
        temp1 = temp1->next;
    }
    temp1->next = nullptr;

    Node* temp2 = head2;
    while (temp2->next != head2) {
        temp2 = temp2->next;
    }
    temp2->next = nullptr;

    while (l1 != nullptr && l2 != nullptr) {
        if (l1->data <= l2->data) {
            current->next = l1;
            l1 = l1->next;
        } else {
            current->next = l2;
            l2 = l2->next;
        }
        current = current->next;
    }

    if (l1 != nullptr) {
        current->next = l1;
    } else {
        current->next = l2;
    }

    Node* mergedHead = dummy->next;
    delete dummy; 

    Node* temp = mergedHead;
    while (temp->next != nullptr) {
        temp = temp->next;
    }
    temp->next = mergedHead;

    return mergedHead;
}

void printCircularList(Node* head) {
    if (head == nullptr) return;

    Node* temp = head;
    do {
        cout << temp->data << " ";
        temp = temp->next;
    } while (temp != head);
    cout << endl;
}

int main() {
    Node* l1 = new Node(1);
    l1->next = new Node(3);
    l1->next->next = new Node(5);
    l1->next->next->next = l1; 
    cout<<"circular list1 before merging: ";
    printCircularList(l1);
    Node* l2 = new Node(2);
    l2->next = new Node(4);
    l2->next->next = new Node(6);
    l2->next->next->next = new Node(7);
    l2->next->next->next->next = l2; 
    cout<<"circular list2 before merging: ";
    printCircularList(l2);

    Node* mergedList = mergeCircularLists(l1, l2);

    cout << "Merged Circular Linked List: ";
    printCircularList(mergedList);

    return 0;
}
18/09/2024, 3:50 pm - Ansh Gupta: #include <iostream>
using namespace std;
struct Node {
    int data;
    Node* next;
};

void insertEnd(Node*& head, int data) {
    Node* newNode = new Node{data, nullptr};
    if (!head) {
        newNode->next = newNode;
        head = newNode;
        return;
    }
    
    Node* temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->next = head;
}

// Function to display the circular linked list
void display(Node* head) {
    if (!head) return;
    Node* temp = head;
    do {
        cout << temp->data << " ";
        temp = temp->next;
    } while (temp != head);
    cout << endl;
}

Node* breakCircular(Node*& head) {
    if (!head) return nullptr;
    
    Node* temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }
    temp->next = nullptr;
    return temp;
}

// Function to merge two sorted linked lists
Node* mergeSorted(Node* head1, Node* head2) {
    if (!head1) return head2;
    if (!head2) return head1;

    Node* result = nullptr;

    if (head1->data <= head2->data) {
        result = head1;
        result->next = mergeSorted(head1->next, head2);
    } else {
        result = head2;
        result->next = mergeSorted(head1, head2->next);
    }

    return result;
}

Node* mergeCircularLists(Node* head1, Node* head2) {
    if (!head1) return head2;
    if (!head2) return head1;

    Node* last1 = breakCircular(head1);
    Node* last2 = breakCircular(head2);

    Node* mergedHead = mergeSorted(head1, head2);

    Node* temp = mergedHead;
    while (temp->next) {
        temp = temp->next;
    }
    temp->next = mergedHead;

    return mergedHead;
}

int main() {
    Node* head1 = nullptr;
    Node* head2 = nullptr;

    insertEnd(head1, 1);
    insertEnd(head1, 4);
    insertEnd(head1, 6);

    insertEnd(head2, 2);
    insertEnd(head2, 3);
    insertEnd(head2, 5);

    cout << "List 1: ";
    display(head1);

    cout << "List 2: ";
    display(head2);

    // Merge the two circular linked lists
    Node* mergedHead = mergeCircularLists(head1, head2);

    cout << "Merged Circular List: ";
    display(mergedHead);

    return 0;
}
21/09/2024, 2:40 pm - Ayush: Meeting se nikal kr call krna !
22/09/2024, 9:50 pm - Ayush: https://youtube.com/playlist?list=PL5Dqs90qDljWiE0fK-akBQXH2yp2OWXVr&si=YMMs9nKKjxJB9Q41
23/09/2024, 10:57 am - Ayush: Naveen khoj rha tha tujhe
23/09/2024, 10:58 am - Ayush: Call aaya kya ?
23/09/2024, 10:58 am - Ansh Gupta: Haan aa raha hu
23/09/2024, 10:58 am - Ayush: Rims se aa gya ?
23/09/2024, 10:59 am - Ayush: Medicine mila
23/09/2024, 10:59 am - Ansh Gupta: Gaya hi nahi
24/09/2024, 10:05 am - Ayush: Evaluation abhi nhi ho rha
24/09/2024, 10:06 am - Ayush: 2.30 wale class me higa
24/09/2024, 10:06 am - Ansh Gupta: Theek hai toh main nahi aa raha hu
24/09/2024, 10:06 am - Ayush: Ok
24/09/2024, 11:12 am - Ayush: Bulaya gya kya fir ?
24/09/2024, 11:12 am - Ansh Gupta: Nahi abhi tak toh
24/09/2024, 11:12 am - Ayush: Gowrav ko alka ma'am bula kr le gyi abhi just
24/09/2024, 11:12 am - Ansh Gupta: Kyon dhund rahe hai kya
24/09/2024, 11:12 am - Ansh Gupta: Gowrav ko ?
24/09/2024, 11:12 am - Ayush: Haa
24/09/2024, 11:12 am - Ansh Gupta: Shitt
24/09/2024, 11:13 am - Ayush: Kuch bol na de wo
24/09/2024, 11:13 am - Ansh Gupta: Toh aajayega bulava thodi der main
24/09/2024, 11:13 am - Ansh Gupta: Kya pata bhai
24/09/2024, 11:13 am - Ansh Gupta: Ab main nahi soch raha itna
24/09/2024, 11:13 am - Ansh Gupta: Jo hoga dekha jayega
24/09/2024, 11:13 am - Ayush: Bola hu kuch Mt bolna pta nhi suna ki nhi
24/09/2024, 11:14 am - Ayush: Thik
24/09/2024, 3:24 pm - Ansh Gupta: beer_avg = drinks.groupby('continent')['beer_servings'].mean().idxmax()
print(f"The continent that drinks the most beer on average: {beer_avg}")

wine_stats = drinks.groupby('continent')['wine_servings'].describe()
print("\nWine consumption statistics per continent:")
print(wine_stats)

mean_alcohol = drinks.groupby('continent').mean(numeric_only=True)
print("\nMean alcohol consumption per continent for every column:")
print(mean_alcohol)

median_alcohol = drinks.groupby('continent').median(numeric_only=True)
print("\nMedian alcohol consumption per continent for every column:")
print(median_alcohol) 

spirits_stats = drinks['spirit_servings'].agg(['mean', 'min', 'max'])
print("\nMean, Min, and Max for spirit consumption:")
print(spirits_stats)
24/09/2024, 3:28 pm - Ansh Gupta: # Load the Euro 2012 dataset
euro12 = pd.read_csv(r"C:\Users\bahub\Downloads\euro2012.csv")

# 1. Select only the 'Goal' column
goals = euro12['Goals']
print("\nGoals column:")
print(goals)

# 2. How many teams participated in Euro2012?
team_count = euro12['Team'].nunique()
print(f"\nNumber of teams that participated in Euro 2012: {team_count}")

# 3. What is the number of columns in the dataset?
num_columns = euro12.shape[1]
print(f"\nNumber of columns in the dataset: {num_columns}")

# 4. View only the columns Team, Yellow Cards, and Red Cards and assign to discipline
discipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]
print("\nDiscipline dataframe (Team, Yellow Cards, Red Cards):")
print(discipline)

# 5. Sort teams by Red Cards, then Yellow Cards
discipline_sorted = discipline.sort_values(by=['Red Cards', 'Yellow Cards'], ascending=[False, False])
print("\nTeams sorted by Red and Yellow Cards:")
print(discipline_sorted)

# 6. Calculate the mean Yellow Cards given per Team
mean_yellow_cards = euro12['Yellow Cards'].mean()
print(f"\nMean Yellow Cards per Team: {mean_yellow_cards}")

# 7. Filter teams that scored more than 6 goals
teams_more_than_6_goals = euro12[euro12['Goals'] > 6]
print("\nTeams that scored more than 6 goals:")
print(teams_more_than_6_goals)

# 8. Select teams that start with 'G'
teams_start_with_G = euro12[euro12['Team'].str.startswith('G')]
print("\nTeams that start with 'G':")
print(teams_start_with_G)

# 9. Select the first 7 columns
first_7_columns = euro12.iloc[:, :7]
print("\nFirst 7 columns of the dataset:")
print(first_7_columns)

# 10. Select all columns except the last 3
except_last_3 = euro12.iloc[:, :-3]
print("\nAll columns except the last 3:")
print(except_last_3)

# 11. Present only the Shooting Accuracy from England, Italy, and Russia
shooting_accuracy = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])][['Team', 'Shooting Accuracy']]
print("\nShooting Accuracy for England, Italy, and Russia:")
print(shooting_accuracy)
24/09/2024, 7:47 pm - Ansh Gupta: 
25/09/2024, 2:56 pm - Ansh Gupta: #include <iostream>
using namespace std;

// Node structure for the binary tree
struct Node {
    char data;
    Node* left;
    Node* right;

    Node(char val) {
        data = val;
        left = right = nullptr;
    }
};

void preorderTraversal(Node* root) {
    if (root != nullptr) {
        cout << root->data << " ";  
        preorderTraversal(root->right);  
        preorderTraversal(root->left);
    }
}

void inorderTraversal(Node* root) {
    if (root!=nullptr) {
        inorderTraversal(root->left);  
        cout << root->data << " ";    
        inorderTraversal(root->right); 
    }
}
void postorderTraversal(Node* root){
    if(root!=nullptr){
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        cout<<root->data<<" ";
    }
}

int main() {
    
    
    Node* root = new Node('a');
    
    // Level 2
    root->left = new Node('b');
    root->right = new Node('c');
    
    // Level 3
    root->left->left = new Node('d');
    root->left->right = new Node('e');
    root->right->left = new Node('f');
    root->right->right = new Node('g');
    
    // Level 4
    root->left->left->left = new Node('h');    // 'd' contains 'h'
    root->left->right->left = new Node('i');   // 'e' contains 'i'
    root->left->right->right = new Node('j');  // 'e' contains 'j'
    
    // Level 5
    root->left->right->right->left = new Node('k');  // 'j' contains 'k'

   // Perform pre-order traversal
    cout << "Pre-order Traversal: ";
    preorderTraversal(root);
    cout << endl;

    // Perform in-order traversal
    cout << "In-order Traversal: ";
    inorderTraversal(root);
    cout << endl;

    // Perform post-order traversal
    cout << "Post-order Traversal: ";
    postorderTraversal(root);
    cout << endl;

    return 0;
}
27/09/2024, 9:10 am - Ayush: <Media omitted>
28/09/2024, 2:21 am - Ayush: <Media omitted>
29/09/2024, 1:56 pm - Ayush: <Media omitted>
01/10/2024, 1:41 am - Ansh Gupta: <Media omitted>
07/10/2024, 1:20 pm - Ayush: https://1drv.ms/p/c/aaa3164faf6f6bee/EUtA1ey6hFREpGkIe-ovJHgBLF_cBW5dtqeZ9GeQzbzpPA?e=tabD77
07/10/2024, 1:24 pm - Ayush: https://gamma.app/docs/Streamlining-Ticket-Management-A-Visual-Guide-r720z903hsi1s0w
11/10/2024, 8:33 pm - Ayush: <Media omitted>
23/10/2024, 12:22 am - Ayush: <Media omitted>
26/10/2024, 6:23 pm - Ayush: Kha h
27/10/2024, 3:48 pm - Ayush: <Media omitted>
27/10/2024, 3:49 pm - Ayush: Same mt likhna
05/11/2024, 2:08 pm - Ayush: <Media omitted>
12/11/2024, 6:55 pm - Ayush: Hi, I have created this cart with 1 item from Surya Snacks, Raichur Locality, Raichur. Please review it and place the order on Zomato
https://zomato.onelink.me/xqzv/j8pbl5d8
14/11/2024, 1:51 am - Ayush: <Media omitted>
14/11/2024, 9:30 pm - Ayush: https://www.canva.com/design/DAGWWScwSEs/V9-b0Mszjhd1t-SR6KdLkQ/edit?utm_content=DAGWWScwSEs&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton
15/11/2024, 7:38 pm - Ayush: #include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class SinglyLinkedList {
public:
    Node* head;

    SinglyLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the beginning
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {  // If the list is empty
            head = newNode;
        } else {
            Node* temp = head;

            // Traverse to the last node
            while (temp->next != nullptr) {
                temp = temp->next;
            }

            temp->next = newNode;
        }
    }

    // Function to insert a node at any position
    void insertAtPosition(int value, int position) {
        if (position <= 0) {
            cout << "Position must be greater than 0." << endl;
            return;
        }

        Node* newNode = new Node(value);

        if (position == 1) {  // Insert at the beginning
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* temp = head;
        int count = 1;

        // Traverse to the node just before the desired position
        while (count < position - 1 && temp != nullptr) {
            temp = temp->next;
            count++;
        }

        if (temp == nullptr) {
            cout << "Position out of range!" << endl;
            delete newNode;
            return;
        }

        // Insert the new node
        newNode->next = temp->next;
        temp->next = newNode;
    }

    // Function to delete a node from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* toDelete = head;
        head = head->next;
        delete toDelete;
    }

    // Function to delete a node from the end
    void deleteFromEnd() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        if (head->next == nullptr) {  // If there's only one node
            delete head;
            head = nullptr;
            return;
        }

        Node* temp = head;

        // Traverse to the second-last node
        while (temp->next->next != nullptr) {
            temp = temp->next;
        }

        Node* toDelete = temp->next;  // Last node
        temp->next = nullptr;  // Second-last node points to nullptr
        delete toDelete;
    }

    // Function to delete a node at any position
    void deleteAtPosition(int position) {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        if (position == 1) {  // Delete the first node
            deleteFromBeginning();
            return;
        }

        Node* temp = head;
        int count = 1;

        // Traverse to the node just before the node to be deleted
        while (count < position - 1 && temp->next != nullptr) {
            temp = temp->next;
            count++;
        }

        if (temp->next == nullptr) {
            cout << "Position out of range!" << endl;
            return;
        }

        Node* toDelete = temp->next;
        temp->next = temp->next->next;  // Skip over the node to be deleted
        delete toDelete;
    }

    // Function to display the singly linked list
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    SinglyLinkedList sll;

    // Inserting elements
    sll.insertAtEnd(10);
    sll.insertAtEnd(20);
    sll.insertAtEnd(30);
    sll.insertAtEnd(40);
    sll.insertAtEnd(50);

    // Displaying the list
    cout << "Singly Linked List: ";
    sll.display();  // Output: 10 20 30 40 50

    // Delete from the beginning
    sll.deleteFromBeginning();
    cout << "After deleting from the beginning: ";
    sll.display();  // Output: 20 30 40 50

    // Delete from the end
    sll.deleteFromEnd();
    cout << "After deleting from the end: ";
    sll.display();  // Output: 20 30 40

    // Delete at position 2
    sll.deleteAtPosition(2);
    cout << "After deleting node at position 2: ";
    sll.display();  // Output: 20 40

    // Attempt to delete at an out-of-range position
    sll.deleteAtPosition(5);  // Output: Position out of range!

    return 0;
}
15/11/2024, 7:38 pm - Ayush: #include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class CircularLinkedList {
public:
    Node* head;

    CircularLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the beginning
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = head;  // Point to itself, making it circular
        } else {
            Node* temp = head;

            // Traverse to the last node to update circular link
            while (temp->next != head) {
                temp = temp->next;
            }

            newNode->next = head;  // New node points to the current head
            temp->next = newNode;   // Last node points to the new node
            head = newNode;         // Update the head to the new node
        }
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = head;  // Point to itself, making it circular
        } else {
            Node* temp = head;

            // Traverse to the last node
            while (temp->next != head) {
                temp = temp->next;
            }

            temp->next = newNode;  // Last node points to the new node
            newNode->next = head;  // New node points to the head
        }
    }

    // Function to insert a node at a specific position
    void insertAtPosition(int value, int position) {
        Node* newNode = new Node(value);

        // Case 1: Insert at the beginning (position 1)
        if (position == 1) {
            if (head == nullptr) {  // If the list is empty
                head = newNode;
                newNode->next = head;  // Point to itself, making it circular
            } else {
                Node* temp = head;

                // Traverse to the last node to update circular link
                while (temp->next != head) {
                    temp = temp->next;
                }

                newNode->next = head;  // New node points to the current head
                temp->next = newNode;   // Last node points to the new node
                head = newNode;         // Update head to the new node
            }
            return;
        }

        // Case 2: Insert at any position other than the beginning
        Node* temp = head;
        int count = 1;

        // Traverse to the node before the desired position
        while (count < position - 1 && temp->next != head) {
            temp = temp->next;
            count++;
        }

        // If the position is out of range
        if (count < position - 1) {
            cout << "Position out of range!" << endl;
            return;
        }

        // Insert the new node at the desired position
        newNode->next = temp->next;
        temp->next = newNode;
    }

    // Function to display the circular linked list
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        cout << temp->data << " ";  // Print the data of the head node
        temp = temp->next;

        while (temp != head) {  // Traverse until we loop back to the head
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    CircularLinkedList cll;

    // Inserting elements
    cll.insertAtEnd(10);
    cll.insertAtEnd(20);
    cll.insertAtEnd(30);

    // Displaying the list
    cll.display();  // Output: 10 20 30

    // Insert at the beginning
    cll.insertAtBeginning(5);
    cll.display();  // Output: 5 10 20 30

    // Insert at position 3
    cll.insertAtPosition(15, 3);
    cll.display();  // Output: 5 10 15 20 30

    // Insert at position 1 (beginning)
    cll.insertAtPosition(1, 1);
    cll.display();  // Output: 1 5 10 15 20 30

    // Insert at position out of range
    cll.insertAtPosition(50, 10);  // Output: Position out of range!

    return 0;
}
15/11/2024, 7:38 pm - Ayush: #include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class CircularLinkedList {
public:
    Node* head;

    CircularLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = head;  // Point to itself, making it circular
        } else {
            Node* temp = head;

            // Traverse to the last node
            while (temp->next != head) {
                temp = temp->next;
            }

            temp->next = newNode;  // Last node points to the new node
            newNode->next = head;  // New node points to the head
        }
    }

    // Function to delete a node from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        if (head->next == head) {  // If there is only one node
            delete head;  // Delete the single node
            head = nullptr;  // Set head to null
        } else {
            Node* temp = head;

            // Traverse to the last node to update circular link
            while (temp->next != head) {
                temp = temp->next;
            }

            // The last node now points to the second node (new head)
            Node* toDelete = head;
            head = head->next;  // Update head to the second node
            temp->next = head;  // Last node points to the new head
            delete toDelete;    // Delete the old head
        }
    }

    // Function to delete a node from the end
    void deleteFromEnd() {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        if (head->next == head) {  // If there is only one node
            delete head;  // Delete the single node
            head = nullptr;  // Set head to null
        } else {
            Node* temp = head;

            // Traverse to the second last node
            while (temp->next->next != head) {
                temp = temp->next;
            }

            // temp now points to the second-last node
            Node* toDelete = temp->next;  // Last node
            temp->next = head;  // Second last node points to head
            delete toDelete;    // Delete the last node
        }
    }

    // Function to display the circular linked list
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        do {
            cout << temp->data << " ";  // Print data of each node
            temp = temp->next;
        } while (temp != head);  // Stop when we return to the head
        cout << endl;
    }
};

int main() {
    CircularLinkedList cll;

    // Inserting elements
    cll.insertAtEnd(10);
    cll.insertAtEnd(20);
    cll.insertAtEnd(30);

    // Displaying the list
    cll.display();  // Output: 10 20 30

    // Delete from the beginning
    cll.deleteFromBeginning();
    cll.display();  // Output: 20 30

    // Delete from the end
    cll.deleteFromEnd();
    cll.display();  // Output: 20

    return 0;
}
15/11/2024, 7:38 pm - Ayush: #include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class CircularLinkedList {
public:
    Node* head;

    CircularLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = head;  // Point to itself, making it circular
        } else {
            Node* temp = head;

            // Traverse to the last node
            while (temp->next != head) {
                temp = temp->next;
            }

            temp->next = newNode;  // Last node points to the new node
            newNode->next = head;  // New node points to the head
        }
    }

    // Function to delete a node at any position
    void deleteAtPosition(int position) {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        if (position == 1) {  // If deleting the first node
            deleteFromBeginning();
            return;
        }

        Node* temp = head;
        int count = 1;

        // Traverse to the node just before the node to be deleted
        while (count < position - 1 && temp->next != head) {
            temp = temp->next;
            count++;
        }

        if (temp->next == head) {
            cout << "Position out of range!" << endl;
            return;
        }

        Node* toDelete = temp->next;  // Node to be deleted
        temp->next = temp->next->next;  // Skip over the node to be deleted
        delete toDelete;  // Free the memory of the deleted node
    }

    // Function to delete a node from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        if (head->next == head) {  // If there is only one node
            delete head;
            head = nullptr;
        } else {
            Node* temp = head;

            // Traverse to the last node
            while (temp->next != head) {
                temp = temp->next;
            }

            Node* toDelete = head;
            head = head->next;
            temp->next = head;
            delete toDelete;
        }
    }

    // Function to display the circular linked list
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

int main() {
    CircularLinkedList cll;

    // Inserting elements
    cll.insertAtEnd(10);
    cll.insertAtEnd(20);
    cll.insertAtEnd(30);
    cll.insertAtEnd(40);
    cll.insertAtEnd(50);

    // Displaying the list
    cout << "Circular Linked List: ";
    cll.display();  // Output: 10 20 30 40 50

    // Delete node at position 3
    cll.deleteAtPosition(3);
    cout << "After deleting node at position 3: ";
    cll.display();  // Output: 10 20 40 50

    return 0;
}
15/11/2024, 7:38 pm - Ayush: Here's a complete implementation of a doubly linked list in C++ that includes functions to insert nodes at the end, delete nodes from the beginning, delete nodes from the end, and delete nodes from any position:

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class DoublyLinkedList {
public:
    Node* head;

    DoublyLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {  // If the list is empty
            head = newNode;
        } else {
            Node* temp = head;

            // Traverse to the last node
            while (temp->next != nullptr) {
                temp = temp->next;
            }

            temp->next = newNode;
            newNode->prev = temp;
        }
    }

    // Function to delete a node from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        Node* toDelete = head;

        if (head->next == nullptr) {  // If there is only one node
            head = nullptr;
        } else {
            head = head->next;
            head->prev = nullptr;
        }

        delete toDelete;
    }

    // Function to delete a node from the end
    void deleteFromEnd() {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        if (head->next == nullptr) {  // If there is only one node
            delete head;
            head = nullptr;
        } else {
            Node* temp = head;

            // Traverse to the last node
            while (temp->next != nullptr) {
                temp = temp->next;
            }

            // The second last node's next is set to nullptr
            temp->prev->next = nullptr;
            delete temp;
        }
    }

    // Function to delete a node from any position
    void deleteFromPosition(int position) {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        if (position <= 0) {
            cout << "Invalid position!" << endl;
            return;
        }

        Node* temp = head;

        if (position == 1) {  // Deleting the first node (special case)
            if (head->next == nullptr) {  // If there is only one node
                delete head;
                head = nullptr;
            } else {
                head = head->next;
                head->prev = nullptr;
                delete temp;
            }
        } else {
            int count = 1;

            // Traverse to the node at the desired position
            while (count < position && temp != nullptr) {
                temp = temp->next;
                count++;
            }

            if (temp == nullptr) {  // If position is out of range
                cout << "Position out of range!" << endl;
                return;
            }

            // Update the pointers of the previous and next nodes
            if (temp->next != nullptr) {  // Not the last node
                temp->next->prev = temp->prev;
            }

            if (temp->prev != nullptr) {  // Not the first node
                temp->prev->next = temp->next;
            }

            delete temp;  // Delete the node at the specified position
        }
    }

    // Function to display the doubly linked list
    void displayForward() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    DoublyLinkedList dll;

    // Inserting elements
    dll.insertAtEnd(10);
    dll.insertAtEnd(20);
    dll.insertAtEnd(30);
    dll.insertAtEnd(40);
    dll.insertAtEnd(50);

    // Displaying the list
    cout << "Doubly Linked List: ";
    dll.displayForward();  // Output: 10 20 30 40 50

    // Delete from the beginning
    dll.deleteFromBeginning();
    cout << "After deleting from the beginning: ";
    dll.displayForward();  // Output: 20 30 40 50

    // Delete from the end
    dll.deleteFromEnd();
    cout << "After deleting from the end: ";
    dll.displayForward();  // Output: 20 30 40

    // Delete from position 2
    dll.deleteFromPosition(2);
    cout << "After deleting from position 2: ";
    dll.displayForward();  // Output: 20 40

    return 0;
}

This code includes all the deletion functionalities you need for a doubly linked list:

Deleting from the beginning

Deleting from the end

Deleting from a specific position
15/11/2024, 7:38 pm - Ayush: Certainly! Here is the same code for a Doubly Linked List with methods to insert nodes at various positions and display the list in both forward and backward directions:

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class DoublyLinkedList {
public:
    Node* head;

    DoublyLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the beginning
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {  // If the list is empty
            head = newNode;
        } else {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {  // If the list is empty
            head = newNode;
        } else {
            Node* temp = head;

            // Traverse to the last node
            while (temp->next != nullptr) {
                temp = temp->next;
            }

            temp->next = newNode;
            newNode->prev = temp;
        }
    }

    // Function to insert a node at any position
    void insertAtPosition(int value, int position) {
        if (position <= 0) {
            cout << "Position must be greater than 0." << endl;
            return;
        }

        Node* newNode = new Node(value);

        if (position == 1) {  // Insert at the beginning
            insertAtBeginning(value);
            return;
        }

        Node* temp = head;
        int count = 1;

        // Traverse to the node just before the desired position
        while (count < position - 1 && temp != nullptr) {
            temp = temp->next;
            count++;
        }

        if (temp == nullptr) {
            cout << "Position out of range!" << endl;
            delete newNode;
            return;
        }

        // Insert the new node
        newNode->next = temp->next;
        newNode->prev = temp;
        if (temp->next != nullptr) {
            temp->next->prev = newNode;
        }
        temp->next = newNode;
    }

    // Function to display the doubly linked list
    void displayForward() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    // Function to display the doubly linked list in reverse
    void displayBackward() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        // Traverse to the last node
        while (temp->next != nullptr) {
            temp = temp->next;
        }

        // Traverse backward from the last node
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->prev;
        }
        cout << endl;
    }
};

int main() {
    DoublyLinkedList dll;

    // Inserting elements
    dll.insertAtEnd(10);
    dll.insertAtEnd(20);
    dll.insertAtEnd(30);

    // Displaying the list
    cout << "Doubly Linked List (Forward): ";
    dll.displayForward();  // Output: 10 20 30

    // Insert at the beginning
    dll.insertAtBeginning(5);
    cout << "After inserting 5 at the beginning: ";
    dll.displayForward();  // Output: 5 10 20 30

    // Insert at the end
    dll.insertAtEnd(40);
    cout << "After inserting 40 at the end: ";
    dll.displayForward();  // Output: 5 10 20 30 40

    // Insert at position 3
    dll.insertAtPosition(25, 3);
    cout << "After inserting 25 at position 3: ";
    dll.displayForward();  // Output: 5 10 25 20 30 40

    // Displaying the list in reverse
    cout << "Doubly Linked List (Backward): ";
    dll.displayBackward();  // Output: 40 30 25 20 10 5

    return 0;
}
15/11/2024, 7:38 pm - Ayush: #include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class CircularDoublyLinkedList {
public:
    Node* head;

    CircularDoublyLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the beginning
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            head->prev = newNode;
            last->next = newNode;

            head = newNode;
        }
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            last->next = newNode;
            head->prev = newNode;
        }
    }

    // Function to insert a node at any given position
    void insertAtPosition(int value, int position) {
        if (position <= 0) {
            cout << "Invalid position!" << endl;
            return;
        }

        if (position == 1) {  // Insert at the beginning
            insertAtBeginning(value);
            return;
        }

        Node* newNode = new Node(value);
        Node* temp = head;

        int count = 1;
        while (count < position - 1 && temp->next != head) {
            temp = temp->next;
            count++;
        }

        if (temp->next == head && count != position - 1) {
            cout << "Position out of range!" << endl;
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        newNode->prev = temp;
        temp->next->prev = newNode;
        temp->next = newNode;
    }

    // Function to display the circular doubly linked list
    void displayForward() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

int main() {
    CircularDoublyLinkedList cdll;

    // Inserting elements
    cdll.insertAtEnd(10);
    cdll.insertAtEnd(20);
    cdll.insertAtEnd(30);

    // Displaying the list
    cout << "Circular Doubly Linked List: ";
    cdll.displayForward();  // Output: 10 20 30

    // Insert at the beginning
    cdll.insertAtBeginning(5);
    cout << "After inserting 5 at the beginning: ";
    cdll.displayForward();  // Output: 5 10 20 30

    // Insert at the end
    cdll.insertAtEnd(40);
    cout << "After inserting 40 at the end: ";
    cdll.displayForward();  // Output: 5 10 20 30 40

    // Insert at position 3
    cdll.insertAtPosition(15, 3);
    cout << "After inserting 15 at position 3: ";
    cdll.displayForward();  // Output: 5 10 15 20 30 40

    return 0;
}
15/11/2024, 7:38 pm - Ayush: #include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class CircularDoublyLinkedList {
public:
    Node* head;

    CircularDoublyLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {  // If the list is empty
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            last->next = newNode;
            head->prev = newNode;
        }
    }

    // Function to delete a node from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        Node* last = head->prev;
        Node* toDelete = head;

        if (head->next == head) {  // Only one node
            head = nullptr;
        } else {
            head = head->next;
            head->prev = last;
            last->next = head;
        }

        delete toDelete;
    }

    // Function to delete a node from the end
    void deleteFromEnd() {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        Node* last = head->prev;
        Node* toDelete = last;

        if (head->next == head) {  // Only one node
            head = nullptr;
        } else {
            last->prev->next = head;
            head->prev = last->prev;
        }

        delete toDelete;
    }

    // Function to delete a node from any position
    void deleteFromPosition(int position) {
        if (head == nullptr) {  // If the list is empty
            cout << "List is empty!" << endl;
            return;
        }

        if (position <= 0) {
            cout << "Invalid position!" << endl;
            return;
        }

        Node* temp = head;

        if (position == 1) {  // Deleting the first node
            deleteFromBeginning();
            return;
        }

        int count = 1;
        while (count < position && temp->next != head) {
            temp = temp->next;
            count++;
        }

        if (temp->next == head && count != position) {
            cout << "Position out of range!" << endl;
            return;
        }

        // Deleting the node at the given position
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;

        delete temp;
    }

    // Function to display the circular doubly linked list
    void displayForward() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

int main() {
    CircularDoublyLinkedList cdll;

    // Inserting elements
    cdll.insertAtEnd(10);
    cdll.insertAtEnd(20);
    cdll.insertAtEnd(30);
    cdll.insertAtEnd(40);
    cdll.insertAtEnd(50);

    // Displaying the list
    cout << "Circular Doubly Linked List: ";
    cdll.displayForward();  // Output: 10 20 30 40 50

    // Delete from the beginning
    cdll.deleteFromBeginning();
    cout << "After deleting from the beginning: ";
    cdll.displayForward();  // Output: 20 30 40 50

    // Delete from the end
    cdll.deleteFromEnd();
    cout << "After deleting from the end: ";
    cdll.displayForward();  // Output: 20 30 40

    // Delete from position 2
    cdll.deleteFromPosition(2);
    cout << "After deleting from position 2: ";
    cdll.displayForward();  // Output: 20 40

    return 0;
}
15/11/2024, 7:46 pm - Ansh Gupta: This message was deleted
15/11/2024, 7:48 pm - Ansh Gupta: This message was deleted
15/11/2024, 7:49 pm - Ayush: #include <iostream>
using namespace std;

#define MAX 1000

class Stack {
    int top;           // Variable to track the top element of the stack
public:
    int a[MAX];        // Array to store stack elements
    Stack() { top = -1; } // Constructor to initialize the top of the stack to -1
    int push(int x);   // Function to push an element onto the stack
    int pop();         // Function to pop (remove) an element from the stack
    int peek();        // Function to view the top element of the stack without removing it
    int isEmpty();     // Function to check if the stack is empty
};

int Stack::push(int x) {
    if (top >= (MAX - 1)) {
        cout << "Stack Overflow\n";
        return 0;  // Return 0 to indicate failure (stack overflow)
    } else {
        a[++top] = x;  // Increment 'top' and then insert the element
        cout << x << " pushed into stack\n";
        return 1;  // Return 1 to indicate success
    }
}

int Stack::pop() {
    if (top < 0) {
        cout << "Stack Underflow\n";
        return 0;  // Return 0 to indicate failure (stack underflow)
    } else {
        int x = a[top--];  // Retrieve the top element, then decrement 'top'
        return x;          // Return the popped element
    }
}

int Stack::peek() {
    if (top < 0) {
        cout << "Stack is Empty\n";
        return 0;  // Return 0 to indicate an empty stack
    } else {
        return a[top];  // Return the top element
    }
}

int Stack::isEmpty() {
    if (top < 0) {
        return 1;  // Return 1 to indicate the stack is empty
    } else {
        return 0;  // Return 0 to indicate the stack is not empty
    }
}

int main() {
    Stack s;       // Create a stack object 's'
    s.push(10);    // Push 10 onto the stack
    s.push(20);    // Push 20 onto the stack
    s.push(30);    // Push 30 onto the stack
    cout << s.pop() << " popped from stack\n";  // Pop the top element and display it
    return 0;
}
15/11/2024, 7:58 pm - Ansh Gupta: #include <iostream>
using namespace std;

// Node structure for the stack
class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

// Stack class with linked list implementation
class Stack {
private:
    Node* top; // Pointer to the top of the stack

public:
    // Constructor to initialize the stack
    Stack() {
        top = nullptr;
    }

    // Push element onto the stack
    void push(int value) {
        Node* newNode = new Node(value); // Create a new node
        if (top == nullptr) {
            top = newNode; // If stack is empty, new node becomes the top
        } else {
            newNode->next = top; // Link the new node with the top
            top = newNode; // Update the top to the new node
        }
        cout << value << " pushed to stack." << endl;
    }

    // Pop element from the stack
    void pop() {
        if (top == nullptr) {
            cout << "Stack underflow. Cannot pop from an empty stack." << endl;
            return;
        }
        Node* temp = top;
        top = top->next; // Move the top pointer to the next node
        cout << temp->data << " popped from stack." << endl;
        delete temp; // Delete the popped node
    }

    // Peek at the top element of the stack
    int peek() {
        if (top == nullptr) {
            cout << "Stack is empty." << endl;
            return -1;
        }
        return top->data;
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }

    // Display all elements in the stack
    void display() {
        if (top == nullptr) {
            cout << "Stack is empty." << endl;
            return;
        }
        Node* temp = top;
        cout << "Stack elements: ";
        while (temp != nullptr) {
            cout << temp->data << " "; // Print each node's data
            temp = temp->next; // Move to the next node
        }
        cout << endl;
    }

    // Destructor to clean up memory
    ~Stack() {
        while (!isEmpty()) {
            pop(); // Pop all elements to free memory
        }
    }
};

int main() {
    Stack stack;

    stack.push(10);
    stack.push(20);
    stack.push(30);

    stack.display(); // Display the stack elements

    cout << "Top element is " << stack.peek() << endl;

    stack.pop();
    stack.display(); // Display the stack after popping an element

    stack.pop();
    stack.display(); // Display the stack again

    cout << "Top element is " << stack.peek() << endl;

    stack.pop();
    stack.display(); // Display the stack after popping all elements

    return 0;
}
16/11/2024, 2:20 am - Ayush: int main()
{
    Node *root=NULL;
    root=insert(root,50);
    insert(root,40);
    insert(root,60);
    insert(root,35);
    insert(root,41);
    insert(root,59);
    insert(root,61);
    insert(root,32);
    insert(root,24);
    insert(root,29);
   
    cout<<"Pre Order before deleting :";
    preorder(root);
    cout<<endl;

     int target=24;
     deleteNode(root,target);

     cout<<"Pre Order After deleting (24) :";
    preorder(root);
}
16/11/2024, 2:23 am - Ayush: #include<iostream>
using namespace std;
// Creating Binary Search Tree   and deleting the leaf nodes

class Node
{
    public:
    int data;
    Node *left,*right;

    Node(int value)
    {
        data=value;
        right=left=NULL;
    }
};

Node * insert(Node * root, int value)
{
    if(root==NULL)
    {
        Node *temp=new Node(value);
        return temp;
    }

    if(value<root->data)
    {
        root->left=insert(root->left,value);
    }
    else if(value>root->data)
    {
        root->right=insert(root->right,value);
    }
     return root;
}

void preorder(Node * root)
{
    if(root==NULL)
    return;
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

Node * deleteNode(Node *root,int target)
{
    if(root==NULL)
    return NULL;

    if(target<root->data)
    {
        root->left= deleteNode(root->left,target);
    }
    else if(target>root->data)
    {
        root->right= deleteNode(root->right,target);
    }
    else
    {
        //leaf node
        if(root->left==NULL&&root->right==NULL)
        {
            delete root;
            return NULL;
        }

        // node with one child
       else if(root->left==NULL&&root->right!=NULL)
       {
        Node * temp=root->right;
        delete root;
        return temp;
       }

       else if(root->left!=NULL&&root->right==NULL)
       {
        Node * temp=root->left;
        delete root;
        return temp;
       }

     // node with 2 child
       else
       {
         Node * child=root->left;
         Node *parent=root;
         while(child->right!=NULL)
         {
            parent=child;
            child=child->right;
         }

        if(parent!=root)
        {
             parent->right=child->left;
             child->left=root->left;
             child->right=root->right;
             delete root; 
             return child;
        }
        else
        {
            child->right=root->right;
            delete root;
            return child;
        }
       }


    }

}

int main()
{
    Node *root=NULL;
    root=insert(root,50);
    insert(root,40);
    insert(root,60);
    insert(root,35);
    insert(root,41);
    insert(root,59);
    insert(root,61);
    insert(root,32);
    insert(root,24);
    insert(root,29);
   
    cout<<"Pre Order before deleting :";
    preorder(root);
    cout<<endl;

     int target=24;
     deleteNode(root,target);

     cout<<"Pre Order After deleting (24) :";
    preorder(root);
}








     // fully
//                     50
//              40               60
 //         35      41       59      61
//       32           
 //  24      29
 //
16/11/2024, 3:22 am - Ayush: #include <iostream>
#include <vector>
#include <queue>

// BFS Traversal using Vector

using namespace std;

void addEdge(vector<int> AdjList[], int u, int v)
{
    AdjList[u].push_back(v);
    AdjList[v].push_back(u);
}

void BFS(vector<int> AdjList[], int vertices, int start)
{
    vector<bool> visited(vertices, 0);
    queue<int> q;
    q.push(start);
    visited[start] = 1;

    while (!q.empty())
    {
        int node = q.front();
        q.pop();

        cout << node << " ";
        for (int j = 0; j < AdjList[node].size(); j++)
        {
            int neighbor = AdjList[node][j];
            if (visited[neighbor]==0)
            {
                visited[neighbor] = 1;
                q.push(neighbor);
            }
        }
    }
}

int main()
{
    int vertices = 5;

    vector<int> AdjList[vertices];

    addEdge(AdjList, 0, 1);
    addEdge(AdjList, 0, 2);
    addEdge(AdjList, 1, 3);
    addEdge(AdjList, 1, 4);

    cout << "BFS Traversal Starting from vertex 0:\n";
    BFS(AdjList, vertices, 0);

    return 0;
}
16/11/2024, 3:23 am - Ayush: #include <iostream>
#include <vector>
using namespace std;

// Dfs Traversal using recursion

void addEdge(vector<int> AdjList[], int u, int v)
{
    AdjList[u].push_back(v);
    AdjList[v].push_back(u);
}

void DFSuTIL(int start, vector<int> AdjList[], vector<bool> &visited)
{
    visited[start]=1;
    cout<<start<<" ";

    for(int i=0;i<AdjList[start].size();i++)
    {
        int neighbor=AdjList[start][i];
        if(visited[neighbor]==0)
        {
            DFSuTIL(neighbor, AdjList, visited);
        }
    }
}

void DFS(vector<int> AdjList[], int vertices, int start)
{
    vector<bool> visited(vertices, 0);
    DFSuTIL(start, AdjList, visited);
}

int main()
{
    int vertices = 5;

    vector<int> AdjList[vertices];

    addEdge(AdjList, 0, 1);
    addEdge(AdjList, 0, 2);
    addEdge(AdjList, 1, 3);
    addEdge(AdjList, 1, 4);

    cout << "\nDFS Traversal Starting from vertex 0:";
    DFS(AdjList, vertices, 0);

    return 0;
}
18/11/2024, 3:13 pm - Ayush: <Media omitted>
18/11/2024, 10:03 pm - Ayush: #include <iostream>
using namespace std;
#define MAX 5

class Queue
{
    int arr[MAX];
    int front;
    int rear;
    int count;

public:
    Queue()
    {
        front = 0;
        rear = -1;
        count = 0;
    }

    bool isEmpty()
    {
        return count == 0;
    }

    bool isFull()
    {
        return count == MAX;
    }

    int enque(int value)
    {
        if (isFull())
        {
            cout << "Queue Overflow:";
        }
        else
        {
            rear++;
            arr[rear] = value;
            count++;
        }
    }

    void deque()
    {
        if (isEmpty())
        {
            cout << "Queue Underflow:";
        }
        else
        {
            front++;
            count--;
        }
    }

    int peek()
    {
        if (isEmpty())
        {
            cout << "Queue Underflow:";
        }
        else
        {
            return arr[front];
        }
    }

    void display()
    {
        if (isEmpty())
        {
            cout << "Queue Underflow:";
        }
        cout << "Queue Elements:";
        for (int i = front; i <= rear; i++)
        {
            cout << arr[i] << " ";
        }
        cout<<endl;
    }
};

int main()
{
    Queue q;
    q.enque(10);
    q.enque(20);
    q.enque(30);

    q.display();
    cout << "Front Element is:" << q.peek() << endl;

    q.deque();
    q.display();

    cout << "Front Element is:" << q.peek() << endl;

    q.deque();
    q.display();

    return 0;
}
18/11/2024, 10:03 pm - Ayush: #include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;

    Node(int value)
    {
        data = value;
        next = NULL;
    }
};

class Queue
{
    Node *front;
    Node *rear;

public:
    Queue()
    {
        front = NULL;
        rear = NULL;
    }

    void enque(int value)
    {
        Node *newNode = new Node(value);
        if (rear == NULL)
        {
            front = rear = newNode;
        }
        else
        {
            rear->next = newNode;
            rear = newNode;
        }
    }

    void deque()
    {
        if (front == NULL)
        {
            cout << "Queue Underflow" << endl;
            return;
        }
        Node *temp = front;
        front = front->next;
        if (front == NULL)
        {
            rear = NULL;
        }
        delete temp;
    }

    int peek()
    {
        if (front == NULL)
        {
            cout << "Queue Underflow" << endl;
            return -1;
        }
        return front->data;
    }

    void display()
    {
        if (front == NULL)
        {
            cout << "Queue Underflow" << endl;
            return;
        }
        Node *temp = front;
        cout << "Queue Elements: ";
        while (temp != NULL)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main()
{
    Queue q;
    q.enque(10);
    q.enque(20);
    q.enque(30);

    q.display();
    cout << "Front Element is: " << q.peek() << endl;

    q.deque();
    q.display();

    cout << "Front Element is: " << q.peek() << endl;

    q.deque();
    q.display();

    return 0;
}
18/11/2024, 10:03 pm - Ayush: #include <iostream>
using namespace std;

#define MAX 5 
class CircularQueue
{
private:
    int arr[MAX]; 
    int front;   
    int rear;     

public:
    CircularQueue()
    {
      front=rear=-1;
    }

    bool isFull()
    {
        return (front == 0 && rear == MAX - 1) || (rear == (front - 1) % (MAX - 1));
    }

    bool isEmpty()
    {
        return front == -1;
    }

    void enqueue(int value)
    {
        if (isFull())
        {
            cout << "Queue overflow. Cannot enqueue to a full queue." << endl;
            return;
        }

        if (front == -1)
        { 
            front = rear = 0;
        }
        else if (rear == MAX - 1 && front != 0)
        { 
            rear = 0;
        }
        else
        {
            rear++; 
        }

        arr[rear] = value;
    }

    void dequeue()
    {
        if (isEmpty())
        {
            cout << "Queue underflow. Cannot dequeue from an empty queue." << endl;
            return;
        }

        if (front == rear)
        { 
            front = rear = -1;
        }
        else if (front == MAX - 1)
        { 
            front = 0;
        }
        else
        {
            front++;
        }
    }

    void display()
    {
        if (isEmpty())
        {
            cout << "Queue is empty." << endl;
            return;
        }

        cout << "Queue elements: ";
        if (rear >= front)
        {
            for (int i = front; i <= rear; i++)
            {
                cout << arr[i] << " ";
            }
        }
        else
        {
            for (int i = front; i < MAX; i++)
            {
                cout << arr[i] << " ";
            }
            for (int i = 0; i <= rear; i++)
            {
                cout << arr[i] << " ";
            }
        }
        cout << endl;
    }
};

int main()
{
    CircularQueue queue;

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);
    queue.enqueue(40);
    queue.enqueue(50);
    

    queue.display(); 

    queue.dequeue();
    queue.display(); 

    queue.enqueue(60);
    queue.display(); 
    return 0;
}
18/11/2024, 10:04 pm - Ayush: #include<iostream>
using namespace std;
#define MAX 5

class DoublyQueue
{
    int arr[MAX];
    int front;
    int rear;
 
 public:
    DoublyQueue()
    {
        front=-1;
        rear=-1;
    }

    bool isFull()
    {
       return (front==0 && rear==MAX-1) || (rear==(front-1)%(MAX-1));
    }

    bool isEmpty()
    {
        return front==-1;
    }

    void push_rear(int value)
    {
        if(isFull())
        {
            cout<<"Queue Overflow:";
            return;
        }

        if(front==-1)
        {
            front=rear=0;
        }

        else if(rear==MAX-1 && front!=0)
        {
            rear=0;
        }

        else
        {
            rear++;
        }

        arr[rear]=value;
    }

    void push_front(int value)
    {
        if(isFull())
        {
            cout<<"Queue Overflow:";
            return;
        }

        if(front==-1)
        {
            front=rear=0;
        }

        else if(front==0)
        {
            front=MAX-1;
        }

        else
        {
            front--;
        }

        arr[front]=value;
    }

    void pop_front()
    {
        if(isEmpty())
        {
            cout<<"Queue Underflow:";
            return;
        }

        if(front==rear)
        {
            front=rear=-1;
        }

        else if(front==MAX-1)
        {
            front=0;
        }
        
        else
        {
            front++;
        }

    }

    void pop_rear()
    {
        if(isEmpty())
        {
            cout<<"Queue Underflow:";
            return;
        }

        if(front==rear)
        {
            front=rear=-1;
        }

        else if(rear==0)
        {
            rear=MAX-1;
        }

        else
        {
            rear--;
        }

    }

     void display()
    {
        if (isEmpty())
        {
            cout << "Queue is empty." << endl;
            return;
        }

        cout << "Queue elements: ";
        if (rear >= front)
        {
            for (int i = front; i <= rear; i++)
            {
                cout << arr[i] << " ";
            }
        }
        else
        {
            for (int i = front; i < MAX; i++)
            {
                cout << arr[i] << " ";
            }
            for (int i = 0; i <= rear; i++)
            {
                cout << arr[i] << " ";
            }
        }
        cout << endl;
    }

};


int main()
{
    DoublyQueue dq;

    dq.push_rear(10);
    dq.push_rear(20);
    dq.push_front(5);
    dq.push_front(10);
    dq.push_rear(30);

    dq.display();

    dq.pop_front(); 
    dq.display(); 

    dq.pop_rear();
    dq.display(); 

    return 0;
}
18/11/2024, 10:04 pm - Ayush: #include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;

    Node(int value)
    {
        data = value;
        next = nullptr;
    }
};

class CircularQueue
{
private:
    Node *front; 
    Node *rear;  

public:
    CircularQueue()
    {
        front = rear = nullptr;
    }

    bool isEmpty()
    {
        return front == nullptr;
    }

    void enqueue(int value)
    {
        Node *newNode = new Node(value);
        if (isEmpty())
        {
            front = rear = newNode; 
        }
        else
        {
            rear->next = newNode; 
        }
        rear = newNode;     
        rear->next = front; 
    }

    void dequeue()
    {
        if (isEmpty())
        {
            cout << "Queue is empty. Cannot dequeue." << endl;
            return;
        }

        if (front == rear)
        {
            delete front;
            front = rear = nullptr; 
        }
        else
        {
            Node *temp = front;
            front = front->next; 
            rear->next = front;
            delete temp;        
        }
    }

    void display()
    {
        if (isEmpty())
        {
            cout << "Queue is empty." << endl;
            return;
        }
        Node *temp = front;
        cout << "Queue elements: ";
        do
        {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != front);
        cout << endl;
    }
};

int main()
{
    CircularQueue queue;

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);
    queue.display(); 

    queue.dequeue();
    queue.display(); 

    queue.enqueue(40); 
    queue.display();   
    queue.dequeue(); 
    queue.display(); 
    return 0;
}
18/11/2024, 10:04 pm - Ayush: #include <iostream>
using namespace std;

class PriorityQueue
{
    int data[100];
    int priority[100];
    int size;

public:
    PriorityQueue()
    {
        size = 0;
    }

    bool isEmpty()
    {
        return size == 0;
    }

    void enque(int value, int prio)
    {
        int i;
        for (i = size - 1; i >= 0 && priority[i] > prio; i--)
        {
            data[i + 1] = data[i];
            priority[i + 1] = priority[i];
        }
        data[i + 1] = value;
        priority[i + 1] = prio;
        size++;
    }

    void pop()
    {
        if (isEmpty())
        {
            cout << "Priority Queue is Empty!" << endl;
            return;
        }
        for (int i = 0; i < size - 1; i++)
        {
            data[i] = data[i + 1];
            priority[i] = priority[i + 1];
        }
        size--; 
    }

    void peek()
    {
        if (isEmpty())
        {
            cout << "Priority Queue is Empty!" << endl;
            return;
        }
        cout << "Element with highest priority: " << data[0] << " (Priority: " << priority[0] << ")" << endl;
    }

    void display()
    {
        if (isEmpty())
        {
            cout << "Priority Queue is Empty!" << endl;
            return;
        }
        cout << "Priority Queue (Elements with their priorities):" << endl;
        for (int i = 0; i < size; i++)
        {
            cout << "Element: " << data[i] << " | Priority: " << priority[i] << endl;
        }
    }
};

int main()
{
    PriorityQueue pq;

    pq.enque(10, 3);
    pq.enque(20, 1);
    pq.enque(30, 2);

    pq.display();

    pq.peek();

    pq.pop();

    pq.display();

    pq.pop();

    pq.display();

    return 0;
}
18/11/2024, 10:05 pm - Ayush: #include <iostream>
using namespace std;

#define MAX 1000

class Stack
{
    int top; 
public:
    int a[MAX];          
    Stack() { top = -1; } 
    int push(int x);      
    int pop();           
    int peek();           
    int isEmpty();        
    void display();       
};

int Stack::push(int x)
{
    if (top >= (MAX - 1))
    {
        cout << "Stack Overflow\n";
        return 0; 
    }
    else
    {
        a[++top] = x; 
        return 1;
    }
}

int Stack::pop()
{
    if (top < 0)
    {
        cout << "Stack Underflow\n";
        return 0; 
    }
    else
    {
        int x = a[top--]; 
        return x;         
    }
}

int Stack::peek()
{
    if (top < 0)
    {
        cout << "Stack is Empty\n";
        return 0; 
    }
    else
    {
        return a[top];
    }
}

int Stack::isEmpty()
{
    return (top < 0); 
}

void Stack::display()
{
    if (top < 0)
    {
        cout << "Stack is empty\n";
    }
    else
    {
        cout << "Stack elements: ";
        for (int i = 0; i <= top; i++)
        {
            cout << a[i] << " ";
        }
        cout << "\n";
    }
}

int main()
{
    Stack s;
    s.push(10);
    s.push(20);
    s.push(30);
    cout << "Stack after pushing elements:\n";
    s.display(); 

    s.pop() ;

    cout << "Stack after popping an element:\n";
    s.display();

    return 0;
}
18/11/2024, 10:05 pm - Ayush: #include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;

    Node(int value)
    {
        data = value;
        next = nullptr;
    }
};

class Stack
{
private:
    Node *top;

public:
    Stack()
    {
        top = nullptr;
    }

    void push(int value)
    {
        Node *newNode = new Node(value); 
        if (top == nullptr)
        {
            top = newNode; 
        }
        else
        {
            newNode->next = top; 
            top = newNode;       
        }
    }

    void pop()
    {
        if (top == nullptr)
        {
            cout << "Stack underflow. Cannot pop from an empty stack." << endl;
            return;
        }
        Node *temp = top;
        top = top->next; 
        delete temp;
    }

    int peek()
    {
        if (top == nullptr)
        {
            cout << "Stack is empty." << endl;
            return -1;
        }
        return top->data;
    }

    bool isEmpty()
    {
        return top == nullptr;
    }

    void display()
    {
        if (top == nullptr)
        {
            cout << "Stack is empty." << endl;
            return;
        }
        Node *temp = top;
        cout << "Stack elements: ";
        while (temp != nullptr)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main()
{
    Stack stack;

    stack.push(10);
    stack.push(20);
    stack.push(30);

    stack.display();

    cout << "Top element is " << stack.peek() << endl;

    stack.pop();
    stack.display();

    stack.pop();
    stack.display();

    cout << "Top element is " << stack.peek() << endl;

    stack.pop();
    stack.display();

    return 0;
}
18/11/2024, 10:05 pm - Ayush: #include <iostream>
#include <queue>
using namespace std;

// implement stack using queue 
class Stack
{
public:
    queue<int> q1, q2;

    void push(int x)
    {
        q2.push(x);

        while (!q1.empty())
        {
            q2.push(q1.front());
            q1.pop();
        }
        swap(q2, q1);
    }

    void pop()
    {
        if (q1.empty())
        {
            cout << "Stack is Empty:" << endl;
            return;
        }
        q1.pop();
    }

    int top()
    {
        if (q1.empty())
        {
            cout << "Stack is Empty:" << endl;
            return -1; // Returning -1 to indicate empty stack
        }
        return q1.front();
    }

    void display()
    {
        if (q1.empty())
        {
            cout << "Stack is Empty:" << endl;
            return;
        }
        queue<int> temp = q1;
        cout << "Stack Elements: ";
        while (!temp.empty())
        {
            cout << temp.front() << " ";
            temp.pop();
        }
        cout << endl;
    }
};

int main()
{
    Stack s;

    s.push(10);
    s.push(20);
    s.push(30);

    s.display();

    s.pop();
    s.display();

    s.pop();
    s.display();

    s.pop();
    s.display();

    return 0;
}
18/11/2024, 10:05 pm - Ayush: #include <iostream>
#include <stack>
using namespace std;

class QueueUsingStacks
{
    stack<int> stack1, stack2;

public:
    void enqueue(int x)
    {
        stack1.push(x); 
    }

    int dequeue()
    {
        if (stack2.empty())
        {
            while (!stack1.empty())
            {
                stack2.push(stack1.top());
                stack1.pop();
            }
            if (stack2.empty())
            {
                cout << "Queue is empty\n";
                return -1;
            }
        }

        int front = stack2.top();
        stack2.pop();
        return front;
    }

    int front()
    {
        if (stack2.empty())
        {
            while (!stack1.empty())
            {
                stack2.push(stack1.top());
                stack1.pop();
            }
            if (stack2.empty())
            {
                cout << "Queue is empty\n";
                return -1;
            }
        }
        return stack2.top();
    }

    bool isEmpty()
    {
        return stack1.empty() && stack2.empty();
    }

    void display()
    {
        if (stack1.empty() && stack2.empty())
        {
            cout << "Queue is empty\n";
            return;
        }

        stack<int> temp = stack2;
        while (!temp.empty())
        {
            cout << temp.top() << " ";
            temp.pop();
        }

        stack<int> temp2 = stack1;
        while (!temp2.empty())
        {
            cout << temp2.top() << " ";
            temp2.pop();
        }

        cout << endl;
    }
};

int main()
{
    QueueUsingStacks q;

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);

    q.display(); 

    q.dequeue();
    q.display(); 
    q.dequeue();
    q.display(); 
    q.dequeue();
    q.display(); 
    return 0;
}
18/11/2024, 10:05 pm - Ayush: #include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;

    Node(int value)
    {
        data = value;
        next = NULL;
    }
};

class SinglyLinkedList
{
public:
    Node *head;

    SinglyLinkedList()
    {
        head = NULL;
    }

    void insertAtBegining(int value)
    {
        Node *newNode = new Node(value);
        if (head == NULL)
        {
            head = newNode;
        }
        else
        {
            newNode->next = head;
            head = newNode;
        }
    }

    void insertAtEnd(int value)
    {
        Node *newNode = new Node(value);
        if (head == NULL)
        {
            head = newNode;
        }
        else
        {
            Node *temp = head;
            while (temp->next != NULL)
            {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void insertAtAnyPosition(int position, int value)
    {
        if (position <= 0)
        {
            cout << "Position must be greater than 0:" << endl;
            return;
        }

        if (position == 1)
        {
            insertAtBegining(value);
            return;
        }
         Node *newNode = new Node(value);
        Node *temp = head;
        int count = 1;

        while (count < position - 1 && temp != NULL)
        {
            temp = temp->next;
            count++;
        }

        if (temp == NULL)
        {
            cout << "Position out of range:" << endl;
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    }

    void deleteAtBegining()
    {
        if (head == NULL)
        {
            cout << "List is Empty :" << endl;
            return;
        }
        Node *toDelete = head;
        head = head->next;
        delete toDelete;
    }

    void deleteAtEnd()
    {
        if (head == NULL)
        {
            cout << "List is Empty :" << endl;
            return;
        }
        if (head->next == NULL)
        {
            delete head;
            head = NULL;
            return;
        }
        Node *temp = head;
        while (temp->next->next != NULL)
        {
            temp = temp->next;
        }
        Node *toDelete = temp->next;
        temp->next = NULL;
        delete toDelete;
    }

    void deleteAtAnyPosition(int position)
    {
        if (head == NULL)
        {
            cout << "List is Empty :" << endl;
            return;
        }
        if (position <= 0)
        {
            cout << "Position must be greater than 0:" << endl;
            return;
        }

        if (position == 1)
        {
            deleteAtBegining();
            return;
        }

        Node *temp = head;
        int count = 1;

        while (count < position - 1 && temp->next != NULL)
        {
            temp = temp->next;
            count++;
        }

        if (temp ->next== NULL)
        {
            cout << "Position out of range:" << endl;
            return;
        }

        Node *toDelete=temp->next;
        temp->next=temp->next->next;
        delete toDelete;
    }

    void display()
    {
        if (head == NULL)
        {
            cout << "Linked list is Empty:";
            return;
        }
        Node *temp = head;
        while (temp != NULL)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main()
{
    SinglyLinkedList sll;

    sll.insertAtEnd(10);
    sll.insertAtEnd(20);
    sll.insertAtEnd(30);
    sll.insertAtEnd(40);
    sll.insertAtEnd(50);
    sll.insertAtAnyPosition(3, 60);
    sll.insertAtBegining(70);

    cout << "Singly Linked List: ";
    sll.display();

    sll.deleteAtBegining();
    cout << "Singly Linked List: ";
    sll.display();

    sll.deleteAtEnd();
    cout << "Singly Linked List: ";
    sll.display();

    sll.deleteAtAnyPosition(3);
    cout << "Singly Linked List: ";
    sll.display();

}
18/11/2024, 10:06 pm - Ayush: #include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;

    Node(int value)
    {
        data = value;
        next = NULL;
    }
};

class CircularLinkedList
{
public:
    Node *head;

    CircularLinkedList()
    {
        head = NULL;
    }

    void insertAtBegining(int value)
    {
        Node *newNode = new Node(value);
        if (head == NULL)
        {
            head = newNode;
            newNode->next = head;
        }
        Node *temp = head;
        while (temp->next != head)
        {
            temp = temp->next;
        }
        newNode->next = head;
        temp->next = newNode;
        head = newNode;
    }

    void insertAtEnd(int value)
    {
        Node *newNode = new Node(value);
        if (head == NULL)
        {
            head = newNode;
            newNode->next = head;
        }
        Node *temp = head;
        while (temp->next != head)
        {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head;
    }

    void insertAtAnyPosition(int position, int value)
    {
        Node *newNode = new Node(value);
        if (position == 1)
        {
            insertAtBegining(value);
            return;
        }

        Node *temp = head;
        int count = 1;

        while (count < position - 1 && temp->next != head)
        {
            temp = temp->next;
            count++;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }

    void deleteAtEnd()
    {
        if (head == NULL)
        {
            cout << "List is Empty:" << endl;
            return;
        }

        if (head->next == head)
        {
            delete head;
            head = NULL;
            return;
        }
        Node *temp = head;
        while (temp->next->next != head)
        {
            temp = temp->next;
        }
        Node *toDelete = temp->next;
        temp->next = head;
        delete toDelete;
    }

    void deleteAtBegining()
    {
        if (head == NULL)
        {
            cout << "List is Empty:" << endl;
            return;
        }

        if (head->next == head)
        {
            delete head;
            head = NULL;
            return;
        }

        Node *temp = head;
        while (temp->next != head)
        {
            temp = temp->next;
        }
        Node *toDelete = head;
        head = head->next;
        temp->next = head;
        delete toDelete;
    }

    void deleteAtAnyPosition(int position)
    {
        if (head == NULL)
        {
            cout << "List is Empty :" << endl;
            return;
        }
        if (position <= 0)
        {
            cout << "Position must be greater than 0:" << endl;
            return;
        }

        if (position == 1)
        {
            deleteAtBegining();
            return;
        }

        Node *temp = head;
        int count = 1;

        while (count < position - 1 && temp->next != head)
        {
            temp = temp->next;
            count++;
        }

        if (temp->next == head)
        {
            cout << "Position out of range:" << endl;
            return;
        }

        Node *toDelete = temp->next;
        temp->next = temp->next->next;
        delete toDelete;
    }

    void display()
    {
        if (head == NULL)
        {
            cout << "List is Empty:";
            return;
        }
        Node *temp = head;
        cout << temp->data << " ";
        temp = temp->next;
        while (temp != head)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main()
{
    CircularLinkedList cll;

    cll.insertAtEnd(10);
    cll.insertAtEnd(20);
    cll.insertAtEnd(30);

    cll.display(); // Output: 10 20 30

    cll.insertAtBegining(5);
    cll.display(); // Output: 5 10 20 30

    cll.insertAtAnyPosition(3, 15);
    cll.display(); // Output: 5 10 15 20 30

    cll.insertAtAnyPosition(1, 1);
    cll.display(); // Output: 1 5 10 15 20 30

    cll.deleteAtEnd();
    cll.display(); // Output: 1 5 10 15 20

    cll.deleteAtBegining();
    cll.display(); // Output:  5 10 15 20

    cll.deleteAtAnyPosition(3);
    cll.display(); // Output:  5 10  20

    cll.deleteAtAnyPosition(1);
    cll.display(); // Output:   10  20
}
18/11/2024, 10:06 pm - Ayush: #include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;
    Node *prev;

    Node(int value)
    {
        data = value;
        next = NULL;
        prev = NULL;
    }
};

class DoublyLinkedList
{
public:
    Node *head;

    DoublyLinkedList()
    {
        head = NULL;
    }

    void insertAtBegining(int value)
    {
        Node *newNode = new Node(value);
        if (head == NULL)
        {
            head = newNode;
            return; // Important to return here to prevent accessing null pointers
        }
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }

    void insertAtEnd(int value)
    {
        Node *newNode = new Node(value);
        if (head == NULL)
        {
            head = newNode;
            return; // Return after setting the first node
        }
        Node *temp = head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }

    void insertAtPosition(int position, int value)
    {
        if (position <= 0)
        {
            cout << "Position must be greater than 0:" << endl;
            return;
        }

        if (position == 1)
        {
            insertAtBegining(value);
            return;
        }

        Node *newNode = new Node(value);
        Node *temp = head;
        int count = 1;

        while (count < position - 1 && temp != NULL)
        {
            temp = temp->next;
            count++;
        }

        if (temp == NULL)
        {
            cout << "Position out of range:" << endl;
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        newNode->prev = temp;
        if (temp->next != NULL)
        {
            temp->next->prev = newNode;
        }
        temp->next = newNode;
    }

    void deleteAtBegining()
    {
        if(head==NULL)
        {
            cout<<"List is Empty:"<<endl;
            return;
        }
        if(head->next==NULL)
        {
            delete head;
            head=NULL;
            return;
        }
        Node * toDelete=head;
        head=head->next;
        head->prev=NULL;
        delete  toDelete;
    }

    void deleteAtEnd()
    {
        if(head==NULL)
        {
            cout<<"List is Empty:"<<endl;
            return;
        }
        if(head->next==NULL)
        {
            delete head;
            head=NULL;
            return;
        }
        Node *temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->prev->next=NULL;
    }

    void deleteAtPosition(int position)
    {
        if(head==NULL)
        {
            cout<<"List is Empty:"<<endl;
            return;
        }

        if (position <= 0)
        {
            cout << "Position must be greater than 0:" << endl;
            return;
        }

        if (position == 1)
        {
            deleteAtBegining();
            return;
        }

        Node *temp = head;
        int count = 1;

        while (count < position  && temp->next != NULL)
        {
            temp = temp->next;
            count++;
        }

        if (temp ->next== NULL)
        {
            cout << "Position out of range:" << endl;
            return;
        }

        if(temp->next!=NULL)
        {
            temp->next->prev=temp->prev;
        }

        if(temp->prev!=NULL)
        {
            temp->prev->next=temp->next;
        }

    }


    void displayForward()
    {
        if (head == NULL)
        {
            cout << "List is Empty:" << endl;
            return;
        }

        Node *temp = head;
        while (temp != NULL)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    void displayBackward()
    {
        if (head == NULL)
        {
            cout << "List is Empty:" << endl;
            return;
        }

        Node *temp = head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }

        while (temp != NULL)
        {
            cout << temp->data << " ";
            temp = temp->prev;
        }
        cout << endl;
    }
};

int main()
{
    DoublyLinkedList dll;

    dll.insertAtEnd(10);
    dll.insertAtEnd(20);
    dll.insertAtEnd(30);

    dll.displayForward(); // Output: 10 20 30

    dll.insertAtBegining(5);
    dll.displayForward(); // Output: 5 10 20 30

    dll.insertAtEnd(40);
    dll.displayForward(); // Output: 5 10 20 30 40

    dll.insertAtPosition(3, 25);
    dll.displayForward(); // Output: 5 10 25 20 30 40

    dll.displayBackward(); // Output: 40 30 20 25 10 5

    dll.deleteAtBegining();
    dll.displayForward();  // Output: 10 25 20 30 40

    dll.deleteAtEnd();
    dll.displayForward();// Output: 10 25 20 30

    dll.deleteAtPosition(2);
    dll.displayForward();// Output: 10 20 30

    dll.deleteAtPosition(2);
    dll.displayForward();// Output: 10 30


    return 0;
}
18/11/2024, 10:06 pm - Ayush: #include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;
    Node *prev;

    Node(int value)
    {
        data = value;
        next = NULL;
        prev = NULL;
    }
};

class CircularDoublyLinkedList
{
public:
    Node *head;

    CircularDoublyLinkedList()
    {
        head = NULL;
    }

    void insertAtBegining(int value)
    {
        Node *newNode = new Node(value);
        if (head == NULL)
        {
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        }
        else
        {
            newNode->next = head;
            newNode->prev = head->prev;

            head->prev->next = newNode;
            head->prev = newNode;

            head = newNode;
        }
    }

    void insertAtEnd(int value)
    {
        Node *newNode = new Node(value);
        if (head == NULL)
        {
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        }
        else
        {
            newNode->next = head;
            newNode->prev = head->prev;

            head->prev->next = newNode;
            head->prev = newNode;
        }
    }

    void insertAtPosition(int position, int value)
    {
        if (position <= 0)
        {
            cout << "Position must be greater than 0:" << endl;
            return;
        }

        if (position == 1)
        {
            insertAtBegining(value);
            return;
        }

        Node *newNode = new Node(value);
        Node *temp = head;
        int count = 1;

        while (count < position - 1 && temp->next != head)
        {
            temp = temp->next;
            count++;
        }

        if (count != position - 1 && temp->next == head)
        {
            cout << "Position out of range:" << endl;
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        newNode->prev = temp;
        temp->next->prev = newNode;
        temp->next = newNode;
    }

    void deleteAtBegining()
    {
        if(head==NULL)
        {
            cout<<"List is Empty:";
            return;
        }
        if(head->next==head)
        {
            delete head;
            head=NULL;
        }
        else
        {
            Node *last=head->prev;
            Node *todelete=head;

            head=head->next;
            head->prev=last;
            last->next=head;

            delete todelete;
        }
    }

    void deleteAtEnd()
    {
        if(head==NULL)
        {
            cout<<"List is Empty:";
            return;
        }
        if(head->next==head)
        {
            delete head;
            head=NULL;
        }
        else
        {
           Node * last=head->prev;
           Node *todelete=last;

           last->prev->next=head;
           head->prev=last->prev;

             delete todelete;
        }
    }

    void deleteAtPosition(int position)
    {
         if(head==NULL)
        {
            cout<<"List is Empty:"<<endl;
            return;
        }

        if (position <= 0)
        {
            cout << "Position must be greater than 0:" << endl;
            return;
        }

        if (position == 1)
        {
            deleteAtBegining();
            return;
        }

        Node *temp = head;
        int count = 1;

        while (count < position  && temp->next != NULL)
        {
            temp = temp->next;
            count++;
        }

        temp->prev->next=temp->next;
        temp->next->prev=temp->prev;

        delete temp;
    }

    void display()
    {
        if (head == NULL)
        {
            cout << "List is Empty:";
            return;
        }
        Node *temp = head;
        cout << temp->data << " ";
        temp = temp->next;
        while (temp != head)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main()
{
    CircularDoublyLinkedList cdll;

    cdll.insertAtEnd(10);
    cdll.insertAtEnd(20);
    cdll.insertAtEnd(30);

    cdll.display(); // Output: 10 20 30

    cdll.insertAtBegining(5);
    cdll.display(); // Output: 5 10 20 30

    cdll.insertAtEnd(40);
    cdll.display(); // Output: 5 10 20 30 40

    cdll.insertAtPosition(3, 15);
    cdll.display(); // Output: 5 10 15 20 30 40

    cdll.deleteAtBegining();
    cdll.display(); // Output: 10 15 20 30 40

    cdll.deleteAtEnd();
    cdll.display(); // Output: 10 15 20 30 

    cdll.deleteAtPosition(2);
    cdll.display(); // Output: 10 20 30 

    return 0;
}
19/11/2024, 6:11 am - Ayush: <Media omitted>
20/11/2024, 5:54 pm - Ayush: <Media omitted>
20/11/2024, 5:54 pm - Ayush: <Media omitted>
20/11/2024, 5:54 pm - Ayush: <Media omitted>
20/11/2024, 5:54 pm - Ayush: <Media omitted>
27/11/2024, 5:10 pm - Ansh Gupta: https://www.probabilitycourse.com/chapter7/7_1_3_solved_probs.php
01/12/2024, 6:10 pm - Ansh Gupta: Respected sir I hope this email finds you well as you know our semester is going to end So I request you to approve my leave for semester end.
Thanking You
Your faithfully student
03/12/2024, 10:57 am - Ayush: <Media omitted>
03/12/2024, 10:57 am - Ayush: <Media omitted>
03/12/2024, 10:57 am - Ayush: <Media omitted>
03/12/2024, 10:57 am - Ayush: <Media omitted>
03/12/2024, 10:57 am - Ayush: <Media omitted>
03/12/2024, 10:57 am - Ayush: <Media omitted>
03/12/2024, 10:57 am - Ayush: <Media omitted>
03/12/2024, 10:57 am - Ayush: <Media omitted>
03/12/2024, 11:42 am - Ansh Gupta: <Media omitted>
03/12/2024, 11:44 am - Ansh Gupta: <Media omitted>
03/12/2024, 12:20 pm - Ayush: <Media omitted>
03/12/2024, 12:20 pm - Ayush: <Media omitted>
03/12/2024, 12:20 pm - Ayush: <Media omitted>
03/12/2024, 12:20 pm - Ayush: <Media omitted>
04/12/2024, 11:17 am - Ayush: Sun gfg pe 160 wala start krte h daily question kr lenge ek , aur web dev start me Thora krte rahenge
04/12/2024, 12:28 pm - Ayush: 
04/12/2024, 6:51 pm - Ansh Gupta: Okkkk
05/12/2024, 7:46 am - Ansh Gupta: So raha hai kya ?
05/12/2024, 9:00 am - Ayush: Haa
05/12/2024, 9:00 am - Ayush: Bolo
05/12/2024, 9:15 am - Ansh Gupta: Kaha se karna hai question
05/12/2024, 9:15 am - Ansh Gupta: Gfg 160 vala
05/12/2024, 9:27 am - Ayush: <Media omitted>
05/12/2024, 9:27 am - Ayush: Janta h 15 nov se 30 nov ke bich start karna tha ab streak maintain krne pr bhi nhi milega bag
05/12/2024, 9:28 am - Ansh Gupta: Shitt
05/12/2024, 9:28 am - Ayush: Phle pta hi nhi tha
05/12/2024, 9:28 am - Ayush: Abhi rule dekha
05/12/2024, 9:28 am - Ayush: Tab krke koi fayda nhi h
05/12/2024, 9:30 am - Ayush: Web dev krte h isko choro
05/12/2024, 9:34 am - Ansh Gupta: Arey roj ek problem karte hai na kya hi ho jayega aur web dev bhi kar lete hai
05/12/2024, 9:35 am - Ayush: Thik h kar sakte h practice ke liye ,
05/12/2024, 9:35 am - Ansh Gupta: Yess
05/12/2024, 9:35 am - Ayush: 2 kiya tha maine kal
05/12/2024, 9:35 am - Ansh Gupta: Sahi hai
05/12/2024, 9:35 am - Ansh Gupta: Maine toh start Kiya hai aaj ek karunga
05/12/2024, 9:36 am - Ayush: Bhk late ho gya nhi to bag ka motivation hota
05/12/2024, 9:36 am - Ansh Gupta: Aur fir dopahar ke aaspas webdev karunga
05/12/2024, 9:36 am - Ayush: Haa thik h
05/12/2024, 9:36 am - Ansh Gupta: Haan sahi bol raha hai mera toh motivation tha bag
05/12/2024, 9:36 am - Ayush: Ab fir chalu nhi hoga next jaldi
05/12/2024, 9:37 am - Ayush: 2025 me hi hoga kabhi sayad fir karna padega
05/12/2024, 9:37 am - Ansh Gupta: Yahi toh dikkat hai ab aayega nahi aisa offer jaldi se
05/12/2024, 9:37 am - Ansh Gupta: Hmm
05/12/2024, 9:37 am - Ayush: Karte h jitna din mn karta h aise hi
05/12/2024, 9:37 am - Ansh Gupta: Haan 😂
11/12/2024, 5:17 pm - Ayush: 
11/12/2024, 5:17 pm - Ansh Gupta: 
11/12/2024, 7:30 pm - Ansh Gupta: Kya raha
11/12/2024, 7:46 pm - Ansh Gupta: Sale photo delete karta hai ab itna bhi bharosa raha 🫤
11/12/2024, 8:10 pm - Ansh Gupta: 
11/12/2024, 8:11 pm - Ayush: Khana kha rha hu
11/12/2024, 8:11 pm - Ansh Gupta: Haan koi ni
11/12/2024, 8:11 pm - Ayush: Wo to aise hi kar diya faltu ka tha
26/12/2024, 9:44 pm - Ayush: <Media omitted>
26/12/2024, 10:24 pm - Ansh Gupta: Arey bhai ye kaha se mil gayi
26/12/2024, 10:24 pm - Ansh Gupta: Mujhse toh dekhi bhi nahi gayi ye
26/12/2024, 10:24 pm - Ansh Gupta: Ye bhool kar bhi mat bhejna kahi par bhi
26/12/2024, 10:25 pm - Ayush: Mere pass hi h bs 🤫
26/12/2024, 10:25 pm - Ayush: Ab jhuke rahna pdega
26/12/2024, 10:25 pm - Ansh Gupta: Okk
26/12/2024, 10:25 pm - Ayush: Kyuki Maine hi record Kiya tha 😂
26/12/2024, 10:25 pm - Ansh Gupta: Aisa nahi hai mere paas bhi hai
26/12/2024, 10:26 pm - Ayush: Sale ek hi hai na wo wali jo waise bhi grp pe bhej rakhi h
26/12/2024, 10:26 pm - Ansh Gupta: Nahi voh sab toh purana ho gaya Naya maal hai mere pe toh
26/12/2024, 10:27 pm - Ayush: Ab kon sa aa gya
26/12/2024, 10:27 pm - Ansh Gupta: Ruko ek jhalak dikhata hu
26/12/2024, 10:27 pm - Ayush: Mere pass tere bhut h 8-10 honge total
26/12/2024, 10:27 pm - Ansh Gupta: <Media omitted>
26/12/2024, 10:27 pm - Ansh Gupta: Kuchh yaad aaya
26/12/2024, 10:28 pm - Ayush: Usse koi problem nhi h
26/12/2024, 10:28 pm - Ansh Gupta: Arey ye kaise
26/12/2024, 10:28 pm - Ansh Gupta: Par yrr koi college ka nikalta toh maja aajata
26/12/2024, 10:28 pm - Ayush: Ye toh bekar h , isse ji Krna h krle, isme Aisa kuch nhi h
26/12/2024, 10:28 pm - Ansh Gupta: Yaa fir sach main koi ladki hi nikal jati
26/12/2024, 10:29 pm - Ansh Gupta: Sirf ye ek photo thodi hai
26/12/2024, 10:29 pm - Ayush: Isse koi dr nhi mujhe 😂
26/12/2024, 10:30 pm - Ansh Gupta: Arey shit
26/12/2024, 10:30 pm - Ansh Gupta: Par bhai mujhe usse hai toh kripya karke meri is bhool ko maaf kare
26/12/2024, 10:30 pm - Ayush: Dusra jugaad kar
26/12/2024, 10:31 pm - Ayush: Ye sahi laga ye toh purana tha teri pitte hue wali video h jisme bura pita h
26/12/2024, 10:31 pm - Ansh Gupta: Karle jugaad karle... Karle koi jugaad
26/12/2024, 10:31 pm - Ansh Gupta: Kaunsi
26/12/2024, 10:31 pm - Ayush: Dikhata hu baad me
26/12/2024, 10:32 pm - Ayush: Abhay ke birthday wali
26/12/2024, 10:32 pm - Ansh Gupta: Un sab se koi dikkat nahi hai voh sab toh chalta hai
26/12/2024, 10:32 pm - Ansh Gupta: Dikkat toh unme hai jinme main cringe harkate karta hu
26/12/2024, 11:03 pm - Ayush: Cringe X Ansh
26/12/2024, 11:05 pm - Ansh Gupta: Bas yahi nahi sunna tha par soch kya pata yehi harkate dekh ke koi ladki soche kitna cute hai 🫠🫠 haaye mere sapne🫥
26/12/2024, 11:05 pm - Ayush: Soche tab na 🥲
26/12/2024, 11:06 pm - Ansh Gupta: Kaun hi sochta hoga mere baare main 😭
26/12/2024, 11:22 pm - Ayush: Yeah same 🥲
05/01/2025, 4:28 pm - Ayush: 11 11 dekh rha tha
05/01/2025, 4:29 pm - Ayush: Mst tha maza aa gya
05/01/2025, 4:29 pm - Ansh Gupta: Haan bhadiya hai
05/01/2025, 4:29 pm - Ayush: Bs yaar ending me vamika ko marwa diya 😭
05/01/2025, 4:29 pm - Ansh Gupta: Yehi toh dikkat hai 😔
05/01/2025, 4:30 pm - Ayush: Wo mst character thi 😭
05/01/2025, 4:30 pm - Ansh Gupta: Koi ni bhai
05/01/2025, 4:30 pm - Ansh Gupta: Got dekh aur royega fir ru
05/01/2025, 4:30 pm - Ansh Gupta: Tu*
05/01/2025, 4:32 pm - Ayush: Utni badi kon dekhega
05/01/2025, 4:32 pm - Ayush: Season 2 h kya iski ?
05/01/2025, 4:33 pm - Ansh Gupta: Dekho bhai 7 din main dekh lega
05/01/2025, 4:33 pm - Ansh Gupta: Nahi
05/01/2025, 4:33 pm - Ayush: Lund utna nhi dekh rha
05/01/2025, 9:38 pm - Ansh Gupta: 
05/01/2025, 9:39 pm - Ansh Gupta: Bhadwe phone uthana
05/01/2025, 9:39 pm - Ansh Gupta: 
05/01/2025, 9:40 pm - Ayush: Khane de bsdk
05/01/2025, 9:40 pm - Ansh Gupta: Bhosdike ab call nahi uthayega
05/01/2025, 9:40 pm - Ansh Gupta: Koi ni bhai
05/01/2025, 9:40 pm - Ansh Gupta: 😔
05/01/2025, 9:41 pm - Ayush: Senti hoga bsdk
06/01/2025, 6:15 am - Ayush: 
06/01/2025, 2:12 pm - Ansh Gupta: <Media omitted>
07/01/2025, 10:06 am - Ansh Gupta: Kya hua abhi tak nahi chhoda kya voh
11/01/2025, 10:49 pm - Ansh Gupta: 
14/01/2025, 9:13 pm - Ayush: Dhawal Bhaiya.vcf (file attached)
18/01/2025, 3:54 pm - Ansh Gupta: https://vcloud.lol/zrb1bzkr89ck2k_
19/01/2025, 1:29 am - Ayush: Kaha h ?
19/01/2025, 1:29 am - Ayush: Kab aayega ?
19/01/2025, 1:29 am - Ansh Gupta: Aagaya hu niche Sonu ke room main hu
19/01/2025, 1:29 am - Ansh Gupta: 40 se 45 min pehle phocha hu
19/01/2025, 1:29 am - Ayush: Thik
19/01/2025, 1:53 am - Ayush: Kr kya rha h laude ?
19/01/2025, 1:53 am - Ansh Gupta: Aata hu 15 20 min main
22/01/2025, 10:59 am - Ayush: You guys do realise right if you don’t do freshers we wont get fairwell. For once in lifetime we go to clg for one we give freshers or take fairwell, now because of mess some or juniors or seniors made everyone are effecting. Our clg have literally 1 big event that is freshers… and now that is also ruined, I don’t understand why both batches need to suffer because of the 3 or 4 individuals, if you have any grudge against that individual thats your thing, why cancel a good event of clg?? I too voted no that day because of my friends requesting me but after thinking for a while… really?? Are we going to waste some enjoyment based on some misunderstanding?? Now that anti ragging people are not serving and things are little cool, just think @everyone
22/01/2025, 10:59 am - Ayush: I think it is a valid point
22/01/2025, 10:59 am - Ayush: Because it is very memorable moment for juniors and just because some peoples mistake we can't make entire batch punished
22/01/2025, 10:59 am - Ayush: *I don't want to compare* but just think our just seniors (3rd yr) had  ragging case (kusuma didi issue) still fourth year had given them a good fresher in atithi hotel
22/01/2025, 10:59 am - Ayush: Not giving freshers will eventually destroy the bond between us and juniors . And we had to be in this college for upcoming 2 years.
22/01/2025, 10:59 am - Ayush: Honestly juniors are not that bad that they don't deserve a freshers
22/01/2025, 10:59 am - Ayush: Ultimately it's a combined decision.
23/01/2025, 8:14 pm - Ayush: <Media omitted>
24/01/2025, 9:04 am - Ayush: 
24/01/2025, 9:04 am - Ayush: <Media omitted>
24/01/2025, 9:04 am - Ayush: <Media omitted>
24/01/2025, 9:04 am - Ayush: <Media omitted>
24/01/2025, 9:04 am - Ayush: <Media omitted>
24/01/2025, 11:34 pm - Ayush: #include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;
#define SIZE 1000

void generateRandomBinaryArray(int binaryArray[]) {
    for (int i = 0; i < SIZE; i++) {
        binaryArray[i] = rand()%2; 
    }
}

void binaryAddition(const int arr1[], const int arr2[], int result[]) {
    int carry = 0;

    for (int i=SIZE-1; i>=0;i--) {
        int sum = arr1[i] + arr2[i] + carry;
        result[i] = sum % 2;
        carry = sum/2;    
    }

    if (carry) {
         cout << "Overflow" <<endl;
    }
}

void printBinaryArray(const int binaryArray[]) {
    for (int i = 0; i < SIZE; i++) {
        cout << binaryArray[i];
    }
    cout << endl;
}

int main() {
    srand(time(0)); // Seed for random number generation

    int arr1[SIZE] = {0};
    int arr2[SIZE] = {0};
    int result[SIZE] = {0};

    generateRandomBinaryArray(arr1);
    generateRandomBinaryArray(arr2);
    binaryAddition(arr1, arr2, result);

    cout<<"Binary Array 1: ";
    printBinaryArray(arr1);

    cout<<"Binary Array 2: ";
    printBinaryArray(arr2);

    cout << "Resultant Sum:  ";
    printBinaryArray(result);

    return 0;
}
24/01/2025, 11:34 pm - Ayush: #include<iostream>
using namespace std;
void merge(int arr[],int beg,int mid,int end){
    int i=beg;
    int j=mid+1;
    int index=0;
    int temp_arr[8];
    while(i<=mid && j<=end){
        if(arr[i]<arr[j]){
            temp_arr[index]=arr[i];
            i++;
        }
        else{
            temp_arr[index]=arr[j];
            j++;
        }
        index=index+1;
        
    }
    if(i>mid){
        while(j<=end){
            temp_arr[index]=arr[j];
            index++;
            j++;
        }
    }
    else{
        while(i<=mid){
            temp_arr[index]=arr[i];
            index++;
            i++;
        }
    }

    int k=0;
    while(k<index){
        arr[beg+k]=temp_arr[k];
        k++;
    }

}
void merge_sort(int arr[],int beg,int end){
    if(beg<end){
    int mid=(beg+end)/2;
    merge_sort(arr,beg,mid);
    merge_sort(arr,mid+1,end);
    merge(arr,beg,mid,end);
    }
}

int main(){
    int arr[8]={77,-50,-22,0,36,98,71,-4};
    merge_sort(arr,0,7);
    for(int p=0;p<8;p++){
        cout<<arr[p]<<" ";
    }
  
    return 0;
}
24/01/2025, 11:34 pm - Ayush: #include <iostream>
using namespace std;

void insertionSort(int arr[], int n)
{
    for (int i=1;i<n; i++) {
        int key = arr[i];
        int j=i-1;

        while (j>=0 && arr[j]>key) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

void printArray(int arr[], int n)
{
    for (int i=0;i< n;i++)
        cout<<arr[i]<<" ";
    cout<<endl;
}

int main()
{
    int arr[]={12,11,13,5,6};
    int n = sizeof(arr) / sizeof(arr[0]);
    insertionSort(arr,n);
    printArray(arr,n);

    return 0;
}
24/01/2025, 11:34 pm - Ayush: #include <iostream>
#include <cstdlib>
#include <ctime>
#include<chrono>
using namespace std;
#define SIZE 1000

void generateRandomBinaryArray(int binaryArray[]) {
    for (int i = 0; i < SIZE; i++) {
        binaryArray[i] = rand()%2; 
    }
}

void binaryAddition(const int arr1[], const int arr2[], int result[]) {
    int carry = 0;

    for (int i=SIZE-1; i>=0;i--) {
        int sum = arr1[i] + arr2[i] + carry;
        result[i] = sum % 2;
        carry = sum/2;    
    }

    if (carry) {
         cout << "Overflow" <<endl;
    }
}

void printBinaryArray(const int binaryArray[]) {
    for (int i = 0; i < SIZE; i++) {
        cout << binaryArray[i];
    }
    cout << endl;
}

int main() {
    
    auto start = std::chrono::high_resolution_clock::now();

    // operation to be timed ...

    srand(time(0)); // Seed for random number generation

    int arr1[SIZE] = {0};
    int arr2[SIZE] = {0};
    int result[SIZE] = {0};

    generateRandomBinaryArray(arr1);
    generateRandomBinaryArray(arr2);
    binaryAddition(arr1, arr2, result);

    cout<<"Binary Array 1: ";
    printBinaryArray(arr1);

    cout<<"Binary Array 2: ";
    printBinaryArray(arr2);

    cout << "Resultant Sum:  ";
    printBinaryArray(result);
    auto finish = std::chrono::high_resolution_clock::now();
    std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(finish-start).count() << "ns\n";

    return 0;
}
24/01/2025, 11:34 pm - Ayush: #include <iostream>
using namespace std;

#define SIZE 5
int a[] = {2,3,4,7,8};
int b[] = {9,8,7,5,4};
int result[11] = {0};

// Function to perform decimal addition
void decimalAddition(int arr1[], int result[]) {
    int carry = 0;

    for (int i = 10; i >= 0; i--) {
        int sum = arr1[i] + result[i] + carry;
        result[i] = sum % 10;
        carry = sum / 10;
    }
}

// Function to print the array (binary-like representation)
void printBinaryArray(const int binaryArray[]) {
    for (int i = 0; i < 11; i++) {
        cout << binaryArray[i] << " ";
    }
    cout << endl;
}

// Function to perform decimal multiplication
void decimalMultiplication(const int arr1[], const int arr2[], int result[]) {
    for (int i = SIZE - 1; i >= 0; i--) {
        int row[11] = {0}; // Temporary array for the current row
        int k = 10 - (SIZE - 1 - i);
        int carry = 0;

        for (int j = SIZE - 1; j >= 0; j--) {
            int r = (arr1[j] * arr2[i] + carry) % 10;
            carry = (arr1[j] * arr2[i] + carry) / 10;
            row[k] += r;
            k--;
        }

        if (carry > 0) {
            row[k] += carry; // Handle leftover carry
        }

        decimalAddition(row, result); // Add the current row to the result
    }

    printBinaryArray(result); // Print the final result
}

int main() {
    // Call the decimalMultiplication function
    decimalMultiplication(a, b, result);

    return 0;
}
25/01/2025, 9:33 am - Ayush: <Media omitted>
25/01/2025, 9:33 am - Ayush: <Media omitted>
25/01/2025, 9:29 pm - Ayush: <Media omitted>
25/01/2025, 9:29 pm - Ayush: <Media omitted>
26/01/2025, 9:21 pm - Ayush: <Media omitted>
26/01/2025, 9:21 pm - Ayush: <Media omitted>
28/01/2025, 4:51 pm - Ayush: <Media omitted>
28/01/2025, 11:15 pm - Ayush: <Media omitted>
29/01/2025, 11:03 am - Ayush: https://sites.google.com/view/bharat-soni/teaching/computational-optimization
01/02/2025, 9:53 am - Ayush: 
01/02/2025, 9:53 am - Ayush: <Media omitted>
01/02/2025, 9:53 am - Ayush: <Media omitted>
01/02/2025, 9:53 am - Ayush: <Media omitted>
01/02/2025, 9:53 am - Ayush: <Media omitted>
01/02/2025, 9:53 am - Ayush: <Media omitted>
01/02/2025, 9:53 am - Ayush: <Media omitted>
01/02/2025, 4:20 pm - Ansh Gupta: Take a look at this density Men Sandals on Flipkart https://dl.flipkart.com/dl/density-men-sandals/p/itm8822fa05fc734?pid=SNDFGVGQJFERZ9VA&cmpid=product.share.pp&_refId=PP.92a6aed5-f4ab-4ee0-9d4a-125ffafb4ec8.SNDFGVGQJFERZ9VA&_appId=WA
01/02/2025, 4:38 pm - Ansh Gupta: Take a look at this Sparx SS 453 Men Sandals on Flipkart https://dl.flipkart.com/dl/sparx-ss-453-men-sandals/p/itm94d712296a856?pid=SNDEURZR4UFMRCJG&cmpid=product.share.pp&_refId=PP.aab5d3ef-b4a8-497d-9a04-056b70dd3961.SNDEURZR4UFMRCJG&_appId=WA
02/02/2025, 2:49 am - Ansh Gupta: https://www.google.com/imgres?imgurl=https%3A%2F%2Fimg.freepik.com%2Fpremium-photo%2Fstairway-heaven-clouds_798986-656.jpg%3Fw%3D360&tbnid=ao4B_syJn6g5UM&vet=1&imgrefurl=https%3A%2F%2Fwww.freepik.com%2Fpremium-ai-image%2Fstairway-heaven-clouds_40090497.htm&docid=Y5BeK_PPvHVzAM&w=360&h=240&hl=en-US&source=sh%2Fx%2Fim%2Fm1%2F4&kgs=a59f9e10b858da4c
02/02/2025, 2:49 am - Ayush: <Media omitted>
03/02/2025, 2:30 pm - You blocked this contact. Tap to unblock.
03/02/2025, 2:31 pm - You unblocked this contact.
04/02/2025, 4:56 pm - Ayush: <Media omitted>
04/02/2025, 4:56 pm - Ayush: <Media omitted>
05/02/2025, 1:36 am - Ansh Gupta: https://youtu.be/s65EM9lluAU
07/02/2025, 11:26 am - Ayush: <Media omitted>
07/02/2025, 3:41 pm - Ayush: 
07/02/2025, 3:41 pm - Ayush: <Media omitted>
07/02/2025, 3:41 pm - Ayush: <Media omitted>
07/02/2025, 3:41 pm - Ayush: <Media omitted>
07/02/2025, 3:41 pm - Ayush: <Media omitted>
07/02/2025, 3:41 pm - Ayush: <Media omitted>
07/02/2025, 11:12 pm - Ansh Gupta: #include <iostream>
using namespace std;

#define SIZE 2  // Adjust as needed for larger matrices (must be power of 2)

// Function to add two matrices
void addMatrix(int A[SIZE][SIZE], int B[SIZE][SIZE], int result[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            result[i][j] = A[i][j] + B[i][j];
        }
    }
}

// Function to subtract two matrices
void subtractMatrix(int A[SIZE][SIZE], int B[SIZE][SIZE], int result[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            result[i][j] = A[i][j] - B[i][j];
        }
    }
}

// Strassen's Recursive Matrix Multiplication
void strassenMultiply(int A[SIZE][SIZE], int B[SIZE][SIZE], int C[SIZE][SIZE]) {
    if (SIZE == 1) {  // Base case: Single element multiplication
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int A11[SIZE / 2][SIZE / 2], A12[SIZE / 2][SIZE / 2], A21[SIZE / 2][SIZE / 2], A22[SIZE / 2][SIZE / 2];
    int B11[SIZE / 2][SIZE / 2], B12[SIZE / 2][SIZE / 2], B21[SIZE / 2][SIZE / 2], B22[SIZE / 2][SIZE / 2];
    int C11[SIZE / 2][SIZE / 2], C12[SIZE / 2][SIZE / 2], C21[SIZE / 2][SIZE / 2], C22[SIZE / 2][SIZE / 2];
    int M1[SIZE / 2][SIZE / 2], M2[SIZE / 2][SIZE / 2], M3[SIZE / 2][SIZE / 2], M4[SIZE / 2][SIZE / 2];
    int M5[SIZE / 2][SIZE / 2], M6[SIZE / 2][SIZE / 2], M7[SIZE / 2][SIZE / 2];
    int temp1[SIZE / 2][SIZE / 2], temp2[SIZE / 2][SIZE / 2];

    // Dividing matrices into submatrices
    for (int i = 0; i < SIZE / 2; i++) {
        for (int j = 0; j < SIZE / 2; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + SIZE / 2];
            A21[i][j] = A[i + SIZE / 2][j];
            A22[i][j] = A[i + SIZE / 2][j + SIZE / 2];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + SIZE / 2];
            B21[i][j] = B[i + SIZE / 2][j];
            B22[i][j] = B[i + SIZE / 2][j + SIZE / 2];
        }
    }

    // Calculating M1 to M7 using recursion
    addMatrix(A11, A22, temp1);
    addMatrix(B11, B22, temp2);
    strassenMultiply(temp1, temp2, M1);

    addMatrix(A21, A22, temp1);
    strassenMultiply(temp1, B11, M2);

    subtractMatrix(B12, B22, temp1);
    strassenMultiply(A11, temp1, M3);

    subtractMatrix(B21, B11, temp1);
    strassenMultiply(A22, temp1, M4);

    addMatrix(A11, A12, temp1);
    strassenMultiply(temp1, B22, M5);

    subtractMatrix(A21, A11, temp1);
    addMatrix(B11, B12, temp2);
    strassenMultiply(temp1, temp2, M6);

    subtractMatrix(A12, A22, temp1);
    addMatrix(B21, B22, temp2);
    strassenMultiply(temp1, temp2, M7);

    // Calculating the final quadrants of the result matrix
    addMatrix(M1, M4, temp1);
    subtractMatrix(temp1, M5, temp2);
    addMatrix(temp2, M7, C11);

    addMatrix(M3, M5, C12);
    addMatrix(M2, M4, C21);

    addMatrix(M1, M3, temp1);
    subtractMatrix(temp1, M2, temp2);
    addMatrix(temp2, M6, C22);

    // Combining results back into C matrix
    for (int i = 0; i < SIZE / 2; i++) {
        for (int j = 0; j < SIZE / 2; j++) {
            C[i][j] = C11[i][j];
            C[i][j + SIZE / 2] = C12[i][j];
            C[i + SIZE / 2][j] = C21[i][j];
            C[i + SIZE / 2][j + SIZE / 2] = C22[i][j];
        }
    }
}

// Function to print a matrix
void printMatrix(int matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int A[SIZE][SIZE] = {{1, 2}, {3, 4}};
    int B[SIZE][SIZE] = {{5, 6}, {7, 8}};
    int C[SIZE][SIZE] = {{0}};

    cout << "Matrix A:\n";
    printMatrix(A);
    cout << "Matrix B:\n";
    printMatrix(B);

    strassenMultiply(A, B, C);

    cout << "Resultant Matrix C (A * B):\n";
    printMatrix(C);

    return 0;
}
08/02/2025, 1:22 am - Ayush: #include <iostream>
#include <vector>

using namespace std;

typedef vector<vector<int>> Matrix;

// Function to add two matrices
Matrix add(const Matrix &A, const Matrix &B, int size) {
    Matrix C(size, vector<int>(size, 0));
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
    return C;
}

// Function to multiply matrices using divide and conquer
Matrix multiply(const Matrix &A, const Matrix &B, int size) {
    // Base case: if size is 1, multiply directly
    if (size == 1) {
        return {{A[0][0] * B[0][0]}};
    }

    int newSize = size / 2;
    Matrix A11(newSize, vector<int>(newSize));
    Matrix A12(newSize, vector<int>(newSize));
    Matrix A21(newSize, vector<int>(newSize));
    Matrix A22(newSize, vector<int>(newSize));
    Matrix B11(newSize, vector<int>(newSize));
    Matrix B12(newSize, vector<int>(newSize));
    Matrix B21(newSize, vector<int>(newSize));
    Matrix B22(newSize, vector<int>(newSize));

    // Dividing matrices into submatrices
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

    // Recursive multiplication
    Matrix C11 = add(multiply(A11, B11, newSize), multiply(A12, B21, newSize), newSize);
    Matrix C12 = add(multiply(A11, B12, newSize), multiply(A12, B22, newSize), newSize);
    Matrix C21 = add(multiply(A21, B11, newSize), multiply(A22, B21, newSize), newSize);
    Matrix C22 = add(multiply(A21, B12, newSize), multiply(A22, B22, newSize), newSize);

    // Combine results into final matrix
    Matrix C(size, vector<int>(size, 0));
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }

    return C;
}

void printMatrix(const Matrix &M) {
    int rows = M.size();
    int cols = M[0].size(); // Assuming matrix is not empty

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << M[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int n;
    cout << "Enter size of matrices (power of 2): ";
    cin >> n;

    Matrix A(n, vector<int>(n, 0)), B(n, vector<int>(n, 0));

    cout << "Enter matrix A:\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> A[i][j];

    cout << "Enter matrix B:\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> B[i][j];

    Matrix C = multiply(A, B, n);

    cout << "Resultant matrix C:\n";
    printMatrix(C);

    return 0;
}
08/02/2025, 2:35 am - Ayush: #include <iostream>
#include <vector>

using namespace std;

typedef vector<vector<int>> Matrix;

Matrix add(const Matrix &A, const Matrix &B, int size) 
{
    Matrix C(size, vector<int>(size, 0));
    for (int i = 0; i < size; i++)
        for (int j = 0; j < size; j++)
            C[i][j] = A[i][j] + B[i][j];
    return C;
}

Matrix subtract(const Matrix &A, const Matrix &B, int size) 
{
    Matrix C(size, vector<int>(size, 0));
    for (int i = 0; i < size; i++)
        for (int j = 0; j < size; j++)
            C[i][j] = A[i][j] - B[i][j];
    return C;
}

Matrix strassenMultiply(const Matrix &A, const Matrix &B, int size) 
{
    if (size == 1) {
        return {{A[0][0] * B[0][0]}};
    }

    int new_size = size / 2;
    Matrix A11(new_size, vector<int>(new_size, 0));
    Matrix A12(new_size, vector<int>(new_size, 0));
    Matrix A21(new_size, vector<int>(new_size, 0));
    Matrix A22(new_size, vector<int>(new_size, 0));
    Matrix B11(new_size, vector<int>(new_size, 0));
    Matrix B12(new_size, vector<int>(new_size, 0));
    Matrix B21(new_size, vector<int>(new_size, 0));
    Matrix B22(new_size, vector<int>(new_size, 0));

    for (int i = 0; i < new_size; i++) 
    {
        for (int j = 0; j < new_size; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + new_size];
            A21[i][j] = A[i + new_size][j];
            A22[i][j] = A[i + new_size][j + new_size];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + new_size];
            B21[i][j] = B[i + new_size][j];
            B22[i][j] = B[i + new_size][j + new_size];
        }
    }

    Matrix P = strassenMultiply(add(A11, A22, new_size), add(B11, B22, new_size), new_size);
    Matrix Q = strassenMultiply(add(A21, A22, new_size), B11, new_size);
    Matrix R = strassenMultiply(A11, subtract(B12, B22, new_size), new_size);
    Matrix S = strassenMultiply(A22, subtract(B21, B11, new_size), new_size);
    Matrix T = strassenMultiply(add(A11, A12, new_size), B22, new_size);
    Matrix U = strassenMultiply(subtract(A21, A11, new_size), add(B11, B12, new_size), new_size);
    Matrix V = strassenMultiply(subtract(A12, A22, new_size), add(B21, B22, new_size), new_size);

    Matrix C11 = add(subtract(add(P, S, new_size), T, new_size), V, new_size);
    Matrix C12 = add(R, T, new_size);
    Matrix C21 = add(Q, S, new_size);
    Matrix C22 = add(subtract(add(P, R, new_size), Q, new_size), U, new_size);

    Matrix C(size, vector<int>(size, 0));
    for (int i = 0; i < new_size; i++) {
        for (int j = 0; j < new_size; j++) {
            C[i][j] = C11[i][j];
            C[i][j + new_size] = C12[i][j];
            C[i + new_size][j] = C21[i][j];
            C[i + new_size][j + new_size] = C22[i][j];
        }
    }

    return C;
}

void printMatrix(const Matrix &M) {
    int rows = M.size();
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < rows; j++) {
            cout << M[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int n;
    cout << "Enter the value of n (must be power of 2): ";
    cin >> n;

    Matrix A(n, vector<int>(n, 0));
    Matrix B(n, vector<int>(n, 0));

    cout << "Enter Matrix A:\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> A[i][j];

    cout << "Enter Matrix B:\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> B[i][j];

    Matrix C = strassenMultiply(A, B, n);

    cout << "Resultant matrix C:\n";
    printMatrix(C);

    return 0;
}
13/02/2025, 7:37 pm - Ayush: <Media omitted>
15/02/2025, 1:54 pm - Ayush: Black T-shirt, shorts aur ek gamcha lete aaiyo
15/02/2025, 9:35 pm - Ayush: Kha h
15/02/2025, 9:35 pm - Ayush: Niche chal rha tahalne
15/02/2025, 9:35 pm - Ansh Gupta: Aa raha hu ruk 2min
16/02/2025, 2:08 pm - Ayush: Niche se kapde lete aana rahul ke pass se mere aur apne bhi
19/02/2025, 3:57 pm - Ayush: import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

# Generate 10 data points (5 for each class)
X = np.array([[1, 2], [2, 3], [3, 1], [4, 2], [5, 3],  # Class 1
              [6, 7], [7, 6], [8, 9], [9, 8], [10, 7]]) # Class 2
y = np.array([1, 1, 1, 1, 1, 2, 2, 2, 2, 2])

# New point to classify
new_point = np.array([[6, 5]])

# Plot the training points
plt.scatter(X[:5, 0], X[:5, 1], color='blue', label='Class 1')
plt.scatter(X[5:, 0], X[5:, 1], color='red', label='Class 2')
plt.scatter(new_point[:, 0], new_point[:, 1], color='green', marker='*', s=150, label='New Point')

# Train KNN classifier with Manhattan distance
knn = KNeighborsClassifier(n_neighbors=3, metric='manhattan')
knn.fit(X, y)

# Predict the class of the new point
predicted_label = knn.predict(new_point)
print(f'Predicted Class: {predicted_label[0]}')

# Show the plot
plt.legend()
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.title("KNN Classification with Manhattan Distance")
plt.show()
23/02/2025, 11:24 pm - Ansh Gupta: <Media omitted>
26/02/2025, 7:56 pm - Ansh Gupta: <Media omitted>
27/02/2025, 10:17 pm - Ayush: https://youtube.com/playlist?list=PLO-6jspot8AKg6Pov9fDHd3ys5_JlyUXv&si=vAGqvfJIgVxkKjDA
01/03/2025, 7:28 pm - Ayush: Smart health data preprocessing
Traffic prediction system
Edge AI
Federated learning
02/03/2025, 12:25 am - Ansh Gupta: <Media omitted>
02/03/2025, 12:25 am - Ansh Gupta: <Media omitted>
02/03/2025, 10:02 am - Ayush: CREATE DATABASE company_db;
USE company_db;

CREATE TABLE Department (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50),
    location VARCHAR(100),
    budget DECIMAL(15,2)
);

CREATE TABLE Employee (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    age INT CHECK (age BETWEEN 18 AND 65),
    dept_id INT,
    salary DECIMAL(10,2) CHECK (salary > 20000),
    email VARCHAR(100) UNIQUE,
    FOREIGN KEY (dept_id) REFERENCES Department(dept_id)
);

CREATE TABLE Project (
    proj_id INT PRIMARY KEY,
    proj_name VARCHAR(100),
    dept_id INT,
    start_date DATE,
    end_date DATE,
    budget DECIMAL(15,2),
    FOREIGN KEY (dept_id) REFERENCES Department(dept_id)
);

ALTER TABLE Employee ADD phone_number VARCHAR(15) UNIQUE;
ALTER TABLE Employee MODIFY COLUMN age INT CHECK (age BETWEEN 18 AND 65);
ALTER TABLE Employee DROP COLUMN email;

INSERT INTO Department (dept_id, dept_name, location, budget) VALUES
(1, 'HR', 'New York', 500000),
(2, 'IT', 'San Francisco', 800000),
(3, 'Finance', 'Chicago', 600000),
(4, 'Marketing', 'Los Angeles', 700000),
(5, 'Operations', 'Dallas', 550000);

INSERT INTO Employee (emp_id, name, age, dept_id, salary, phone_number) VALUES
(1, 'Alice', 30, 1, 50000, '1234567890'),
(2, 'Bob', 40, 2, 60000, '0987654321'),
(3, 'Charlie', 35, 3, 55000, '1122334455'),
(4, 'David', 28, 4, 48000, '2233445566'),
(5, 'Emma', 45, 5, 70000, '3344556677');

UPDATE Employee SET phone_number = '9876543210' WHERE emp_id = 1;
UPDATE Employee SET phone_number = '8765432109' WHERE emp_id = 2;
UPDATE Employee SET phone_number = '7654321098' WHERE emp_id = 3;
UPDATE Employee SET phone_number = '6543210987' WHERE emp_id = 4;
UPDATE Employee SET phone_number = '5432109876' WHERE emp_id = 5;

INSERT INTO Project (proj_id, proj_name, dept_id, start_date, end_date, budget) VALUES
(101, 'AI Research', 2, '2024-01-01', '2025-06-30', 200000),
(102, 'Market Expansion', 4, '2024-03-15', '2025-09-15', 300000),
(103, 'Cloud Migration', 2, '2023-12-01', '2024-12-31', 150000),
(104, 'Financial Audit', 3, '2024-02-10', '2024-11-30', 180000),
(105, 'Employee Training', 1, '2024-05-01', '2024-12-01', 100000);


UPDATE Employee SET salary = salary * 1.10 WHERE emp_id = 3;

DELETE FROM Employee WHERE dept_id = (SELECT dept_id FROM Department WHERE dept_name = 'HR');

ALTER TABLE Employee ADD CONSTRAINT unique_salary_per_department UNIQUE (salary, dept_id);

SELECT Employee.emp_id, Employee.name, Employee.salary, Department.dept_name 
FROM Employee 
INNER JOIN Department ON Employee.dept_id = Department.dept_id;

SELECT Department.dept_name, COUNT(Employee.emp_id) AS employee_count 
FROM Department 
LEFT JOIN Employee ON Department.dept_id = Employee.dept_id 
GROUP BY Department.dept_name;

SELECT Department.dept_name, SUM(Employee.salary) AS total_salary_expense 
FROM Employee 
JOIN Department ON Employee.dept_id = Department.dept_id 
GROUP BY Department.dept_name;

SELECT MAX(salary) AS highest_salary, MIN(salary) AS lowest_salary FROM Employee;

select * from employee;
07/03/2025, 11:42 pm - Ayush: create database instiute;
use instiute;

-- Department Table
CREATE TABLE Department (
    Department_ID INT PRIMARY KEY,
    Department_Name VARCHAR(100) NOT NULL
);

-- Course Table
CREATE TABLE Course (
    Course_ID INT PRIMARY KEY,
    Course_Name VARCHAR(100) NOT NULL,
    Credits INT NOT NULL,
    Department_ID INT,
    Course_Type VARCHAR(10) CHECK (Course_Type IN ('Lab', 'Theory')),
    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)
);

-- Faculty Table
CREATE TABLE Faculty (
    Faculty_ID INT PRIMARY KEY,
    Faculty_Name VARCHAR(100) NOT NULL,
    Department_ID INT,
    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)
);

-- Student Table
CREATE TABLE Student (
    Student_ID INT PRIMARY KEY,
    Student_Name VARCHAR(100) NOT NULL,
    DOB DATE NOT NULL,
    Email VARCHAR(100) UNIQUE,
    Department_ID INT,
    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)
);

-- Parent_Details Table
CREATE TABLE Parent_Details (
    Parent_ID INT PRIMARY KEY,
    Student_ID INT,
    Father_Name VARCHAR(100),
    Mother_Name VARCHAR(100),
    Guardian_Name VARCHAR(100),
    Contact_Number VARCHAR(15),
    Address VARCHAR(200),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
);

-- Enrollment Table
CREATE TABLE Enrollment (
    Enrollment_ID INT PRIMARY KEY,
    Student_ID INT,
    Course_ID INT,
    Grade VARCHAR(2),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID)
);

-- Teaches Table
CREATE TABLE Teaches (
    Faculty_ID INT,
    Course_ID INT,
    Semester VARCHAR(10),
    Year INT,
    PRIMARY KEY (Faculty_ID, Course_ID, Semester, Year),
    FOREIGN KEY (Faculty_ID) REFERENCES Faculty(Faculty_ID),
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID)
);

-- Marksheet Table
CREATE TABLE Marksheet (
    Marksheet_ID INT PRIMARY KEY,
    Student_ID INT,
    Semester VARCHAR(10),
    Year INT,
    GPA DECIMAL(3, 2),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
);

-- Attendance Table
CREATE TABLE Attendance (
    Attendance_ID INT PRIMARY KEY,
    Student_ID INT,
    Course_ID INT,
    Month VARCHAR(10),
    Total_Classes INT,
    Classes_Attended INT,
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID)
);

-- Course_Registration Table
CREATE TABLE Course_Registration (
    Registration_ID INT PRIMARY KEY,
    Student_ID INT,
    Course_ID INT,
    Semester VARCHAR(10),
    Year INT,
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID)
);

-- Student_Credits Table
CREATE TABLE Student_Credits (
    Student_ID INT,
    Semester VARCHAR(10),
    Year INT,
    Total_Credits INT CHECK (Total_Credits <= 30), -- Assuming 30 is the credit limit
    PRIMARY KEY (Student_ID, Semester, Year),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
);

-- Placement_Record Table
CREATE TABLE Placement_Record (
    Student_ID INT PRIMARY KEY,
    10th_Marks DECIMAL(4, 2),
    12th_Marks DECIMAL(4, 2),
    CGPA DECIMAL(3, 2),
    Placement_Status VARCHAR(20),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
);

-- Company Table
CREATE TABLE Company (
    Company_ID INT PRIMARY KEY,
    Company_Name VARCHAR(100) NOT NULL,
    Eligibility_Criteria VARCHAR(200),
    Job_Designation VARCHAR(100),
    CTC_Offered DECIMAL(10, 2)
);

-- Research Table
CREATE TABLE Research (
    Research_ID INT PRIMARY KEY,
    Title VARCHAR(200) NOT NULL,
    Start_Date DATE,
    End_Date DATE,
    Department_ID INT,
    Faculty_ID INT,
    PI INT,
    CO_PIs TEXT,
    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID),
    FOREIGN KEY (Faculty_ID) REFERENCES Faculty(Faculty_ID),
    FOREIGN KEY (PI) REFERENCES Faculty(Faculty_ID)
);

-- Publication Table
CREATE TABLE Publication (
    Publication_ID INT PRIMARY KEY,
    Title VARCHAR(200) NOT NULL,
    Publication_Date DATE,
    Journal_Name VARCHAR(100),
    Faculty_ID INT,
    Research_ID INT,
    FOREIGN KEY (Faculty_ID) REFERENCES Faculty(Faculty_ID),
    FOREIGN KEY (Research_ID) REFERENCES Research(Research_ID)
);

-- Insert into Department
INSERT INTO Department (Department_ID, Department_Name) VALUES
(1, 'Computer Science'),
(2, 'Electrical Engineering'),
(3, 'Mechanical Engineering'),
(4, 'Mathematics'),
(5, 'Physics');

SELECT * FROM Department;

-- Insert into Course
INSERT INTO Course (Course_ID, Course_Name, Credits, Department_ID, Course_Type) VALUES
(101, 'Database Systems', 4, 1, 'Theory'),
(102, 'Machine Learning', 3, 1, 'Lab'),
(103, 'Circuit Theory', 3, 2, 'Theory'),
(104, 'Thermodynamics', 4, 3, 'Theory'),
(105, 'Quantum Mechanics', 3, 5, 'Theory');

SELECT * FROM Course;

-- Insert into Faculty
INSERT INTO Faculty (Faculty_ID, Faculty_Name, Department_ID) VALUES
(201, 'Dr. Smith', 1),
(202, 'Dr. Johnson', 2),
(203, 'Dr. Williams', 3),
(204, 'Dr. Brown', 4),
(205, 'Dr. Davis', 5);

SELECT * FROM Faculty;

-- Insert into Student
INSERT INTO Student (Student_ID, Student_Name, DOB, Email, Department_ID) VALUES
(301, 'Alice', '2000-01-15', 'alice@example.com', 1),
(302, 'Bob', '2000-05-20', 'bob@example.com', 2),
(303, 'Charlie', '2000-07-10', 'charlie@example.com', 3),
(304, 'David', '2000-03-25', 'david@example.com', 4),
(305, 'Eve', '2000-09-30', 'eve@example.com', 5);

SELECT * FROM Student;

-- Insert into Parent_Details
INSERT INTO Parent_Details (Parent_ID, Student_ID, Father_Name, Mother_Name, Guardian_Name, Contact_Number, Address) VALUES
(401, 301, 'John Doe', 'Jane Doe', 'John Doe', '1234567890', '123 Main St'),
(402, 302, 'Mike Smith', 'Sarah Smith', 'Mike Smith', '2345678901', '456 Elm St'),
(403, 303, 'James Brown', 'Emily Brown', 'James Brown', '3456789012', '789 Oak St'),
(404, 304, 'Robert Johnson', 'Laura Johnson', 'Robert Johnson', '4567890123', '321 Pine St'),
(405, 305, 'Michael Davis', 'Linda Davis', 'Michael Davis', '5678901234', '654 Maple St');

SELECT * FROM Parent_Details;

-- Insert into Enrollment
INSERT INTO Enrollment (Enrollment_ID, Student_ID, Course_ID, Grade) VALUES
(501, 301, 101, 'A'),
(502, 302, 103, 'B'),
(503, 303, 104, 'C'),
(504, 304, 105, 'A'),
(505, 305, 102, 'B');

SELECT * FROM Enrollment;

-- Insert into Teaches
INSERT INTO Teaches (Faculty_ID, Course_ID, Semester, Year) VALUES
(201, 101, 'Fall', 2023),
(202, 103, 'Spring', 2023),
(203, 104, 'Fall', 2023),
(204, 105, 'Spring', 2023),
(205, 102, 'Fall', 2023);

SELECT * FROM Teaches;

-- Insert into Marksheet
INSERT INTO Marksheet (Marksheet_ID, Student_ID, Semester, Year, GPA) VALUES
(601, 301, 'Fall', 2023, 3.8),
(602, 302, 'Spring', 2023, 3.5),
(603, 303, 'Fall', 2023, 3.2),
(604, 304, 'Spring', 2023, 3.9),
(605, 305, 'Fall', 2023, 3.7);

SELECT * FROM Marksheet;

-- Insert into Attendance
INSERT INTO Attendance (Attendance_ID, Student_ID, Course_ID, Month, Total_Classes, Classes_Attended) VALUES
(701, 301, 101, 'October', 20, 18),
(702, 302, 103, 'November', 18, 15),
(703, 303, 104, 'December', 22, 20),
(704, 304, 105, 'January', 20, 19),
(705, 305, 102, 'February', 18, 17);

SELECT * FROM Attendance;

-- Insert into Course_Registration
INSERT INTO Course_Registration (Registration_ID, Student_ID, Course_ID, Semester, Year) VALUES
(801, 301, 101, 'Fall', 2023),
(802, 302, 103, 'Spring', 2023),
(803, 303, 104, 'Fall', 2023),
(804, 304, 105, 'Spring', 2023),
(805, 305, 102, 'Fall', 2023);

SELECT * FROM Course_Registration;

-- Insert into Student_Credits
INSERT INTO Student_Credits (Student_ID, Semester, Year, Total_Credits) VALUES
(301, 'Fall', 2023, 12),
(302, 'Spring', 2023, 10),
(303, 'Fall', 2023, 14),
(304, 'Spring', 2023, 11),
(305, 'Fall', 2023, 13);

SELECT * FROM Student_Credits;

-- Insert into Placement_Record
INSERT INTO Placement_Record (Student_ID, 10th_Marks, 12th_Marks, CGPA, Placement_Status) VALUES
(301, 95.0, 90.0, 3.8, 'Placed'),
(302, 85.0, 80.0, 3.5, 'Not Placed'),
(303, 90.0, 85.0, 3.2, 'Placed'),
(304, 92.0, 88.0, 3.9, 'Placed'),
(305, 88.0, 82.0, 3.7, 'Not Placed');

SELECT * FROM Placement_Record;

-- Insert into Company
INSERT INTO Company (Company_ID, Company_Name, Eligibility_Criteria, Job_Designation, CTC_Offered) VALUES
(901, 'Tech Corp', 'CGPA >= 3.5', 'Software Engineer', 1200000),
(902, 'Electro Ltd', 'CGPA >= 3.0', 'Hardware Engineer', 1000000),
(903, 'Mech Solutions', 'CGPA >= 3.2', 'Mechanical Engineer', 1100000),
(904, 'Math Innovate', 'CGPA >= 3.8', 'Data Scientist', 1300000),
(905, 'Physics World', 'CGPA >= 3.7', 'Research Scientist', 1400000);

SELECT * FROM Company;

-- Insert into Research
INSERT INTO Research (Research_ID, Title, Start_Date, End_Date, Department_ID, Faculty_ID, PI, CO_PIs) VALUES
(1001, 'AI in Healthcare', '2023-01-01', '2023-12-31', 1, 201, 201, '202,203'),
(1002, 'Renewable Energy', '2023-02-01', '2023-11-30', 2, 202, 202, '204,205'),
(1003, 'Robotics', '2023-03-01', '2023-10-31', 3, 203, 203, '201,202'),
(1004, 'Number Theory', '2023-04-01', '2023-09-30', 4, 204, 204, '203,205'),
(1005, 'Quantum Computing', '2023-05-01', '2023-08-31', 5, 205, 205, '201,204');

SELECT * FROM Research;

-- Insert into Publication
INSERT INTO Publication (Publication_ID, Title, Publication_Date, Journal_Name, Faculty_ID, Research_ID) VALUES
(1101, 'AI in Healthcare: A Review', '2023-06-15', 'Journal of AI', 201, 1001),
(1102, 'Renewable Energy Trends', '2023-07-20', 'Energy Journal', 202, 1002),
(1103, 'Robotics Advancements', '2023-08-25', 'Robotics Today', 203, 1003),
(1104, 'Number Theory Insights', '2023-09-30', 'Math Journal', 204, 1004),
(1105, 'Quantum Computing Breakthroughs', '2023-10-05', 'Physics Review', 205, 1005);

SELECT * FROM Publication;

SELECT Student_ID, Student_Name
FROM Student
WHERE Department_ID = 1;
08/03/2025, 2:16 am - Ansh Gupta: #include <iostream>
#include <vector>
using namespace std;

int minKey(vector<int>& key, vector<bool>& inMST, int V) {
    int min = INT_MAX, min_index = -1;

    for (int v = 0; v < V; v++) {
        if (!inMST[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

void primMST(vector<vector<int>>& graph, int V) {
    vector<int> parent(V, -1);  
    vector<int> key(V, INT_MAX);  
    vector<bool> inMST(V, false);  

    key[0] = 0;  

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, inMST, V);
        inMST[u] = true;  

        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !inMST[v] && graph[u][v] < key[v]) {
                key[v] = graph[u][v];
                parent[v] = u;
            }
        }
    }

    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; i++)
        cout << parent[i] << " - " << i << "\t" << graph[i][parent[i]] << endl;
}

int main() {
    int V;
    cout << "Enter number of vertices: ";
    cin >> V;
    
    vector<vector<int>> graph(V, vector<int>(V));
    cout << "Enter adjacency matrix (use 0 for no edge):\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }

    cout << "Minimum Spanning Tree using Prim's Algorithm:\n";
    primMST(graph, V);

    return 0;
}
09/03/2025, 3:16 pm - Ansh Gupta: https://criccircuslive.pages.dev/primeh/
09/03/2025, 11:03 pm - Ansh Gupta: The tutorial is based on Linear Algebra and Matrix Theory, specifically focusing on Fields and Vector Spaces. To solve the problems in the tutorial, you should study the following topics:

Normed Vector Spaces

Definition of a norm
Properties of a norm (positivity, scalability, triangle inequality)
Common norms:
Supremum norm (
∥
⋅
∥
∞
∥⋅∥ 
∞
​
 )
𝐿
1
L 
1
 -norm (
∥
⋅
∥
1
∥⋅∥ 
1
​
 )
𝐿
𝑝
L 
p
 -norm (
∥
⋅
∥
𝑝
∥⋅∥ 
p
​
 )
Linear Operators and Operator Norms

Definition of a linear operator
How to compute the operator norm
Understanding different norms in 
𝑅
𝑛
R 
n
 
Metric Spaces

Definition of a metric
Triangle inequality and properties of a metric
Examples of valid and invalid metrics
Sequence Spaces (
𝑙
𝑝
l 
p
​
  Spaces)

Definition of 
𝑙
𝑝
l 
p
​
  spaces
Convergence criteria in 
𝑙
𝑝
l 
p
​
  spaces
Norm definitions in these spaces
Equivalence of Norms

Definition of norm equivalence
Proving norms are not equivalent
If you are new to these topics, you should first revise normed vector spaces and linear operators before solving the problems. Let me know if you need explanations for any specific question!
14/03/2025, 1:56 am - Ansh Gupta: Take a look at this WROGN Sneakers For Men on Flipkart https://dl.flipkart.com/s/H3Ft1vuuuN
14/03/2025, 4:18 pm - Ansh Gupta: <Media omitted>
17/03/2025, 10:32 pm - Ayush: Sun na koi movie bata na love story
17/03/2025, 11:40 pm - Ansh Gupta: https://youtu.be/vkuiI430d_0
17/03/2025, 11:41 pm - Ansh Gupta: Geeta govindam
17/03/2025, 11:41 pm - Ansh Gupta: Fidaa
17/03/2025, 11:42 pm - Ansh Gupta: https://youtu.be/zAVmwt_U4c0
18/03/2025, 2:24 am - Ansh Gupta: Phoch gaye kya
18/03/2025, 2:51 am - Ayush: Haa abhi pahuche
18/03/2025, 1:56 pm - Ansh Gupta: Baith gaye kya train mai
18/03/2025, 2:04 pm - Ayush: Subah 6 bje baithe the
18/03/2025, 2:04 pm - Ayush: Abhi nagpur pahuchenge 3.20 pe
18/03/2025, 2:07 pm - Ansh Gupta: Late hai kya train
18/03/2025, 2:07 pm - Ayush: Nahi
18/03/2025, 2:07 pm - Ayush: On time hi h
18/03/2025, 2:07 pm - Ayush: Subah 6 .20 pe tha
19/03/2025, 5:47 pm - Ansh Gupta: 
20/03/2025, 12:07 pm - Ansh Gupta: Kya kar raha hai ye anurag
20/03/2025, 12:07 pm - Ansh Gupta: Itna dot
20/03/2025, 1:32 pm - Ansh Gupta: 
20/03/2025, 1:33 pm - Ansh Gupta: This message was deleted
21/03/2025, 12:20 am - Ansh Gupta: This message was deleted
22/03/2025, 4:54 pm - Ansh Gupta: Stake ka kya karna hai
22/03/2025, 4:55 pm - Ansh Gupta: Aur aaj kispe lagana hai
22/03/2025, 4:56 pm - Ayush: Kre kya start
22/03/2025, 4:56 pm - Ansh Gupta: Bata kya karna hai
22/03/2025, 4:56 pm - Ansh Gupta: In dono ne toh kkr pe daal diya
22/03/2025, 4:57 pm - Ansh Gupta: Tere paas bhi  id hai na ek
22/03/2025, 4:57 pm - Ansh Gupta: Ek toh bhosdike tu notification on karle
22/03/2025, 5:00 pm - Ayush: Are apni wali me daal na 500
22/03/2025, 5:00 pm - Ayush: Mere 250
22/03/2025, 5:00 pm - Ansh Gupta: Laga toh dunga par dhaka bhi bol raha hai toh 750 daalna padega
22/03/2025, 5:00 pm - Ayush: Laga jo mn h tera
22/03/2025, 5:01 pm - Ansh Gupta: Kispe lagana hai
22/03/2025, 5:01 pm - Ayush: Merese puchega to Rcb
22/03/2025, 5:01 pm - Ansh Gupta: Mai bhi rcb hi soch raha hu par eden garden Mai match hai yrr
22/03/2025, 5:02 pm - Ayush: Lagao na maa chudaye
22/03/2025, 5:02 pm - Ansh Gupta: Toh rcb pe lagadu
22/03/2025, 5:03 pm - Ansh Gupta: Ek kaam karte hai 2 ya 3 match rukte hai fir lagate hai
22/03/2025, 5:04 pm - Ansh Gupta: Pata chal jayega kaisa chal raha hai uske baad se lagate hai
22/03/2025, 5:14 pm - Ayush: Thik h tera man
22/03/2025, 9:28 pm - Ansh Gupta: Arey teri almirah ki chabi kaha hai
22/03/2025, 9:28 pm - Ansh Gupta: Sarso ka tel Lena hai
22/03/2025, 10:49 pm - Ayush: Lgaya rha aaj
22/03/2025, 10:49 pm - Ayush: Jit gyi na RCB
22/03/2025, 11:19 pm - Ansh Gupta: Nahi lagaya bhai
22/03/2025, 11:19 pm - Ansh Gupta: Voh toh pata hi tha
23/03/2025, 3:20 pm - Ansh Gupta: Maine 900 rupay deposit kiye hai teeno ke 300
23/03/2025, 3:20 pm - Ansh Gupta: Aur 750 ki bet lagadi
23/03/2025, 3:21 pm - Ayush: Okay
23/03/2025, 3:21 pm - Ayush: Kitna x tha
23/03/2025, 3:21 pm - Ansh Gupta: 1.52
23/03/2025, 3:21 pm - Ayush: Kam hi h
23/03/2025, 3:21 pm - Ansh Gupta: Haan srh pe kam hi deraha tha
23/03/2025, 3:22 pm - Ansh Gupta: Rr pe jyada hai
23/03/2025, 3:22 pm - Ayush: Amit prashant to chud gye honge kl
23/03/2025, 3:22 pm - Ansh Gupta: Nahi Amit nahi lagaya tha sirf prashant hi lagaya tha
23/03/2025, 3:23 pm - Ansh Gupta: Par voh dono account pe lagaya tha
23/03/2025, 3:23 pm - Ansh Gupta: Ek rcb aur ek kkr
23/03/2025, 3:23 pm - Ansh Gupta: Toh Bach Gaya
23/03/2025, 3:23 pm - Ayush: To Bach gya
23/03/2025, 3:23 pm - Ansh Gupta: Kkr vale pe cashout kar liya
23/03/2025, 3:24 pm - Ansh Gupta: 50 rupay nikal liye
23/03/2025, 3:24 pm - Ayush: Tohprofit hi hua hoga overall
23/03/2025, 3:24 pm - Ansh Gupta: Aur rcb vale pe 975 mila
23/03/2025, 3:24 pm - Ansh Gupta: Haan 25 rupay ka profit
23/03/2025, 3:24 pm - Ayush: Thik
23/03/2025, 3:24 pm - Ayush: Kl niklenge hm
23/03/2025, 3:24 pm - Ansh Gupta: Raat ko
23/03/2025, 3:25 pm - Ayush: Raat me 8 bje train h
23/03/2025, 3:25 pm - Ayush: Secunderabad parso sham me 4 bje fir bus se jitna time lge
23/03/2025, 3:25 pm - Ansh Gupta: 26 ko aaoge yaha pe
23/03/2025, 3:25 pm - Ansh Gupta: Fir toh 25 ko hi aajaoge
23/03/2025, 3:26 pm - Ayush: 25 ko raat raat tk ya 26 ko maybe 12 bje  ke baad ,, bus pe depend karta h
23/03/2025, 3:26 pm - Ansh Gupta: Abhi gaand fat gayi thi paise hi deposit nahi hue the
23/03/2025, 3:26 pm - Ansh Gupta: Phocha deti hai 5 se 6 ghante mai
23/03/2025, 7:46 pm - Ayush: Mi vs csk me lagaya h kya ?
23/03/2025, 7:46 pm - Ayush: Srh to jit gya
23/03/2025, 8:39 pm - Ansh Gupta: Nahi uspe nahi lagaya
24/03/2025, 5:02 pm - Ansh Gupta: Kispe lagana hai
24/03/2025, 5:02 pm - Ansh Gupta: Aur kitna lagana hai
24/03/2025, 8:43 pm - Ayush: Dekh lena ansh withdraw kar lena agar harne lage toh .
24/03/2025, 8:46 pm - Ansh Gupta: Haan vahi karna padega
24/03/2025, 8:47 pm - Ansh Gupta: Par agar chhaka maar dega toh withdraw kyo karenge
24/03/2025, 8:47 pm - Ayush: Thik
24/03/2025, 8:48 pm - Ayush: To wo Paisa mil jayega na
24/03/2025, 10:35 pm - Ayush: Withdraw kar liya h ya nhi abhi ?
24/03/2025, 10:35 pm - Ansh Gupta: Nahi kiya bhai 120 de raha hai
24/03/2025, 10:36 pm - Ayush: Thik h dekho Stubbs kuch karta h toh thik , nhi toh withdraw kar lena
24/03/2025, 10:47 pm - Ansh Gupta: 317
24/03/2025, 10:47 pm - Ansh Gupta: Dikha raha hai
24/03/2025, 10:47 pm - Ansh Gupta: Cashout marlu
24/03/2025, 10:53 pm - Ayush: Nhi bhai
24/03/2025, 10:53 pm - Ayush: Jit skte h
24/03/2025, 10:53 pm - Ayush: Cashout nhi kiya na
24/03/2025, 10:53 pm - Ansh Gupta: Kar diya
24/03/2025, 10:53 pm - Ayush: Bhak chutiya
24/03/2025, 10:53 pm - Ansh Gupta: 600 cashout maar hai
24/03/2025, 10:54 pm - Ayush: Kitna nikala ?
24/03/2025, 10:54 pm - Ansh Gupta: 600
24/03/2025, 10:54 pm - Ayush: Overall loss h ya profit?
24/03/2025, 10:54 pm - Ansh Gupta: Abhi hum log 90 rupay profit mai hai
24/03/2025, 10:54 pm - Ayush: Thik h or ye jit skte h ab toh easy lag rha h
24/03/2025, 10:54 pm - Ansh Gupta: Obviously bhai profit mai hai isliye cashout maar liya
24/03/2025, 10:54 pm - Ansh Gupta: Kuch keh nahi sakte the
24/03/2025, 10:55 pm - Ansh Gupta: Ek wicket girte toh chud jate
24/03/2025, 10:55 pm - Ansh Gupta: Is wajah se soch loss nahi hona chahiye
24/03/2025, 10:55 pm - Ansh Gupta: Toh cashout maar diya
24/03/2025, 10:55 pm - Ayush: Haa us samay jayda mushkil tha , ab Thora easy h
24/03/2025, 10:55 pm - Ansh Gupta: Dhaka bhi ye hi bola
24/03/2025, 10:55 pm - Ayush: Thik h koi nhi
24/03/2025, 10:55 pm - Ansh Gupta: Ab ye thodi na pata tha
24/03/2025, 11:03 pm - Ayush: Good decision 👍
24/03/2025, 11:06 pm - Ayush: Fir palat gya match
24/03/2025, 11:17 pm - Ansh Gupta: Chud gaye
24/03/2025, 11:18 pm - Ansh Gupta: Par koi ni 90 rupay profit
24/03/2025, 11:18 pm - Ayush: Jit gaya delhi
24/03/2025, 11:18 pm - Ayush: Jab cashout nhi karte toh haar jati bc
24/03/2025, 11:18 pm - Ansh Gupta: Haan vahi
24/03/2025, 11:18 pm - Ansh Gupta: Koi nii
24/03/2025, 11:18 pm - Ayush: Thik
24/03/2025, 11:57 pm - Ansh Gupta: Ayush tera I'd password bhejna stake ka
25/03/2025, 12:05 am - Ansh Gupta: Email pe stake ka code aaya hoga
25/03/2025, 12:05 am - Ansh Gupta: Bhej bhai
25/03/2025, 12:06 am - Ayush: 391122
25/03/2025, 4:14 pm - Ansh Gupta: Phoch gaye kya hyderabad
27/03/2025, 2:01 pm - Ayush: Khula h 30 min tak , jaldi chalo
27/03/2025, 3:38 pm - Ayush: <Media omitted>
27/03/2025, 3:58 pm - Ayush: https://chatgpt.com/share/67e5284c-dcec-8012-a782-5016587bd6e2
31/03/2025, 12:36 am - Ayush: 
31/03/2025, 12:45 am - Ayush: 
31/03/2025, 9:14 pm - Ayush: iiit raichur,near sln college,bheema hostel, , yermarus camp, 69X8 F9G, Raichur, India

Click to save: https://link.zomato.com/xqzv/9d87f81b?id=411077c7ccc2de5b

This is a one-time link and is valid for the next 24 hours only.
01/04/2025, 4:11 pm - Ansh Gupta: Ishani ka naya naam thar hai 😂😂
02/04/2025, 6:21 pm - Ayush: Bhej lga deta hu stake pe
02/04/2025, 6:42 pm - Ayush: <Media omitted>
02/04/2025, 7:30 pm - Ansh Gupta: Laga de bhai bhejdunga
02/04/2025, 7:38 pm - Ayush: Lga diya hu
02/04/2025, 7:39 pm - Ansh Gupta: Toh ab chud gaye
02/04/2025, 7:48 pm - Ayush: Whi hota h maa ki chut
02/04/2025, 8:00 pm - Ayush: Siraj to aag laga diya bc
13/04/2025, 2:36 am - Ayush: Here are layers of three major inputs in the class:


a) 17 SDGs
b) 22 chapters' titles from this course
c) 5 elements of Viksit Bharat as follows
Empowered Citizens 
Thriving and Sustainable Economy   
Technology & Innovation Leadership  
Effective Governance  
Bharat as Vishwabandhu
Consider any one of the layer as the starting point and explode a mindmap to connect every other node (baloon!). It could be fully connected map or lesser than that, if you are not able to connect all.

You may conclude by a few lines of learning. And another more important line - your hopefulness of Viksit Bharat @2047. the 22 chapters are: 
 
 1 Economic Environment of Business  
 2 Socio-cultural and Politico-legal Environment 
 3 Changing Role of Government Scenario
 
 4 Structural Dimensions of Indian Economy
 5 Structure of Indian Industry
 6 Public Sector in India  
 7 Private Sector in India
 8 Small Sector in India
 9 Sickness in Indian Industry
 
 10 Planning Goals and Strategies 
 11 Evolution of Industrial Policy Controls 
12 Regulatory and Promotional Framework  
 13 India’s Foreign Trade
 14 India’s Balance of Payments
 15 Export and Import Policy
 16 Foreign Capital and Collaborations
 17 India’s External Debt
 
 18 Industrial Policy of 1991
 19 Economic Reforms: Liberalisation, Globalisation
 and Privatisation
 20 Financial Sector Reforms 
 21 Fiscal Sector Reforms
 22 Economic Reforms and Social Justice
 now i want you to give me content for a mind map related to the above prompt. you start with viksit bharat, then its 5 elements, then their connections with the chapters and then at last the chapters connections with the sdgs. remember every chapter must be included in some way, and you must give the path of how the mind map is connected (which element to which chapters, and which chapter to which sdgs) as mentioned try to make a fully connected mind map, or atleast very close to the fully connected mind map . also do not connect or make some totally irrelevant connections, each connection must be justifiable.
13/04/2025, 2:37 am - Ayush: there are some chapters that are included in more that one element of viksit bharat, so the sdgs linked to that connected may be affected but you have provided overall chapterwise sdgs connection. change that part. and next instead of a single mind map, consider 5 sub mind maps for each element of the viksit bharat. now i want you to give the structure in that manner. also for each connection as for how the element's connection to connected chapters and those chapters connection with the sdgs make sense (example-> element 1-> chapter 1->all sdgs connected to it give 1-3 lines of explaination )
13/04/2025, 2:41 am - Ayush: https://app.mindmup.com/map/new/1744489132888
13/04/2025, 8:58 pm - Ayush: Kya khana h gandu ?
14/04/2025, 3:57 pm - Ayush: Dear Students,

•The goal of this assignment is to provide hands-on experience in data warehousing and data mining by working with open-source datasets and implementing preprocessing techniques.

•Part 1: Download Five Open-Source Datasets related to DWDM

•Part 2:Python Program for Database and ETL/Preprocessing

•Write a python program to perform four different ETL/data preprocessing or  steps on part-1.

•Part 3: Perform Classification or Regression Task on your choice of data from part-1
through part-2

•Deliverables: a PDF report detailing the datasets, methods, results using metrics, visualization,
conclusions/interpreting results, etc.

Instructions:
Solve all the tasks listed below:
All answers must be written in a document with proper formatting.
Execute the code using any tool of your choice. Include the links of the data sets, references, etc.
Capture screenshots of the output results and include them in the document.
Ensure originality; plagiarism will not be tolerated.

Submission Instructions.
Name the zip file as: YourID_DWDMAssignment.zip.
A word document file exported to PDF summarizing all tasks.
Upload the single zipped file to Google Classroom under the assignment.
now first give me python code in a .ipynb manner and it must complete the given above tasks and in the  classification or regression tasks perform 3 classification tasks and 2 regression task on the random datasets from above. now give the whole code for this
14/04/2025, 6:39 pm - Ayush: <Media omitted>
14/04/2025, 10:44 pm - Ayush: <Media omitted>
14/04/2025, 11:21 pm - Ayush: create database instiute;
use instiute;


-- Department Table
CREATE TABLE Department (
    Department_ID INT PRIMARY KEY,
    Department_Name VARCHAR(100) NOT NULL
);

-- Course Table
CREATE TABLE Course (
    Course_ID INT PRIMARY KEY,
    Course_Name VARCHAR(100) NOT NULL,
    Credits INT NOT NULL,
    Department_ID INT,
    Course_Type VARCHAR(10) CHECK (Course_Type IN ('Lab', 'Theory')),
    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)
);

-- Faculty Table
CREATE TABLE Faculty (
    Faculty_ID INT PRIMARY KEY,
    Faculty_Name VARCHAR(100) NOT NULL,
    Department_ID INT,
    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)
);

-- Student Table
CREATE TABLE Student (
    Student_ID INT PRIMARY KEY,
    Student_Name VARCHAR(100) NOT NULL,
    DOB DATE NOT NULL,
    Email VARCHAR(100) UNIQUE,
    Department_ID INT,
    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID)
);

-- Parent_Details Table
CREATE TABLE Parent_Details (
    Parent_ID INT PRIMARY KEY,
    Student_ID INT,
    Father_Name VARCHAR(100),
    Mother_Name VARCHAR(100),
    Guardian_Name VARCHAR(100),
    Contact_Number VARCHAR(15),
    Address VARCHAR(200),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
);

-- Enrollment Table
CREATE TABLE Enrollment (
    Enrollment_ID INT PRIMARY KEY,
    Student_ID INT,
    Course_ID INT,
    Grade VARCHAR(2),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID)
);

-- Teaches Table
CREATE TABLE Teaches (
    Faculty_ID INT,
    Course_ID INT,
    Semester VARCHAR(10),
    Year INT,
    PRIMARY KEY (Faculty_ID, Course_ID, Semester, Year),
    FOREIGN KEY (Faculty_ID) REFERENCES Faculty(Faculty_ID),
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID)
);

-- Marksheet Table
CREATE TABLE Marksheet (
    Marksheet_ID INT PRIMARY KEY,
    Student_ID INT,
    Semester VARCHAR(10),
    Year INT,
    GPA DECIMAL(3, 2),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
);

-- Attendance Table
CREATE TABLE Attendance (
    Attendance_ID INT PRIMARY KEY,
    Student_ID INT,
    Course_ID INT,
    Month VARCHAR(10),
    Total_Classes INT,
    Classes_Attended INT,
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID)
);

-- Course_Registration Table
CREATE TABLE Course_Registration (
    Registration_ID INT PRIMARY KEY,
    Student_ID INT,
    Course_ID INT,
    Semester VARCHAR(10),
    Year INT,
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID)
);

-- Student_Credits Table
CREATE TABLE Student_Credits (
    Student_ID INT,
    Semester VARCHAR(10),
    Year INT,
    Total_Credits INT CHECK (Total_Credits <= 30), -- Assuming 30 is the credit limit
    PRIMARY KEY (Student_ID, Semester, Year),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
);

-- Placement_Record Table
CREATE TABLE Placement_Record (
    Student_ID INT PRIMARY KEY,
    10th_Marks DECIMAL(4, 2),
    12th_Marks DECIMAL(4, 2),
    CGPA DECIMAL(3, 2),
    Placement_Status VARCHAR(20),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
);

-- Company Table
CREATE TABLE Company (
    Company_ID INT PRIMARY KEY,
    Company_Name VARCHAR(100) NOT NULL,
    Eligibility_Criteria VARCHAR(200),
    Job_Designation VARCHAR(100),
    CTC_Offered DECIMAL(10, 2)
);

-- Research Table
CREATE TABLE Research (
    Research_ID INT PRIMARY KEY,
    Title VARCHAR(200) NOT NULL,
    Start_Date DATE,
    End_Date DATE,
    Department_ID INT,
    Faculty_ID INT,
    PI INT,
    CO_PIs TEXT,
    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID),
    FOREIGN KEY (Faculty_ID) REFERENCES Faculty(Faculty_ID),
    FOREIGN KEY (PI) REFERENCES Faculty(Faculty_ID)
);

-- Publication Table
CREATE TABLE Publication (
    Publication_ID INT PRIMARY KEY,
    Title VARCHAR(200) NOT NULL,
    Publication_Date DATE,
    Journal_Name VARCHAR(100),
    Faculty_ID INT,
    Research_ID INT,
    FOREIGN KEY (Faculty_ID) REFERENCES Faculty(Faculty_ID),
    FOREIGN KEY (Research_ID) REFERENCES Research(Research_ID)
);

select faculty_id from Publication group by faculty_id;

select course_id faculty_id from students inner join teaches;

-- Insert into Department
INSERT INTO Department (Department_ID, Department_Name) VALUES
(1, 'Computer Science'),
(2, 'Electrical Engineering'),
(3, 'Mechanical Engineering'),
(4, 'Mathematics'),
(5, 'Physics');

SELECT * FROM Department;

-- Insert into Course
INSERT INTO Course (Course_ID, Course_Name, Credits, Department_ID, Course_Type) VALUES
(101, 'Database Systems', 4, 1, 'Theory'),
(102, 'Machine Learning', 3, 1, 'Lab'),
(103, 'Circuit Theory', 3, 2, 'Theory'),
(104, 'Thermodynamics', 4, 3, 'Theory'),
(105, 'Quantum Mechanics', 3, 5, 'Theory');

SELECT * FROM Course;

-- Insert into Faculty
INSERT INTO Faculty (Faculty_ID, Faculty_Name, Department_ID) VALUES
(201, 'Dr. Smith', 1),
(202, 'Dr. Johnson', 2),
(203, 'Dr. Williams', 3),
(204, 'Dr. Brown', 4),
(205, 'Dr. Davis', 5);

SELECT * FROM Faculty;

-- Insert into Student
INSERT INTO Student (Student_ID, Student_Name, DOB, Email, Department_ID) VALUES
(301, 'Alice', '2000-01-15', 'alice@example.com', 1),
(302, 'Bob', '2000-05-20', 'bob@example.com', 2),
(303, 'Charlie', '2000-07-10', 'charlie@example.com', 3),
(304, 'David', '2000-03-25', 'david@example.com', 4),
(305, 'Eve', '2000-09-30', 'eve@example.com', 5);

INSERT INTO Student (Student_ID, Student_Name, DOB, Email, Department_ID) VALUES
(306, 'Samar', '2000-07-15', 'samar@example.com', 1);

SELECT * FROM Student;

-- Insert into Parent_Details
INSERT INTO Parent_Details (Parent_ID, Student_ID, Father_Name, Mother_Name, Guardian_Name, Contact_Number, Address) VALUES
(401, 301, 'John Doe', 'Jane Doe', 'John Doe', '1234567890', '123 Main St'),
(402, 302, 'Mike Smith', 'Sarah Smith', 'Mike Smith', '2345678901', '456 Elm St'),
(403, 303, 'James Brown', 'Emily Brown', 'James Brown', '3456789012', '789 Oak St'),
(404, 304, 'Robert Johnson', 'Laura Johnson', 'Robert Johnson', '4567890123', '321 Pine St'),
(405, 305, 'Michael Davis', 'Linda Davis', 'Michael Davis', '5678901234', '654 Maple St');

SELECT * FROM Parent_Details;

-- Insert into Enrollment
INSERT INTO Enrollment (Enrollment_ID, Student_ID, Course_ID, Grade) VALUES
(501, 301, 101, 'A'),
(502, 302, 103, 'B'),
(503, 303, 104, 'C'),
(504, 304, 105, 'A'),
(505, 305, 102, 'B');

INSERT INTO Enrollment (Enrollment_ID, Student_ID, Course_ID, Grade) VALUES
(506, 306, 105, 'E');

SELECT * FROM Enrollment;

-- Insert into Teaches
INSERT INTO Teaches (Faculty_ID, Course_ID, Semester, Year) VALUES
(201, 101, 'Fall', 2023),
(202, 103, 'Spring', 2023),
(203, 104, 'Fall', 2023),
(204, 105, 'Spring', 2023),
(205, 102, 'Fall', 2023);

SELECT * FROM Teaches;

-- Insert into Marksheet
INSERT INTO Marksheet (Marksheet_ID, Student_ID, Semester, Year, GPA) VALUES
(601, 301, 'Fall', 2023, 3.8),
(602, 302, 'Spring', 2023, 3.5),
(603, 303, 'Fall', 2023, 3.2),
(604, 304, 'Spring', 2023, 3.9),
(605, 305, 'Fall', 2023, 3.7);

SELECT * FROM Marksheet;

-- Insert into Attendance
INSERT INTO Attendance (Attendance_ID, Student_ID, Course_ID, Month, Total_Classes, Classes_Attended) VALUES
(701, 301, 101, 'October', 20, 18),
(702, 302, 103, 'November', 18, 15),
(703, 303, 104, 'December', 22, 20),
(704, 304, 105, 'January', 20, 19),
(705, 305, 102, 'February', 18, 17);

SELECT * FROM Attendance;

-- Insert into Course_Registration
INSERT INTO Course_Registration (Registration_ID, Student_ID, Course_ID, Semester, Year) VALUES
(801, 301, 101, 'Fall', 2023),
(802, 302, 103, 'Spring', 2023),
(803, 303, 104, 'Fall', 2023),
(804, 304, 105, 'Spring', 2023),
(805, 305, 102, 'Fall', 2023);

SELECT * FROM Course_Registration;

-- Insert into Student_Credits
INSERT INTO Student_Credits (Student_ID, Semester, Year, Total_Credits) VALUES
(301, 'Fall', 2023, 12),
(302, 'Spring', 2023, 10),
(303, 'Fall', 2023, 14),
(304, 'Spring', 2023, 11),
(305, 'Fall', 2023, 13);

SELECT * FROM Student_Credits;

-- Insert into Placement_Record
INSERT INTO Placement_Record (Student_ID, 10th_Marks, 12th_Marks, CGPA, Placement_Status) VALUES
(301, 95.0, 90.0, 3.8, 'Not Placed'),
(302, 85.0, 80.0, 3.5, 'Not Placed'),
(303, 90.0, 85.0, 3.2, 'Placed'),
(304, 92.0, 88.0, 3.9, 'Placed'),
(305, 88.0, 82.0, 3.7, 'Not Placed');

SELECT * FROM Placement_Record;

-- Insert into Company
INSERT INTO Company (Company_ID, Company_Name, Eligibility_Criteria, Job_Designation, CTC_Offered) VALUES
(901, 'Tech Corp', 'CGPA >= 3.5', 'Software Engineer', 1200000),
(902, 'Electro Ltd', 'CGPA >= 3.0', 'Hardware Engineer', 1000000),
(903, 'Mech Solutions', 'CGPA >= 3.2', 'Mechanical Engineer', 1100000),
(904, 'Math Innovate', 'CGPA >= 3.8', 'Data Scientist', 1300000),
(905, 'Physics World', 'CGPA >= 3.7', 'Research Scientist', 1400000);

SELECT * FROM Company;

-- Insert into Research
INSERT INTO Research (Research_ID, Title, Start_Date, End_Date, Department_ID, Faculty_ID, PI, CO_PIs) VALUES
(1001, 'AI in Healthcare', '2023-01-01', '2023-12-31', 1, 201, 201, '202,203'),
(1002, 'Renewable Energy', '2023-02-01', '2023-11-30', 2, 202, 202, '204,205'),
(1003, 'Robotics', '2023-03-01', '2023-10-31', 3, 203, 203, '201,202'),
(1004, 'Number Theory', '2023-04-01', '2023-09-30', 4, 204, 204, '203,205'),
(1005, 'Quantum Computing', '2023-05-01', '2023-08-31', 5, 205, 205, '201,204');

SELECT * FROM Research;

-- Insert into Publication
INSERT INTO Publication (Publication_ID, Title, Publication_Date, Journal_Name, Faculty_ID, Research_ID) VALUES
(1101, 'AI in Healthcare: A Review', '2023-06-15', 'Journal of AI', 201, 1001),
(1102, 'Renewable Energy Trends', '2023-07-20', 'Energy Journal', 202, 1002),
(1103, 'Robotics Advancements', '2023-08-25', 'Robotics Today', 203, 1003),
(1104, 'Number Theory Insights', '2023-09-30', 'Math Journal', 204, 1004),
(1105, 'Quantum Computing Breakthroughs', '2023-10-05', 'Physics Review', 205, 1005);

SELECT * FROM Publication;

SELECT Student_ID, Student_Name
FROM Student
WHERE Department_ID = 1; 


SELECT Course_Name,Faculty_Name
FROM Course
INNER JOIN Teaches ON Course.Course_ID = Teaches.Course_ID
INNER JOIN Faculty ON Teaches.Faculty_ID = Faculty.Faculty_ID;


SELECT Student_Name, Course_Name, Grade
FROM Student
INNER JOIN Enrollment ON Student.Student_ID = Enrollment.Student_ID
INNER JOIN Course ON Enrollment.Course_ID = Course.Course_ID
WHERE Enrollment.Grade = 'A';


SELECT Course_Name, COUNT(Enrollment.Student_ID) AS Total_Students
FROM Course
LEFT JOIN Enrollment ON Course.Course_ID = Enrollment.Course_ID
GROUP BY Course.Course_Name;

SELECT Student_Name, COUNT(Enrollment.Course_ID) AS Total_Courses
FROM Student
INNER JOIN Enrollment ON Student.Student_ID = Enrollment.Student_ID
GROUP BY Student.Student_ID
HAVING COUNT(Enrollment.Course_ID) > 3;


SELECT Semester, Year, GPA
FROM Marksheet
WHERE Student_ID = 301;


SELECT Student_Name, Course_Name, 
       (Classes_Attended /Total_Classes) * 100 AS Attendance_Percentage
FROM Attendance
INNER JOIN Student ON Attendance.Student_ID = Student.Student_ID
INNER JOIN Course ON Attendance.Course_ID = Course.Course_ID;


SELECT Student.Student_Name, Student_Credits.Total_Credits
FROM Student
INNER JOIN Student_Credits ON Student.Student_ID = Student_Credits.Student_ID
WHERE Student_Credits.Total_Credits > 30; 


SELECT Student_Name, CGPA
FROM Student
INNER JOIN Placement_Record ON Student.Student_ID = Placement_Record.Student_ID
INNER JOIN Company ON Placement_Record.CGPA >= Company.Eligibility_Criteria
WHERE Company.Company_Name = 'Tech Corp';

SELECT Company_Name, Job_Designation, CTC_Offered
FROM Company;


SELECT Father_Name, Mother_Name, Guardian_Name
FROM Parent_Details
WHERE Student_ID = 302; 
 
SELECT Title, Faculty_Name
FROM Research
INNER JOIN Faculty ON Research.Faculty_ID = Faculty.Faculty_ID;

SELECT Title, Publication_Date, Journal_Name
FROM Publication
INNER JOIN Faculty ON Publication.Faculty_ID = Faculty.Faculty_ID
WHERE Faculty.Faculty_Name = 'Dr. Smith'; 




UPDATE Student
SET Email = 'ayush@virat.com'
WHERE Student_ID = 301;

select * from student;

DELETE FROM Enrollment
WHERE Grade = 'B'; 

select* from enrollment;

UPDATE Attendance
SET Classes_Attended = Classes_Attended + 1
WHERE Student_ID = 301 AND Course_ID = 101 AND Month = 'October'; 

select*from attendance;

UPDATE Placement_Record
SET Placement_Status = 'Placed'
WHERE Student_ID IN (SELECT Student_ID FROM Company WHERE Job_Designation = 'Software Engineer');

select *from Placement_Record;

UPDATE Parent_Details
SET Contact_Number = '9876543210'
WHERE Student_ID = 302; 

select* from parent_details;

UPDATE Research
SET title='Cricket Management'
WHERE Research_ID = 1001; 

SELECT * FROM Research;

SELECT Course_Name, MAX(Grade) AS Highest_Grade
FROM Course
INNER JOIN Enrollment ON Course.Course_ID = Enrollment.Course_ID
GROUP BY Course_Name;


SELECT Faculty_Name, COUNT(Course_ID) AS Total_Courses
FROM Faculty
LEFT JOIN Teaches ON Faculty.Faculty_ID = Teaches.Faculty_ID
GROUP BY Faculty_Name;

SELECT Student_name,Course_name,Faculty_name
FROM Student
INNER JOIN Enrollment ON Student.Student_ID = Enrollment.Student_ID
INNER JOIN Course ON Enrollment.Course_ID = Course.Course_ID
INNER JOIN Teaches ON Course.Course_ID = Teaches.Course_ID
INNER JOIN Faculty ON Teaches.Faculty_ID = Faculty.Faculty_ID;

SELECT Student_Name, Semester, Year, Total_Credits
FROM Student
INNER JOIN Student_Credits ON Student.Student_ID = Student_Credits.Student_ID;


SELECT Student_Name, CGPA,10th_Marks,12th_Marks
FROM Student
INNER JOIN Placement_Record ON Student.Student_ID = Placement_Record.Student_ID
WHERE 10th_Marks >= 90 AND 12th_Marks >= 85 AND CGPA >= 3.5;

SELECT Student_Name
FROM Student
LEFT JOIN Parent_Details ON Student.Student_ID = Parent_Details.Student_ID
WHERE Father_Name IS NULL OR Mother_Name IS NULL OR Guardian_Name IS NULL;
15/04/2025, 12:05 am - Ayush: SELECT Research.Title, COUNT(Publication.Publication_ID) AS Publication_Count
FROM Research
LEFT JOIN Publication ON Research.Research_ID = Publication.Research_ID;
15/04/2025, 12:34 am - Ayush: <Media omitted>
15/04/2025, 1:04 am - Ansh Gupta: <Media omitted>
17/04/2025, 6:19 am - Ayush: https://youtu.be/3eMoaiOv6uA?si=DWdxM_ZV_cZdUOSC
17/04/2025, 1:10 pm - Ansh Gupta: Dosa khane jaoge kya
17/04/2025, 1:11 pm - Ayush: Thora Ruko batate  h
17/04/2025, 1:56 pm - Ansh Gupta: Arey kaha ho tum log
17/04/2025, 2:01 pm - Ayush: Abhay ke room pe
17/04/2025, 3:28 pm - Ansh Gupta: Ho gayi kya presentation
17/04/2025, 3:28 pm - Ansh Gupta: Agar natesh free hai toh hum log aajaye
19/04/2025, 12:57 am - Ansh Gupta: https://youtube.com/shorts/3Nnn7hGuAKM
19/04/2025, 2:32 am - Ansh Gupta: https://chatgpt.com/share/6802bdca-c6c4-8001-b239-d7436bb1b61c
22/04/2025, 6:06 pm - Ayush: <Media omitted>
22/04/2025, 6:33 pm - Ansh Gupta: <Media omitted>
23/04/2025, 3:11 am - Ayush: <Media omitted>
23/04/2025, 3:11 am - Ayush: <Media omitted>
23/04/2025, 3:11 am - Ayush: <Media omitted>
23/04/2025, 3:11 am - Ayush: <Media omitted>
23/04/2025, 3:11 am - Ayush: <Media omitted>
23/04/2025, 4:25 pm - Ayush: https://youtu.be/LRk8eB4IuTY?si=vcDPe8UmrZiTjz3s
25/04/2025, 1:56 am - Ansh Gupta: https://youtu.be/YbY8cVwWAvw
29/04/2025, 4:17 am - Ansh Gupta: 
29/04/2025, 4:17 am - Ansh Gupta: <Media omitted>
29/04/2025, 4:17 am - Ansh Gupta: <Media omitted>
29/04/2025, 4:17 am - Ansh Gupta: <Media omitted>
02/05/2025, 8:59 am - Ayush: https://codinginfinite.com/k-means-clustering-explained-with-numerical-example/
03/05/2025, 9:29 pm - Ayush: Padhne lga kya ??
05/05/2025, 12:00 am - Ayush: <Media omitted>
05/05/2025, 12:00 am - Ayush: <Media omitted>
05/05/2025, 12:00 am - Ayush: <Media omitted>
05/05/2025, 1:05 am - Ayush: <Media omitted>
05/05/2025, 7:36 pm - Ayush: <Media omitted>
05/05/2025, 7:36 pm - Ayush: Mil gya .
05/05/2025, 7:37 pm - Ansh Gupta: 😘
05/05/2025, 11:10 pm - Ayush: Kya hua , call kr rha tha ?
05/05/2025, 11:11 pm - Ansh Gupta: Arey voh DWDM ka submission kaise karna hai voh hi puchhna tha
05/05/2025, 11:12 pm - Ayush: Ho gya na
05/05/2025, 11:14 pm - Ansh Gupta: Ho raha hai
14/05/2025, 8:11 pm - Ayush: Kuch bata na download kar leta hu raaste ke liye movie ya series
14/05/2025, 8:25 pm - Ansh Gupta: Taken 1, fight club ye dono movie hai par english mai hi hai <This message was edited>
14/05/2025, 8:25 pm - Ayush: Aisi nhi dekh raha
14/05/2025, 8:25 pm - Ayush: Koi series bata Jo mere layak ho
14/05/2025, 8:28 pm - Ansh Gupta: Toh kaisi dekhni hai
14/05/2025, 8:28 pm - Ansh Gupta: Toh ek baar K drama try buisness proposal achha lagega tujhe love comedy rehta hai uska genre
14/05/2025, 8:28 pm - Ansh Gupta: Net nahi chal raha hai
14/05/2025, 8:30 pm - Ansh Gupta: College romance dekhle uska season 1 mast hai
14/05/2025, 8:31 pm - Ansh Gupta: Baki ke mat dekhiyo
14/05/2025, 8:31 pm - Ansh Gupta: Immature dekhle voh bhi mast hai
14/05/2025, 8:33 pm - Ansh Gupta: Tune family man dekhi hai ?
14/05/2025, 8:34 pm - Ansh Gupta: Bichho ka khel dekhle mast hai voh bhi
14/05/2025, 8:35 pm - Ayush: Dekhi h ye
14/05/2025, 8:36 pm - Ayush: Ye bhi dekhi h
14/05/2025, 8:36 pm - Ansh Gupta: Buisness proposal 
Bichho ka khel
Immature 
Kar le download teeno mast hai
14/05/2025, 8:36 pm - Ayush: Download link dhundna pdega kha pe hai sab ?
14/05/2025, 8:37 pm - Ansh Gupta: Vegamovies pe mil jayega
14/05/2025, 8:37 pm - Ansh Gupta: Buisness proposal ka prashant se mangle voh de dega
14/05/2025, 8:37 pm - Ayush: Thik
20/05/2025, 5:59 pm - Ayush: Free
20/05/2025, 6:02 pm - Ansh Gupta: kaha tak padh rakha hai tune
20/05/2025, 6:05 pm - Ansh Gupta: <Media omitted>
20/05/2025, 6:05 pm - Ayush: Yaad nhi
20/05/2025, 6:06 pm - Ansh Gupta: pura hi bhej diya
20/05/2025, 6:06 pm - Ayush: Padhta hu
20/05/2025, 6:06 pm - Ansh Gupta: padho padho koi kami ho toh batana
20/05/2025, 6:06 pm - Ayush: Thik
20/05/2025, 6:25 pm - Ayush: Ending nhi hui story ki kya ?
20/05/2025, 6:25 pm - Ayush: Part-2 likhega
20/05/2025, 6:38 pm - Ansh Gupta: nahi abhi puri nahi hui hai
20/05/2025, 7:03 pm - Ayush: Achi h abhi tak toh
20/05/2025, 7:11 pm - Ansh Gupta: Kahani abhi average lag rahi hai ya below average lag rahi hai
20/05/2025, 7:12 pm - Ayush: Average hai below to nahi h , thora ek do thriller la dena aage acha wala to aur achi lgegi <This message was edited>
20/05/2025, 7:14 pm - Ansh Gupta: Abhi toh heroine ko lane thi isliye thoda light tha
20/05/2025, 7:18 pm - Ayush: Haa abhi tak toh achi lgi mujhe
21/05/2025, 11:45 am - Ansh Gupta: <Media omitted>
21/05/2025, 11:58 am - Ayush: Acha h
21/05/2025, 11:59 am - Ansh Gupta: itna jaldi padh bhi liya
21/05/2025, 11:59 am - Ayush: Haa padh liya 3-4 page hi toh alg tha
21/05/2025, 11:59 am - Ansh Gupta: haan 2 chapter hi likhe the
21/05/2025, 12:00 pm - Ayush: Ye dono chapter ache the kaafi
21/05/2025, 12:00 pm - Ansh Gupta: inpe mera pura din gaya tha sirf ye dono likhne pe
21/05/2025, 12:00 pm - Ayush: Tabhi toh jayda acha bana h
21/05/2025, 12:00 pm - Ansh Gupta: Pehle kuchh aur socha tha fir ye final hua baad mai
21/05/2025, 12:01 pm - Ayush: Isme thora climax or flirting tha ,sahi h
21/05/2025, 12:01 pm - Ansh Gupta: climax se jyada flirting likhne mai time lagta hai ki kahi over na ho jaye
21/05/2025, 12:02 pm - Ansh Gupta: aur in sab cheejo ki aadat bhi nahi hai na
21/05/2025, 12:02 pm - Ayush: Haa kitab jaisi hi honi chahiye
21/05/2025, 12:02 pm - Ansh Gupta: haan vahi
21/05/2025, 12:02 pm - Ayush: Badhiya h laga reh
23/05/2025, 10:01 am - Ayush: 160 wala start kre kya ?
23/05/2025, 10:01 am - Ayush: Aur web dev bhi karte h chutti me <This message was edited>
23/05/2025, 10:45 am - Ansh Gupta: Karte hai
23/05/2025, 10:45 am - Ansh Gupta: Daily vala kar raha tha
23/05/2025, 10:45 am - Ansh Gupta: Par bich Mai hard aaya toh fir nahi kiya
23/05/2025, 10:48 am - Ayush: Web dev krne ka soch rha
23/05/2025, 10:49 am - Ayush: Pr wo to aage jaa chuka h , jab start hoga day-1 se tab krne me fayda h
23/05/2025, 10:51 am - Ansh Gupta: haan start kar raha hu mai toh
23/05/2025, 10:51 am - Ansh Gupta: arey abhi toh mai daily streak vale question karne  ka soch rha hu
23/05/2025, 10:54 am - Ayush: Mai bhi soch rha fir shuru se karna padega, code with harry se
23/05/2025, 10:55 am - Ayush: Wo to nhi krunga hard hoga normal topic wise hi krkunga mn hoga tab
23/05/2025, 10:56 am - Ansh Gupta: shuru se hi kar raha hu mai toh
23/05/2025, 10:56 am - Ayush: Mai bhi wahi se krunga
23/05/2025, 10:56 am - Ayush: Code with harry se na ?
23/05/2025, 10:56 am - Ayush: Aaj ya kl se shuru krunga
23/05/2025, 10:56 am - Ansh Gupta: haan vahi se karunga
23/05/2025, 10:57 am - Ansh Gupta: main bhi soch raha hu kal se shuru karne ki
23/05/2025, 10:57 am - Ayush: Acha h uska , sequence me h pura 136 video h pr max to max 20 ke h kuch project wale chor kr <This message was edited>
23/05/2025, 10:57 am - Ayush: Aaj ya kl bol diya toh ab woh kl hi hoga 😂
23/05/2025, 10:58 am - Ansh Gupta: voh toh hoga hi 😂
23/05/2025, 10:58 am - Ansh Gupta: dsa kaise karega
23/05/2025, 10:58 am - Ansh Gupta: tu bhi starting se hi karega kya web dev
23/05/2025, 10:58 am - Ayush: DSA soch rha hu thore questions hi krunga normally
23/05/2025, 10:59 am - Ansh Gupta: soch raha hu recursion karu
23/05/2025, 10:59 am - Ayush: Haa krunga to starting se bhul gya sab 20-25 dekhi thi
23/05/2025, 10:59 am - Ansh Gupta: haan maine bhi 10 ke aaspas dekhi thi sab bhul gaya hu
23/05/2025, 10:59 am - Ayush: Haa Mai bhi recursion aur uske aage ka aur thora dp
23/05/2025, 11:00 am - Ansh Gupta: toh ye kab se start karega
23/05/2025, 11:00 am - Ansh Gupta: ye bhi kal se
23/05/2025, 11:00 am - Ayush: Phle to web dev krta hu kuch din tab wo start krta hu
23/05/2025, 11:00 am - Ayush: Sab ek din me nhi ho payega
23/05/2025, 11:00 am - Ansh Gupta: agar code with harry ki roj 3 video bhi dekhi toh ho jayega pura chhuti chhuti mai hi
23/05/2025, 11:00 am - Ayush: Soch rha hu DSA june se kru , ye mahina bs web dev hi krta hu
23/05/2025, 11:01 am - Ansh Gupta: par mann mai toh haramjadgi bhari hui hai
23/05/2025, 11:01 am - Ayush: Haa pura Karna h kaise bhi aur time bache to flutter bhi seekhne ki soch rha hu
23/05/2025, 11:01 am - Ansh Gupta: haan mai bhi yahi soch raha hu
23/05/2025, 11:01 am - Ansh Gupta: haan sikh sakte hai
23/05/2025, 11:01 am - Ayush: Abhi thora  interest aa jaye tab DSA krunga june se
23/05/2025, 11:02 am - Ansh Gupta: sala padhne ka mann hi nahi kar raha ghar pe
23/05/2025, 11:02 am - Ayush: Chal aaj se hi krte h web dev aur is mahine jayda se jayda niptate h toh agle mahine se saath me DSA bhi krte rahenge
23/05/2025, 11:02 am - Ayush: Wahi toh
23/05/2025, 11:02 am - Ayush: Mtlb kal se
23/05/2025, 11:02 am - Ayush: Mai bhi aane ke baad kuch nhi kiya hu
23/05/2025, 11:02 am - Ansh Gupta: haan mai  bhi ye hi bolne vala tha ki kal se
23/05/2025, 11:03 am - Ayush: Harami dimaag toh h
23/05/2025, 11:03 am - Ansh Gupta: tu toh mere se late hi phocha tha
23/05/2025, 11:03 am - Ayush: Rcb ka match h na Aaj isliye
23/05/2025, 11:03 am - Ansh Gupta: abhi padhne ka mann nahi kar raha thodi der reel chala leta hu
23/05/2025, 11:03 am - Ayush: 17 ko subh 5 bje
23/05/2025, 11:03 am - Ansh Gupta: maja aayega
23/05/2025, 11:04 am - Ansh Gupta: kal ke match mai bhi  maja aaya
23/05/2025, 11:04 am - Ansh Gupta: mast toda gt ko
23/05/2025, 11:04 am - Ayush: Reel ,snap , whatsapp,fb pe tune deta hu sequence me fir loop repeat hota h
23/05/2025, 11:04 am - Ayush: Gt jit bhi sakti thi last me chok kr gya
23/05/2025, 11:04 am - Ansh Gupta: mai toh kahani sochta rehta hu pure din par kuchh achha likh nahi pa raha hu
23/05/2025, 11:05 am - Ansh Gupta: arey wicket girte rahe unke koi batsman tik ke nahi khela
23/05/2025, 11:05 am - Ayush: Hnn wahi
23/05/2025, 11:05 am - Ayush: <Media omitted>
23/05/2025, 11:05 am - Ansh Gupta: uske baad ek hi chapter nahi likha hai ek likha hai voh bhi utna achha nahi hai
23/05/2025, 11:06 am - Ayush: Hnn thora thora daily likh skta h to chutti khatm hote hote ho jayegi puri
23/05/2025, 11:06 am - Ansh Gupta: puri nahi ho payegi maine bhot jyada soch rakha hai is kahani ke baare mai
23/05/2025, 11:07 am - Ayush: Hnn to karte reh jab tak ho , jaldi thori h
23/05/2025, 11:07 am - Ansh Gupta: <Media omitted>
23/05/2025, 11:07 am - Ansh Gupta: Tera jyada hai mujhse
23/05/2025, 11:07 am - Ayush: Close h
23/05/2025, 11:08 am - Ayush: Kyuki Mai fb km chalata hi
23/05/2025, 11:08 am - Ansh Gupta: haan vahi mai laptop jyada chalata hu kahani ke chakkar maii aur laptop mai insta hai nahi
23/05/2025, 11:08 am - Ayush: Dark mode use nhi krta kya
23/05/2025, 11:08 am - Ansh Gupta: haan ye bhi hai
23/05/2025, 11:08 am - Ansh Gupta: nahi
23/05/2025, 11:09 am - Ansh Gupta: kabhi socha nahi is baare mai
23/05/2025, 11:09 am - Ayush: Bhk light mode Mai phle use krta tha ,ek baar dark kiya uske baad light mode kbhi on hi nhi kiya ,, sayad abhay ne krwaya tha <This message was edited>
23/05/2025, 11:10 am - Ansh Gupta: maine kabhi socha hi nahi ladki nachte hue dekhna hai voh chahe dark mode mai dekho ya light mode mai
23/05/2025, 11:11 am - Ayush: Waah bc
23/05/2025, 11:11 am - Ayush: Mutthi mar rha ki nhi 😂
23/05/2025, 11:11 am - Ansh Gupta: haan do baar li
23/05/2025, 11:12 am - Ansh Gupta: ghar aane ke baad
23/05/2025, 11:15 am - Ayush: Good control
23/05/2025, 11:16 am - Ansh Gupta: vah ise good control kehte hai
23/05/2025, 11:32 am - Ayush: Yaha daily ho ja rha bhadwe
23/05/2025, 11:33 am - Ayush: Toh comparitive bol rha <This message was edited>
23/05/2025, 11:36 am - Ansh Gupta: kundu banta jaa raha hai bhadwe
23/05/2025, 11:38 am - Ayush: Kuch jayda ho gya h
23/05/2025, 11:39 am - Ayush: Control Krna pdega
23/05/2025, 11:49 am - Ansh Gupta: Mai bhi ab nahi marunga
23/05/2025, 12:05 pm - Ayush: Aaj toh maar liya hu
23/05/2025, 12:05 pm - Ayush: Sale tera control me h , meera hi jayda h
26/05/2025, 7:08 pm - Ayush: Haa bol
26/05/2025, 7:08 pm - Ayush: Bhar tha us time ,abhi aaya
26/05/2025, 7:11 pm - Ansh Gupta: Kuchh nahi kuchh tha nahi karne ko toh lagaya tha
27/05/2025, 12:48 pm - Ayush: The Walking dead ka download link milega kya ?
27/05/2025, 12:49 pm - Ayush: Mera bhai dekhne ke liye mang rha h
27/05/2025, 12:57 pm - Ansh Gupta: https://app.vegamovies.bot/download-the-walking-dead-seasons-1-10-english-with-subtitles-complete-series-web-dl-720p/
27/05/2025, 7:08 pm - Ayush: Bata login karta hu laptop me !
27/05/2025, 7:08 pm - Ayush: Mera phone me hi chalta h
27/05/2025, 7:08 pm - Ansh Gupta: Ye bheja toh link
27/05/2025, 7:09 pm - Ayush: Bsdk hotstar mang rha hu ,mera bs phone me chalta hai
27/05/2025, 7:09 pm - Ayush: Tera 2 log wala h na
27/05/2025, 7:09 pm - Ansh Gupta: Ruk karke dekhna padega ki chal bhi Raha hai ya nahi
27/05/2025, 7:09 pm - Ansh Gupta: Mai mere mai kholta hu
27/05/2025, 7:09 pm - Ayush: Ok
27/05/2025, 7:10 pm - Ansh Gupta: Daal mera number
27/05/2025, 7:10 pm - Ansh Gupta: 9079231064
27/05/2025, 7:10 pm - Ansh Gupta: Agar tecno vala dikhaye toh hata diyo
27/05/2025, 7:11 pm - Ayush: Otp
27/05/2025, 7:11 pm - Ansh Gupta: 3338
27/05/2025, 7:12 pm - Ayush: Ho gya 🫡
27/05/2025, 7:12 pm - Ansh Gupta: Ab mai mera dekhta hu chal raha hai ya nahi
27/05/2025, 7:12 pm - Ayush: Ameeri us time ki akele 2 log wala le liya
27/05/2025, 7:12 pm - Ayush: Laptop me chal raha h mtlb 2 log ka chal jayega
27/05/2025, 7:13 pm - Ayush: 1 log wale me bs phone me hi chalta h
27/05/2025, 7:13 pm - Ansh Gupta: Fir bhi ek baar dekh lu
27/05/2025, 7:13 pm - Ayush: Haa dekh le
27/05/2025, 7:14 pm - Ansh Gupta: Chal raha hai
27/05/2025, 7:14 pm - Ayush: Mayank ko aaj bhi khila rhe
27/05/2025, 7:14 pm - Ansh Gupta: Maine dhyan hi nahi diya tab
27/05/2025, 7:14 pm - Ansh Gupta: Kya khila rahe hai
27/05/2025, 7:14 pm - Ansh Gupta: Achha mayank aggarwal
27/05/2025, 7:14 pm - Ayush: Sab ek jaise batsman mayank , Patidar, Livingstone
27/05/2025, 7:14 pm - Ansh Gupta: Swastik ko khila na tha
27/05/2025, 7:14 pm - Ayush: To tumko kya laga
27/05/2025, 7:15 pm - Ansh Gupta: Apna mayank 😁
27/05/2025, 7:15 pm - Ayush: Khilane ka mtlb cricket match tha kya samjh leta h 😂
27/05/2025, 7:15 pm - Ansh Gupta: Haan samaj gaya baad mai bhai
27/05/2025, 7:16 pm - Ansh Gupta: Abhi dukaan se aaya tha toh dimag nahi chala
27/05/2025, 9:23 pm - Ayush: Chud gye
27/05/2025, 9:24 pm - Ayush: Kya bhadwi bowling lineup h
27/05/2025, 9:24 pm - Ansh Gupta: Bhot mara is rishab pant ne
27/05/2025, 9:24 pm - Ansh Gupta: Sab chude hai bichara tushara
27/05/2025, 9:24 pm - Ansh Gupta: Kisi ne support hi nahi kiya
27/05/2025, 9:24 pm - Ayush: Sala pura season out of form tha
27/05/2025, 9:24 pm - Ansh Gupta: Bowling hi chutiya hai rcb ki
27/05/2025, 9:27 pm - Ayush: Kunal se hi krwa lena tha isse bura kya hota
27/05/2025, 9:27 pm - Ayush: 150 pe all out ho jayegi ab ye team
27/05/2025, 9:27 pm - Ansh Gupta: Haan yrr kam se kam out hone ke toh chanc hota
27/05/2025, 9:28 pm - Ansh Gupta: Randi sali chhote lund se maja nahi aata bade lund mai gaand mai dard hota hai is team ke
27/05/2025, 9:29 pm - Ayush: Wahi na firse 227 kaha chase ho rha h
27/05/2025, 9:30 pm - Ansh Gupta: Lund team sali
27/05/2025, 9:30 pm - Ansh Gupta: Kisi din bc mai ipl dekhna chhod dunga randi sale
27/05/2025, 9:30 pm - Ayush: Eliminator me bhar hone ke liye taiyar h ab
27/05/2025, 9:30 pm - Ansh Gupta: Mi se bhi chudegi ab
27/05/2025, 9:31 pm - Ayush: Chud gye guru
27/05/2025, 9:31 pm - Ansh Gupta: Kya hua
27/05/2025, 9:31 pm - Ayush: RCB mtlb sale 😂
27/05/2025, 9:31 pm - Ansh Gupta: Sale tu dara deta hai aise
27/05/2025, 9:31 pm - Ayush: Tu itna bhi kaand nhi kiya ki chudta hi rahega
27/05/2025, 9:32 pm - Ansh Gupta: Pata nahi kaunse kand kab bahar aajate hai mujhe toh yaad bhi nahi rehta ye maine kiya hua hai
27/05/2025, 9:33 pm - Ayush: Wahi toh mess me ek semester baad kaam Kara Diya jb log ragging bhul gye the
27/05/2025, 9:34 pm - Ansh Gupta: Vahi toh yrr ab ghar aaya toh pata chala ki koi saman tod diya tha maine pichhli baar aur use kahi chhupa diya voh kal mil gaya papa ko ab mai bhul bhi Gaya ki kaise tuta tha kaha chhupaya tha 🥲
27/05/2025, 9:39 pm - Ayush: Kya tuta tha 😂
27/05/2025, 9:39 pm - Ansh Gupta: Arey chair aur chaarpai
27/05/2025, 9:39 pm - Ansh Gupta: Tut gayi thi
27/05/2025, 9:39 pm - Ayush: Kohli agar 15 over tk khela tabhi kuch hoga ,baaki se toh kuch nhi hoga
27/05/2025, 9:39 pm - Ansh Gupta: Arey kuchh nahi hoga maine toh umeed hi chhod di
27/05/2025, 9:40 pm - Ayush: Baat toh sahi h
27/05/2025, 10:29 pm - Ayush: Sala asli fraud to Livingstone h
27/05/2025, 10:45 pm - Ansh Gupta: Haar gaye 😭😭
27/05/2025, 10:46 pm - Ayush: Jhatu h sab , akela kya kr lega wo
27/05/2025, 11:57 pm - Ansh Gupta: Tere mai se toh logout nahi hua na ?
27/05/2025, 11:57 pm - Ayush: Nhi
03/06/2025, 7:00 pm - Ayush: Logout ho gya
03/06/2025, 7:01 pm - Ansh Gupta: Yrr papa dekh rahe hai
03/06/2025, 7:01 pm - Ansh Gupta: Aur ek mere pe
03/06/2025, 7:01 pm - Ayush: Thik mai karta hu kuch
03/06/2025, 11:34 pm - Ayush: Abhi dena hotstar
03/06/2025, 11:34 pm - Ayush: Maine login Kiya tha dusra jio ka number, abhi tak toh chal gya ab band ho gya sala
03/06/2025, 11:35 pm - Ansh Gupta: Abhi tu mera number daal ke karle
03/06/2025, 11:35 pm - Ansh Gupta: Tecno vala log out maar diyo
03/06/2025, 11:36 pm - Ansh Gupta: Dala kya
03/06/2025, 11:36 pm - Ansh Gupta: 8557
03/06/2025, 11:36 pm - Ayush: Haa
03/06/2025, 11:37 pm - Ayush: <Media omitted>
03/06/2025, 11:37 pm - Ansh Gupta: Android
03/06/2025, 11:37 pm - Ansh Gupta: Maar de logout
03/06/2025, 11:37 pm - Ayush: Done ✅
04/06/2025, 12:34 am - Ansh Gupta: Arey tera log out toh nahi hua na
04/06/2025, 12:34 am - Ansh Gupta: Agar hua ho toh dubara login karle
04/06/2025, 12:35 am - Ansh Gupta: Aur web browser log out maar diyo
04/06/2025, 12:40 am - Ayush: Nhi hua h
04/06/2025, 10:04 pm - Ansh Gupta: Kya hua
17/06/2025, 10:20 am - Ansh Gupta: kya kar raha hai
17/06/2025, 10:32 am - Ayush: Khana kha rha hu
17/06/2025, 10:32 am - Ayush: Bolo
17/06/2025, 10:32 am - Ansh Gupta: Aise hi puchh raha tha
17/06/2025, 10:32 am - Ansh Gupta: Itni late
17/06/2025, 10:32 am - Ayush: Koi kaam ya aise hi
17/06/2025, 10:32 am - Ayush: Subh bhukh nhi lgti mujhe
17/06/2025, 10:32 am - Ansh Gupta: Aise hi time pass nahi ho raha tha tab
17/06/2025, 10:32 am - Ayush: Krta hu kha kr msg
17/06/2025, 11:12 am - Ayush: Haa bol
17/06/2025, 11:13 am - Ansh Gupta: Aise hi kiya tha bhai koi kaam thodi tha
17/06/2025, 11:13 am - Ansh Gupta: Time pass nahi ho raha tha
17/06/2025, 11:13 am - Ansh Gupta: Webseries bhi dekhne ka Mann nahi karta ab toh
17/06/2025, 11:13 am - Ayush: Cms pr call kr
17/06/2025, 11:13 am - Ayush: Dukan nhi jata ab kya
17/06/2025, 11:13 am - Ansh Gupta: Abhay se kal hi baat Kari thi 1 se 1.5 ghanta
17/06/2025, 11:14 am - Ansh Gupta: Nahi is baar toh ek din bhi nahi gaya bas tab gaya hu jab dukaan ka saman aaya tha
17/06/2025, 11:14 am - Ansh Gupta: Padh raha hai kya
17/06/2025, 11:14 am - Ayush: Bs bhai hi jata h tera
17/06/2025, 11:14 am - Ansh Gupta: Haan
17/06/2025, 11:15 am - Ayush: Abhi toh nhi ,do din se so Raha hu
17/06/2025, 11:15 am - Ansh Gupta: Kitni video dekhi
17/06/2025, 11:15 am - Ayush: Aaj se dekhta hu fir
17/06/2025, 11:15 am - Ayush: Tu padh rha , hua kuch tera
17/06/2025, 11:15 am - Ansh Gupta: Nahi yrr 20 ke aaspas hi hu
17/06/2025, 11:15 am - Ansh Gupta: Tu bata tune kitni dekhli video
17/06/2025, 11:16 am - Ansh Gupta: Tune toh 50 dekhli hongi
17/06/2025, 11:16 am - Ayush: Maine to revise kr li thi pahle wali
17/06/2025, 11:16 am - Ansh Gupta: 35 dekhli ?
17/06/2025, 11:16 am - Ayush: 37 tak aur fir uske baad kuch dekha tha
17/06/2025, 11:16 am - Ayush: Mereko lga tu kr liya hoga 30 tk
17/06/2025, 11:16 am - Ansh Gupta: Matlab 40+ toh dekh hi li
17/06/2025, 11:16 am - Ayush: Haa uske aaspas
17/06/2025, 11:16 am - Ansh Gupta: Sahi hai
17/06/2025, 11:17 am - Ansh Gupta: Dsa kar raha hai ?
17/06/2025, 11:17 am - Ayush: Tu bhi kr le , chutti me toh pura kr hi lena end tak
17/06/2025, 11:17 am - Ayush: Nhi wo toh kuch nhi kiya
17/06/2025, 11:17 am - Ansh Gupta: Haan voh toh soch hi Raha hai hu
17/06/2025, 11:18 am - Ayush: Dono nhi ho rha ,ek kr paya wo bhi kaise kaise
17/06/2025, 11:18 am - Ansh Gupta: Mere gfg pe 108 question ho gaye 🎉
17/06/2025, 11:18 am - Ayush: Badhiya
17/06/2025, 11:18 am - Ayush: Mene ek bhi nhi kiya aane ke baad
17/06/2025, 11:18 am - Ansh Gupta: 85 the jab aaya tha tab
17/06/2025, 11:18 am - Ansh Gupta: Nahi mai kar raha tha kabhi kabhi
17/06/2025, 11:19 am - Ayush: Me soch rha hu web dev kr leta hu , DSA to waha bhi krta reh skta hu
17/06/2025, 11:19 am - Ayush: Web dev waha nhi ho pata h
17/06/2025, 11:19 am - Ansh Gupta: 150 se 200 tak karne ki soch raha hu college Jane se pehle pehle
17/06/2025, 11:19 am - Ayush: 1 month DSA kiye the waha fir rhythm tut gya
17/06/2025, 11:20 am - Ansh Gupta: College mai nahi ho pata web dev
17/06/2025, 11:20 am - Ansh Gupta: Haan yrr dp aagaya tha
17/06/2025, 11:20 am - Ayush: Whi na ,DSA thora to ho jata h
17/06/2025, 11:20 am - Ayush: Jane se phle recursion aur dp thora kr ke jaunga fir waha daily krta rahunga ek do
17/06/2025, 11:21 am - Ayush: Web dev pura karunga baaki dekhte h
17/06/2025, 11:21 am - Ansh Gupta: Soch toh Raha hu par sala web dev toh ho pehle youtube video dekhne ka Mann hi nahi karta hai
17/06/2025, 11:22 am - Ayush: Daily 3-4 dekha kr ho jayega
17/06/2025, 11:22 am - Ayush: Mai kisi din 6 dekh leta hu fir 2 din krta hi nhi
17/06/2025, 11:22 am - Ansh Gupta: Sale tune ek baar padh rakhi hai tab tujhe 3 se 4 bol sakta hai par mere liye toh Naya hai na 3 -4 mai pura din chala jayega
17/06/2025, 11:23 am - Ansh Gupta: Sahi hai avg aagayi 3 se 4 ki
17/06/2025, 11:23 am - Ayush: Nhi jata h 2 ghante me kr lega tu ache se dekhe toh
17/06/2025, 11:23 am - Ayush: Choote video ho toh jayda dekh le
17/06/2025, 11:23 am - Ayush: Bada hota h toh 1-2 bs dekha kr
17/06/2025, 11:24 am - Ayush: 20 min se km wala 1 ghante me ho jata h aaram se phli baar bhi krega toh
17/06/2025, 11:24 am - Ansh Gupta: Mai subha subha padhta hu jitna padh pata hu 9 se 11 fir shyam mai 1 ghanta bas usse jyada aur kuchh nahi aur fir din bhar sona
17/06/2025, 11:24 am - Ayush: Thora basic ho jata h toh samjh aa jata h
17/06/2025, 11:24 am - Ansh Gupta: Haan voh toh ho hi jata hai
17/06/2025, 11:25 am - Ansh Gupta: Tu exercise karta hai jo voh deta hai
17/06/2025, 11:25 am - Ayush: Haa toh max 20 min se km ki h
17/06/2025, 11:25 am - Ayush: Haa khud se thora krta hu nhi hota h solution dekh leta hu uska
17/06/2025, 11:25 am - Ansh Gupta: Haan 10 se 15 min ke bich ki hi hai max
17/06/2025, 11:26 am - Ayush: Dekh kr at least samjh to aa jata h na ,kuch sikh hi leta hu
17/06/2025, 11:26 am - Ansh Gupta: Haan mai bhi yahi karta hu kuchh cheje yaad hi nahi rehti
17/06/2025, 11:26 am - Ansh Gupta: Bina practice ke yaad nahi reh sakti
17/06/2025, 11:26 am - Ayush: Yaad thori krenge dekhte dekhte ho yaad rhe nhi to website pe khol kr dekh lete h notes uska
17/06/2025, 11:27 am - Ayush: Wahi toh krne se kuch property dimag me yaad rhti h
17/06/2025, 11:27 am - Ansh Gupta: Haan voh toh hai hi par jab practice ho jayegi toh chhoti chhoti cheje yaad reh jayegi
17/06/2025, 11:28 am - Ayush: Haan wahi jitna aage dekhta jayega piche wala use hota rhega video me to jrurat wali cheez yaad reh jati h ,baaki notes hai hi uska
17/06/2025, 11:28 am - Ansh Gupta: Tu notebook bana raha hai kya??
17/06/2025, 11:28 am - Ayush: Nhi
17/06/2025, 11:28 am - Ansh Gupta: Mere baski toh nahi hai
17/06/2025, 11:28 am - Ayush: Notes kyu banaunga
17/06/2025, 11:28 am - Ayush: Harry ke website pe notes hai na
17/06/2025, 11:28 am - Ansh Gupta: Laptop mai hai hi
17/06/2025, 11:29 am - Ansh Gupta: Aur bata koi nayi taza
17/06/2025, 11:29 am - Ayush: Handwritten wali aur webpage wali bhi h
17/06/2025, 11:29 am - Ayush: Kuch nhi hua , bs kat Raha h kaise kaise
17/06/2025, 11:29 am - Ansh Gupta: Koi nahi baat kisi ki kuchh bhi
17/06/2025, 11:29 am - Ayush: Movie dekhna start Kiya tha 10 se daily dekh rha tha ek ,kl nhi dekha
17/06/2025, 11:30 am - Ansh Gupta: Kaun kaun si dekh li
17/06/2025, 11:30 am - Ayush: Aashiqui 2
Raanjhanaa 
Ram leela
Ye Jawani h diwani
Aae dil hai Mushkil 
Tamasha
17/06/2025, 11:30 am - Ayush: Ye saari dekhi
17/06/2025, 11:31 am - Ansh Gupta: Sahi hai itni purani kyu dekhi
17/06/2025, 11:31 am - Ansh Gupta: Ram Leela aur ashiqui 2 toh chutiya hai
17/06/2025, 11:31 am - Ayush: Sahi lgi sab dekhne me
17/06/2025, 11:31 am - Ayush: Haa keh sakta h
17/06/2025, 11:31 am - Ansh Gupta: Ranveer ki toh sari bhadiya hai aur Raanjhanaa bhi mst hai
17/06/2025, 11:32 am - Ayush: Kapoor na
17/06/2025, 11:32 am - Ayush: Uski hi dekh raha jayda
17/06/2025, 11:32 am - Ansh Gupta: Haan
17/06/2025, 11:32 am - Ayush: Aur bata achi achi nayi me
17/06/2025, 11:32 am - Ansh Gupta: Voh dekh le tu jhooti mai makkar
17/06/2025, 11:32 am - Ayush: Haa ye dekhne ke liya socha hi tha
17/06/2025, 11:32 am - Ansh Gupta: Dekh le mst hai
17/06/2025, 11:33 am - Ayush: Mai 2010 ke baad se socha dekhta hu thik thak wali
17/06/2025, 11:33 am - Ayush: Jo hit hui h
17/06/2025, 11:33 am - Ayush: Uske phle ke jayda purane ho jate h
17/06/2025, 11:33 am - Ansh Gupta: Jo achha hai dekho kya burai hai
17/06/2025, 11:33 am - Ayush: Haa wahi
17/06/2025, 11:33 am - Ansh Gupta: Jo Mann kare voh dekh
17/06/2025, 11:34 am - Ansh Gupta: Kdrama dekha hai tune kabhi
17/06/2025, 11:34 am - Ayush: Nhi dekhta waise toh
17/06/2025, 11:34 am - Ansh Gupta: Mast mast love story vale rehte hai
17/06/2025, 11:34 am - Ansh Gupta: Maine abhi dekha tha ek my demon mast tha maje hi aagaye
17/06/2025, 11:34 am - Ayush: Pr sala bc korean sab ek jaise lgte h 😂
17/06/2025, 11:35 am - Ansh Gupta: Haan voh toh hai hi par inki love story mast rehti hai
17/06/2025, 11:35 am - Ayush: Wo toh samjh rha hu
17/06/2025, 11:35 am - Ayush: Try karunga jab man kre
17/06/2025, 11:35 am - Ayush: Din toh aise hi nikal jata h pata hi nhi chalta
17/06/2025, 11:35 am - Ayush: Agar sone pe aya toh pura din aise hi khatam ho jata h
17/06/2025, 11:36 am - Ansh Gupta: Mera toh fix hai 12 se 1:30 sona fir khana khake 2:30 se 4 sona fir bakchodi raat bhar fir 1 baje so Jana aur 8 baje uthna
17/06/2025, 11:36 am - Ansh Gupta: Ghar vale kuchh nahi bolte
17/06/2025, 11:37 am - Ayush: Mera raat me late ho gya tha 3 pr 2-3 din se 11-12 bje fir ho gya
17/06/2025, 11:37 am - Ayush: Mummy office chli jati na
17/06/2025, 11:37 am - Ansh Gupta: Ghar pe akela hai kya
17/06/2025, 11:37 am - Ayush: Raat me kaun hi dekhta , jab koi uthe toh so jata hu aur kya
17/06/2025, 11:37 am - Ansh Gupta: Mera bhi chala gaya tha bich Mai fir sahi ho gaya vapis 1 baje sone ka
17/06/2025, 11:38 am - Ayush: Mai late soyu ya jaldi uthta late hi hu 8-9
17/06/2025, 11:38 am - Ansh Gupta: Ek mummy ke sath sota hai kya
17/06/2025, 11:38 am - Ayush: Nhi dusre room me toh uthta hai koi toh payal ki awaz aa hi jati h
17/06/2025, 11:39 am - Ayush: Agar late tk dekhliya to dategi to pakka
17/06/2025, 11:39 am - Ayush: Padh rhe ho toh kuch nhi bolegi
17/06/2025, 11:39 am - Ansh Gupta: Mai toh niche sota hu toh upar se niche aane ka koi chance hi nahi hai
17/06/2025, 11:39 am - Ayush: Kabhi kabhi raat me hi padh leta hu
17/06/2025, 11:39 am - Ayush: Toh shak nhi hota
17/06/2025, 11:40 am - Ansh Gupta: Theek hai koi naya thodi na ghar vale ko jhoot bol rahe hai ye toh bachpan se karte aa rahe hai
17/06/2025, 11:40 am - Ayush: Aur kya , itna toh hota hi hai
17/06/2025, 11:40 am - Ayush: Kya hi kre sala linkedin kholta hu toh dimag khrab ho jata h
17/06/2025, 11:40 am - Ansh Gupta: Voh sab nahi kholta mai
17/06/2025, 11:41 am - Ansh Gupta: Ab jaa raha hu sone neend aane lagi
17/06/2025, 11:41 am - Ansh Gupta: 😂
17/06/2025, 11:41 am - Ayush: Kabhi kabhi khul jata h jab sab se bore ho jayu
17/06/2025, 11:41 am - Ayush: Mai toh uth kr chai biscuit kh kr 8 bje fir so jata hu 9 bje tak
17/06/2025, 11:42 am - Ansh Gupta: Sale log apni performance daalte rehte hai pura dimag kharab ho jata hai
17/06/2025, 11:42 am - Ayush: Fir thori der uthkar naha leta hu fir dopher me sota hu kabhi nhi sota
17/06/2025, 11:42 am - Ansh Gupta: Chai nahi pita mai ghar pe
17/06/2025, 11:42 am - Ayush: Mai to pi leta hu chai biscuit subah subah
17/06/2025, 11:42 am - Ansh Gupta: Mai toh sota hi sota hu koi nahi rok sakta
17/06/2025, 11:43 am - Ayush: Raat me jaldi so gya toh kabhi kabhi mn nhi karta dopher me
17/06/2025, 11:43 am - Ansh Gupta: Mai toh bore hoke so jata mast AC mai
17/06/2025, 11:43 am - Ayush: Aur din me fir so jata hu kabhi kabhi 8-10 kabhi kabhi fir se uthna pr
17/06/2025, 11:43 am - Ayush: Jaa so ja
17/06/2025, 11:43 am - Ansh Gupta: Good night 😴
17/06/2025, 11:44 am - Ayush: 👏
24/06/2025, 1:22 am - Ayush: Jaga h ?
24/06/2025, 1:22 am - Ayush: Panchayat aa gya uski link bhej na vega movie se download hi nhi ho rha mere me
24/06/2025, 8:22 am - Ansh Gupta: https://rogmovies.mom/download-panchayat-s04-hindi-web-series-480p-720p-1080p-2160p-4k/
02/07/2025, 8:08 pm - Ayush: Jio hotstar de na ?
02/07/2025, 8:22 pm - Ansh Gupta: Daal number
02/07/2025, 8:23 pm - Ansh Gupta: Web browser hata diyo
02/07/2025, 8:31 pm - Ansh Gupta: Nahi aaya abhi tak
02/07/2025, 8:31 pm - Ayush: Gya
02/07/2025, 8:31 pm - Ansh Gupta: 5104
05/07/2025, 7:56 pm - Ansh Gupta: 
07/07/2025, 7:34 pm - Ansh Gupta: Arey tujhe callback and promise vala topic aata hai kya
07/07/2025, 7:42 pm - Ansh Gupta: 
07/07/2025, 7:42 pm - Ayush: Haa thora thora
07/07/2025, 7:43 pm - Ayush: Wo wala topic shraddha se padh le
07/07/2025, 7:43 pm - Ansh Gupta: abhi kuchh kar raha hai kya
07/07/2025, 7:43 pm - Ayush: Nahi mummy ke pass hu bs
07/07/2025, 7:43 pm - Ansh Gupta: dhatarval
07/07/2025, 7:43 pm - Ayush: Haa to kapoor se thori padhega
07/07/2025, 7:43 pm - Ansh Gupta: kya pata 😇
07/07/2025, 7:44 pm - Ayush: Uske saath pdhai thori hoga 😂
07/07/2025, 7:44 pm - Ansh Gupta: agar uske sath bhi padhna pade toh laanat hai sali jindagi pe
07/07/2025, 7:44 pm - Ansh Gupta: tune kitni video dekhli
07/07/2025, 7:44 pm - Ayush: 90
07/07/2025, 7:45 pm - Ayush: Mai thora backend prashant jain se kr rha hu
07/07/2025, 7:45 pm - Ayush: Fir wapas harry pe aaunga
07/07/2025, 7:45 pm - Ansh Gupta: meri toh 75 hi hui hai
07/07/2025, 7:45 pm - Ansh Gupta: sahi nahi padhaya kya usne
07/07/2025, 7:45 pm - Ansh Gupta: harry ne
07/07/2025, 7:45 pm - Ayush: Progress to hua h
07/07/2025, 7:46 pm - Ayush: Padhaya h thora ache se samjhne ke liye idhar aaya hu
07/07/2025, 7:46 pm - Ayush: Backend padhke wapas harry se padhunga
07/07/2025, 7:46 pm - Ansh Gupta: us din bola toh tha tujhe ki ab se padhunga 😂
07/07/2025, 7:46 pm - Ansh Gupta: uski kitni video hai
07/07/2025, 7:47 pm - Ayush: Badhiya h padho , khatam kar ke hi aana
07/07/2025, 7:47 pm - Ayush: Bhut hai 22 video h 1-1.5 hr ki bs backend
07/07/2025, 7:47 pm - Ansh Gupta: iska toh khatam karke hi aaunga
07/07/2025, 7:47 pm - Ayush: Tu us se hi kr tera utna time nhi bacha h
07/07/2025, 7:47 pm - Ansh Gupta: voh toh nahi ho payega
07/07/2025, 7:47 pm - Ansh Gupta: haan vahi
07/07/2025, 7:47 pm - Ayush: Jo doubt hoga topic wo kahi aur se dekh lena
07/07/2025, 7:48 pm - Ayush: Mai toh Airbnb ka project bana rha tha  lagbhag ho hi gya h kl se wapis harry pe
07/07/2025, 7:48 pm - Ansh Gupta: haan ye promise toh fir bhi samaj aaya par ye callback toh kuchh bhi samaj nahi aaya
07/07/2025, 7:48 pm - Ayush: Haa mere ko bhi nhi aaya tha callback
07/07/2025, 7:49 pm - Ayush: Waise abhi bhi utna samjh nhi aaya h pr chalta h
07/07/2025, 7:49 pm - Ansh Gupta: shradhaa se samaj aagaya
07/07/2025, 7:49 pm - Ayush: Haa 1 hr ka tha promise,callback aur async await sab ek ghante me h
07/07/2025, 7:50 pm - Ansh Gupta: theek hai padhta hu usse
08/07/2025, 8:55 pm - Ansh Gupta: Kya bhar diya
08/07/2025, 8:55 pm - Ansh Gupta: Kaunsa hackathon hai
08/07/2025, 10:41 pm - Ayush: Nhi bhara hu
08/07/2025, 10:42 pm - Ayush: Bs abhay ne bola tha to dekh rha tha
26/07/2025, 9:40 am - Ansh Gupta: Teri train kab ki hai
26/07/2025, 1:52 pm - Ayush: Aaj ki hai
26/07/2025, 1:54 pm - Ayush: Baith gya train me Patna se raat me varanasi se h 9 bje
26/07/2025, 2:01 pm - Ansh Gupta: Sale ab time Mila hai
26/07/2025, 2:01 pm - Ansh Gupta: Kya kar raha tha aisa
26/07/2025, 2:03 pm - Ayush: Thora pareshan tha bhai
26/07/2025, 2:03 pm - Ansh Gupta: Kya ho gaya
26/07/2025, 2:03 pm - Ayush: Mummy ka tabiyat kharab ho gya 3-4 din se
26/07/2025, 2:04 pm - Ansh Gupta: Toh ab theek hai ya fir abhi bhi beemar hai
26/07/2025, 2:05 pm - Ayush: Mtlb abhi lagega 4-6 weeks recover karne me
26/07/2025, 2:05 pm - Ansh Gupta: Itni beemar Ho gayi thi kya
26/07/2025, 2:05 pm - Ayush: Bell's palsy hota h ek face paralysis type ka
26/07/2025, 2:05 pm - Ayush: Pr serious nahi h kuch
26/07/2025, 2:06 pm - Ansh Gupta: Yrr paralysis toh bhot buri cheej hoti hai
26/07/2025, 2:06 pm - Ayush: Bs medicine time pe lena h aur physiotherapy karana h 7 din tak
26/07/2025, 2:06 pm - Ayush: Are wo wala paralysis nahi h
26/07/2025, 2:06 pm - Ayush: Ye ek temporary wala h
26/07/2025, 2:06 pm - Ayush: Virus h
26/07/2025, 2:06 pm - Ansh Gupta: Phir theek ho jayegi confirm
26/07/2025, 2:06 pm - Ansh Gupta: Chalo fir theek hai
26/07/2025, 2:07 pm - Ayush: Haa bs thora khana khane me dikkat hota h aur aur aankh se paani aa jata h
26/07/2025, 2:08 pm - Ayush: 1 month lagega abhi thik hone me ache se
26/07/2025, 2:08 pm - Ayush: Tum log kha pahuche
26/07/2025, 2:10 pm - Ansh Gupta: Toh abhi Ghar pe akeli hongi tere aane ke baad ya fir tere papa aagaye
26/07/2025, 2:10 pm - Ansh Gupta: Bhuran pur se nikal Gaye
26/07/2025, 2:11 pm - Ansh Gupta: Priyansh ka pata hai kuchh kab aayega
26/07/2025, 2:26 pm - Ayush: Patna me hai na waha sab h
26/07/2025, 2:26 pm - Ayush: Ye kaun jagah h
26/07/2025, 2:26 pm - Ayush: Rahul aur niks ke sath aaj hi train hogi sayad
26/07/2025, 9:54 pm - Ayush: You deleted this message
26/07/2025, 11:22 pm - Ansh Gupta: Khatam ho gaya subscription hotstar ka
27/07/2025, 12:11 am - Ayush: Mil gya mera dost ka login tha phle se hi phone pe ,wha to laptop use kr rha tha na to dekha nhi
27/07/2025, 12:11 am - Ayush: Kab phuch rha ?
27/07/2025, 12:11 am - Ansh Gupta: Kya dekhega hotstar pe <This message was edited>
27/07/2025, 12:12 am - Ansh Gupta: 4:00 ya 4:30am
27/07/2025, 12:12 am - Ayush: Are mai bol rha ki mere phone me login tha dost ka mujhe lga nhi h isliye manga match dekhne ke liye ,wha to laptop me dekhta tha na
27/07/2025, 12:12 am - Ansh Gupta: Dubara padh bhai ye msg
27/07/2025, 12:12 am - Ansh Gupta: Edit kar diya hu
27/07/2025, 12:13 am - Ansh Gupta: Agar match dekhna hai toh free mai dikha raha hai hotstar
27/07/2025, 12:13 am - Ayush: Match hi us time dekhne ke liye , fir khola to login tha
27/07/2025, 12:13 am - Ayush: Jio nhi h mera
27/07/2025, 12:13 am - Ansh Gupta: Gill aur rahul ne bacha liya
27/07/2025, 12:13 am - Ansh Gupta: Nahi shayad sabko free dikha raha hai
27/07/2025, 12:14 am - Ayush: Haa wo dekh kr so gya tha fir abhi utha
27/07/2025, 12:14 am - Ansh Gupta: Mujhe toh neend hi nahi aarahi hai
27/07/2025, 12:14 am - Ayush: Bhot subh ho jayega
27/07/2025, 12:14 am - Ansh Gupta: Haan
27/07/2025, 12:14 am - Ayush: Mai kl prso thora km soya tha to neend aa gyi
27/07/2025, 12:15 am - Ayush: Abhi to prayagraj phuchi h
27/07/2025, 12:15 am - Ansh Gupta: Toh harsh mil gaya
27/07/2025, 12:15 am - Ayush: B2 me h
27/07/2025, 12:15 am - Ayush: Mera A1 h
27/07/2025, 12:15 am - Ayush: Saman chor ke nhi jaa rha abhi toh
27/07/2025, 12:15 am - Ansh Gupta: Tera 2nd ac hai
27/07/2025, 12:16 am - Ansh Gupta: Mat jaiyo jaruri thodi na hai jana
27/07/2025, 12:16 am - Ayush: Haa amit prashant ka bhi h wo A2 me h
27/07/2025, 12:16 am - Ayush: Abhay aayega 4 bje
27/07/2025, 12:16 am - Ansh Gupta: Tum logo ne sath bhi nahi karayi ticket
27/07/2025, 12:16 am - Ansh Gupta: Same coach hai tumhara
27/07/2025, 12:16 am - Ayush: Nhi ek saath krne pe sabko preferred nhi milta na
27/07/2025, 12:17 am - Ayush: Lower chahiye rahta h warna sala sone me bhut dikkat hoti h
27/07/2025, 12:17 am - Ayush: Haa hmara same h
27/07/2025, 12:17 am - Ansh Gupta: 2nd ac mai kya dikkat hoti hai be sone mai
27/07/2025, 12:17 am - Ayush: Varanasi jisse aaya side upper bhi chota pr gya aisa lg rha tha
27/07/2025, 12:18 am - Ayush: Side lower chota hi hota h iska bhi
27/07/2025, 12:18 am - Ayush: Lower jayda sahi rhta h iska bhut space rhta h
27/07/2025, 12:19 am - Ansh Gupta: Voh toh rehta hi hai
27/07/2025, 12:19 am - Ansh Gupta: Sala time pass hi nahi ho raha
27/07/2025, 12:19 am - Ayush: Subh subh to nhi milega auto 4 bje
27/07/2025, 12:19 am - Ansh Gupta: Toh baitha baitha porn hi dekh raha hu
27/07/2025, 12:19 am - Ansh Gupta: Van
27/07/2025, 12:19 am - Ayush: Aa rhi ?
27/07/2025, 12:19 am - Ansh Gupta: Haan
27/07/2025, 12:19 am - Ayush: Baat hua
27/07/2025, 12:19 am - Ayush: Tab to sahi h
27/07/2025, 12:20 am - Ansh Gupta: Call kar diya tha bola 4 baje aaunga
27/07/2025, 12:20 am - Ansh Gupta: Aur hum bhi tabhi phoch rahe hai
27/07/2025, 12:20 am - Ansh Gupta: 10pm se 6am tak timing hai
27/07/2025, 12:20 am - Ayush: Tab to sahi h koi preshani nhi h
27/07/2025, 12:20 am - Ansh Gupta: Haan
27/07/2025, 12:20 am - Ayush: 3 log hi na
27/07/2025, 12:20 am - Ansh Gupta: Shayad koi aur log bhi hai
27/07/2025, 12:21 am - Ayush: Haa koi na koi toh hoga hi
27/07/2025, 12:21 am - Ayush: Sab toh aaj kl hi aa rhe
27/07/2025, 12:21 am - Ansh Gupta: Maine jab sajid ko phone kiya tha tab voh bola ki aapko ek ghanta wait karna pdega mai 4 baje aaunga
27/07/2025, 12:21 am - Ansh Gupta: Toh shayad koi aa hi raha hoga
27/07/2025, 12:22 am - Ansh Gupta: Par is route se koi aata nahi hai
27/07/2025, 12:22 am - Ayush: Haa wahi na har ghante koi aayega hi
27/07/2025, 12:22 am - Ansh Gupta: Shayad abhinav ya ayushi aate hai is route se
27/07/2025, 12:22 am - Ayush: Raichur station to aayega hi n
27/07/2025, 12:22 am - Ansh Gupta: Haan voh toh aayega hi
27/07/2025, 12:23 am - Ayush: Kannadiga enter kr gye tumlog toh
27/07/2025, 12:23 am - Ayush: Ab tamil aur kannad
27/07/2025, 12:23 am - Ansh Gupta: Abhi telengana mai honge shayad Kalaburagi phoche hai
27/07/2025, 12:23 am - Ansh Gupta: Endu gendu...
27/07/2025, 12:24 am - Ayush: Kalaburagi tera fvrt jagah 😂
27/07/2025, 12:24 am - Ansh Gupta: Ab toh ye bhi chalega
27/07/2025, 12:24 am - Ayush: Ye hi milega
27/07/2025, 12:25 am - Ansh Gupta: Ye bhi dilade
27/07/2025, 12:25 am - Ayush: Mere dwara thori milega , nhi toh khud ko na dedu
27/07/2025, 12:25 am - Ansh Gupta: Tere use karne ke baad de diyo
27/07/2025, 12:25 am - Ansh Gupta: Par please dilva de
27/07/2025, 12:26 am - Ansh Gupta: Tadap si uthti hai sax sux karne ki
27/07/2025, 12:26 am - Ayush: Mujhe kaunsa mil rha , dekho aur hath ki rekha mitayo
27/07/2025, 12:26 am - Ansh Gupta: Ye hi reh gaya jeevan mai
27/07/2025, 12:26 am - Ansh Gupta: Jaa Raha hu dekhne
27/07/2025, 12:27 am - Ayush: So jaa 2-3 ghante
27/07/2025, 12:27 am - Ayush: Nhi toh kl soyega din bhar
27/07/2025, 12:27 am - Ansh Gupta: Lauda neend nahi aarahi hai
27/07/2025, 12:27 am - Ansh Gupta: Ye hi toh dikkat hai
27/07/2025, 12:27 am - Ayush: Priyansh ka toh 1 week ka lg gya lora
27/07/2025, 12:27 am - Ansh Gupta: Haan uske laude lag gaye
27/07/2025, 12:27 am - Ansh Gupta: Ek week bhi confirm nahi hai
27/07/2025, 12:27 am - Ayush: Room Khali hi rhega kuch din
27/07/2025, 12:27 am - Ansh Gupta: Jyada bhi lag sakta hai
27/07/2025, 12:28 am - Ayush: Wo toh minimum h
27/07/2025, 12:28 am - Ansh Gupta: Vahi toh
27/07/2025, 12:28 am - Ayush: 2 week to lgenge hi
27/07/2025, 12:28 am - Ansh Gupta: Haan itne toh lagenge hi
27/07/2025, 12:28 am - Ansh Gupta: Pichhli baar bhi late aaya tha
27/07/2025, 12:28 am - Ansh Gupta: Aur is baar bhi
27/07/2025, 12:28 am - Ayush: Kuch n kuch ho hi jata h isko aane time
27/07/2025, 12:29 am - Ansh Gupta: Ye toh hai
27/07/2025, 12:29 am - Ansh Gupta: Net ki maa ka bhosda
27/07/2025, 12:29 am - Ansh Gupta: Bc chal hi nahi Raha hai
27/07/2025, 12:29 am - Ansh Gupta: Train teri maa ki chut
27/07/2025, 12:29 am - Ayush: Nobel padhega ab din bhar
27/07/2025, 12:30 am - Ayush: Train se panga mt kr ek baar phasa ander to nhi niklega
27/07/2025, 12:31 am - Ansh Gupta: Novel*
27/07/2025, 12:31 am - Ayush: Yeh *mistake ho gya
27/07/2025, 12:32 am - Ansh Gupta: Koi ni
27/07/2025, 12:32 am - Ayush: Chal thik h
27/07/2025, 12:32 am - Ansh Gupta: 😘🥰
03/08/2025, 10:03 am - Ayush: def speak(text):
     try:
        engine = pyttsx3.init('sapi5')
        voices = engine.getProperty('voices')
        engine.setProperty('voice', voices[0].id)  # Use default voice
        engine.setProperty('rate', 180)  # Optional: Adjust speaking speed
        print("Speaking:", text)
        engine.say(text)
        engine.runAndWait()
        engine.stop()
     except Exception as e:
        print("Speak Error:", e)
03/08/2025, 12:42 pm - Ansh Gupta: Hi
03/08/2025, 12:46 pm - Ansh Gupta: Hi
03/08/2025, 1:30 pm - Ansh Gupta: contacts = {
    "ayush": "+919835237626",  # Replace with actual number
    "Amit": "+919079231064"
}
03/08/2025, 1:31 pm - Ansh Gupta: elif any(name in c for name in contacts):
        for name in contacts:
            if name in c:
                phone_number = contacts[name]
                now = datetime.datetime.now()
                hour = now.hour
                minute = now.minute + 1
                speak(f"Sending hi to {name} on WhatsApp.")
                try:
                    pywhatkit.sendwhatmsg(phone_number, "Hi", hour, minute)
                except Exception as e:
                    print("WhatsApp Error:", e)
                    speak("Failed to send message.")
                return
03/08/2025, 1:48 pm - Ayush: good morning
03/08/2025, 1:50 pm - Ayush: good morning fuck you
03/08/2025, 1:53 pm - Ayush: elif "weather" in c.lower():
        match = re.search(r"weather\s+(in|of|at)?\s*(.+)", c.lower())
        if not match:
            speak("Please tell me which city's weather you want.")
            return
        city = match.group(2).strip().title()
        api_key = "ddf8839a809be4d0444b4a84ea1423e3"
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"

        try:
            res = requests.get(url)
            weather = res.json()
            if weather.get("main"):
                temp = weather["main"]["temp"]
                desc = weather["weather"][0]["description"]
                response = f"The temperature in {city} is {temp} degrees Celsius with {desc}."
                print(response)
                speak(response)
            else:
                speak(f"Sorry, I couldn't get the weather for {city}.")
        except Exception as e:
            speak("Error getting weather.")
            print("Weather API Error:", e)
03/08/2025, 1:59 pm - Ansh Gupta: to
03/08/2025, 2:33 pm - Ansh Gupta: chutiya
03/08/2025, 2:51 pm - Ayush: hello how r u
03/08/2025, 3:01 pm - Ansh Gupta: chutiye
05/08/2025, 11:13 am - Ayush: Neso Academy https://share.google/RMqlDnOSWCCLQL2J0
05/08/2025, 10:52 pm - Ayush: <Media omitted>
08/08/2025, 10:21 pm - Ansh Gupta: DA24S1.pdf https://share.google/UaJoZcRhId99xypeN
09/08/2025, 11:50 pm - Ansh Gupta: <Media omitted>
12/08/2025, 12:40 am - Ayush: https://taskify-ten-kappa.vercel.app/
12/08/2025, 2:04 am - Ayush: http://127.0.0.1:3000/video%2084-Project%202/index.html
19/08/2025, 9:51 pm - Ayush: <Media omitted>
19/08/2025, 9:51 pm - Ayush: <Media omitted>
19/08/2025, 9:51 pm - Ayush: <Media omitted>
19/08/2025, 9:52 pm - Ayush: <Media omitted>
19/08/2025, 9:52 pm - Ayush: <Media omitted>
20/08/2025, 3:06 pm - Ansh Gupta: https://youtu.be/gRjEZoER0G0
22/08/2025, 11:30 am - Ayush: https://www.nesoacademy.org/cs/6-computer-networks/ppt/2-data-link-layer
23/08/2025, 10:23 pm - Ayush: https://youtu.be/DOkSU3yg4vQ?si=aBJT9rza-_k9ZPDL
25/08/2025, 2:00 am - Ansh Gupta: https://vcloud.lol/9tkt6ew9jkkub9b
25/08/2025, 2:01 am - Ansh Gupta: https://vegamovies.gmbh/download-dark-season-1-to-3-english-with-esubs-complete-netflix-series-480p-720p/
29/08/2025, 11:34 pm - Ayush: Reflection on Today’s Absence: A Strategic Step Toward Professional Growth

I am writing to reflect on my absence from class today. I was participating in the L’Oréal Hackathon, a competitive event where students work on real industry problems.
Although I know the value of attending your classes, I chose to join the hackathon as a way to grow professionally. It helped me apply my technical skills under pressure, work in a team, and learn how classroom concepts are used in real-world situations.
I take full responsibility for missing the class and will make sure to catch up on everything covered. This was not an excuse, but a decision to learn in a different but meaningful way.
Team Members: Ansh Gupta, Prashant Kumar, and Ayush Raj

Respectfully,
Ayush Raj
07/09/2025, 7:30 pm - Ayush: Study the Johari Window and answer the following:

Draw the window that specifies you

Recall 5 domains discussed in the class, and see how the Personality Test Report and the Johari Window describe you

Describe your personality based on the window - Current Personality

Connect these dimensions with the Johari Window and plan for updating your personality

What amendments do you wish to create over the next three years as part of the personality development?

What modifications would be affected on the Johari window? 

Show the new version accordingly.

this is my assignment . i have provided my friends assignment for reference ...Guide me to make and provide content for my assignment based on my johari and nohari window i have provided also Recall 5 domains which i provided in this chat earlier ,,i have also provided image for that 5 domain earlier according to my personality ...Provide me a assignment taking reference from it ,,not just copy it ,,,according to my johari,nohari,5 domain images and also it should be neat and well aranged
09/09/2025, 6:22 pm - Ayush: Smart India Hackathon https://share.google/GvaFY1NKdrPA8U1b9
13/09/2025, 8:40 am - Ansh Gupta: https://rogmovies.org/page/5/
13/09/2025, 8:51 am - Ansh Gupta: https://hubcloud.one/drive/dqji1yyk1gzpnbj
16/09/2025, 10:45 pm - Ayush: <Media omitted>
17/09/2025, 7:54 pm - Ayush: <Media omitted>
21/09/2025, 8:28 pm - Ayush: Telegram wala link bhej na ind vs pak ka
21/09/2025, 8:28 pm - Ayush: Bhai mang rha h
21/09/2025, 8:28 pm - Ansh Gupta: ASIA CUP https://share.google/unecyCURhPvLAVkgT
23/09/2025, 1:14 pm - Ansh Gupta: https://in.mpms.mufg.com/Initial_Offer/public-issues.html
25/09/2025, 12:14 am - Ayush: <Media omitted>
25/09/2025, 12:14 am - Ayush: <Media omitted>
25/09/2025, 12:14 am - Ayush: <Media omitted>
25/09/2025, 12:14 am - Ayush: <Media omitted>
26/09/2025, 2:44 am - Ayush: <Media omitted>
27/09/2025, 1:30 am - Ayush: https://youtu.be/FLyicGDvZ4I?si=z-FSk48awjZ8jI4N
27/09/2025, 2:04 pm - Ayush: <Media omitted>
27/09/2025, 2:04 pm - Ayush: <Media omitted>
27/09/2025, 2:37 pm - Ayush: <Media omitted>
27/09/2025, 2:37 pm - Ayush: <Media omitted>
28/09/2025, 7:41 pm - Ayush: Cake order kar dena !
28/09/2025, 7:41 pm - Ansh Gupta: Kar de tu
28/09/2025, 7:41 pm - Ansh Gupta: Pata nahi mera zomato chal nahi Raha
28/09/2025, 7:42 pm - Ayush: Are priyansh se karwa le
28/09/2025, 7:43 pm - Ayush: Mai baal katwa rha hu
28/09/2025, 7:43 pm - Ansh Gupta: Theek hai
01/10/2025, 10:37 pm - Ansh Gupta: https://vcloud.lol/54oz1f1zkkon51b
04/10/2025, 1:56 am - Ayush: Decision tree for regression.. do any numerical .. complete full part split wise criteria ... do everything in detail ... do it in detail for my college assignment.. solve using mse to split ... just solve it as an assignment
04/10/2025, 1:57 am - Ayush: give a full fletched code of decision tree for classification  using scikit learn using any of the built data set of sklearn with a special emphasis on Hyperparameter testing of decision tree...  using minimum of 6-7 hyperparameters maybe using grid search cv or optuna .... dont give that much big code.. do the required part properly
07/10/2025, 4:09 am - Ansh Gupta: https://chatgpt.com/share/68e3d246-9b24-800b-ad8e-a3ed1bc2a776
07/10/2025, 2:37 pm - Ayush: <Media omitted>
14/10/2025, 7:05 pm - Ansh Gupta: https://youtu.be/lhsZao5spSU
21/10/2025, 5:36 pm - Ayush: *https://entertainment-universe.streamlit.app/*
25/10/2025, 3:18 am - Ayush: const mongoose = require("mongoose");


const ProductSchema = new mongoose.Schema(
  {
    image: String,
    title: String,
    description: String,
    category: String,
    brand: String,
    price: Number,
    salePrice: Number,
    totalStock: Number
  },
  { timestamps: true }
);


module.exports = mongoose.model("Product", ProductSchema);   this is my product scgema export const addProductFormElements = [
    {
      label: "Title",
      name: "title",
      componentType: "input",
      type: "text",
      placeholder: "Enter product title",
    },
    {
      label: "Description",
      name: "description",
      componentType: "textarea",
      placeholder: "Enter product description",
    },
    {
      label: "Category",
      name: "category",
      componentType: "select",
      options: [
        { id: "men", label: "Men" },
        { id: "women", label: "Women" },
        { id: "kids", label: "Kids" },
        { id: "accessories", label: "Accessories" },
        { id: "footwear", label: "Footwear" },
      ],
    },
    {
      label: "Brand",
      name: "brand",
      componentType: "select",
      options: [
        { id: "nike", label: "Nike" },
        { id: "adidas", label: "Adidas" },
        { id: "puma", label: "Puma" },
        { id: "levi", label: "Levi's" },
        { id: "zara", label: "Zara" },
        { id: "h&m", label: "H&M" },
      ],
    },
    {
      label: "Price",
      name: "price",
      componentType: "input",
      type: "number",
      placeholder: "Enter product price",
    },
    {
      label: "Sale Price",
      name: "salePrice",
      componentType: "input",
      type: "number",
      placeholder: "Enter sale price (optional)",
    },
    {
      label: "Total Stock",
      name: "totalStock",
      componentType: "input",
      type: "number",
      placeholder: "Enter total stock",
    },
  ];  can you generate a data for my clothing e-commerce app consisting of this so i can directly insert in my database
25/10/2025, 3:25 am - Ansh Gupta: const productsData = [
  {
    image: "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=500&auto=format&fit=crop&q=60",
    title: "Nike Dry-Fit Running T-Shirt",
    description: "Lightweight and breathable running t-shirt with moisture-wicking technology. Perfect for workouts and casual wear.",
    category: "men",
    brand: "nike",
    price: 45.99,
    salePrice: 39.99,
    totalStock: 150
  },
  {
    image: "https://images.unsplash.com/photo-1595777457583-95e059d581b8?w=500&auto=format&fit=crop&q=60",
    title: "Zara Floral Summer Dress",
    description: "Elegant floral print dress with comfortable fit and soft fabric. Ideal for summer occasions.",
    category: "women",
    brand: "zara",
    price: 59.99,
    salePrice: 49.99,
    totalStock: 85
  },
  {
    image: "https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Kids Running Shoes",
    description: "Durable and comfortable running shoes for active kids. Features extra cushioning and flexible soles.",
    category: "kids",
    brand: "adidas",
    price: 55.00,
    salePrice: null,
    totalStock: 120
  },
  {
    image: "https://images.unsplash.com/photo-1542272604-787c3835535d?w=500&auto=format&fit=crop&q=60",
    title: "Levi's 501 Original Jeans",
    description: "Classic straight-fit jeans made from premium denim. Timeless style with comfortable wear.",
    category: "men",
    brand: "levi",
    price: 89.99,
    salePrice: 79.99,
    totalStock: 75
  },
  {
    image: "https://images.unsplash.com/photo-1589810635657-232948472d98?w=500&auto=format&fit=crop&q=60",
    title: "H&M Casual Cotton Top",
    description: "Soft cotton top with relaxed fit. Perfect for everyday wear and easy to style.",
    category: "women",
    brand: "h&m",
    price: 24.99,
    salePrice: 19.99,
    totalStock: 200
  },
  {
    image: "https://images.unsplash.com/photo-1606107557195-0e29a4b5b4aa?w=500&auto=format&fit=crop&q=60",
    title: "Puma Classic Sneakers",
    description: "Vintage-style sneakers with modern comfort technology. Great for casual outings.",
    category: "footwear",
    brand: "puma",
    price: 75.00,
    salePrice: 65.00,
    totalStock: 90
  },
  {
    image: "https://images.unsplash.com/photo-1588850561407-ed78c282e89b?w=500&auto=format&fit=crop&q=60",
    title: "Nike Sport Performance Cap",
    description: "Lightweight cap with sweat-wicking technology and adjustable strap for perfect fit.",
    category: "accessories",
    brand: "nike",
    price: 29.99,
    salePrice: 24.99,
    totalStock: 180
  },
  {
    image: "https://images.unsplash.com/photo-1558769366-14e8daf0b4f5?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Kids Hooded Jacket",
    description: "Warm and comfortable hooded jacket for kids. Features zip closure and front pockets.",
    category: "kids",
    brand: "adidas",
    price: 45.99,
    salePrice: null,
    totalStock: 60
  },
  {
    image: "https://images.unsplash.com/photo-1582418702059-97ebafb35d09?w=500&auto=format&fit=crop&q=60",
    title: "Zara High-Waist Jeans",
    description: "Trendy high-waist jeans with slim fit. Made from stretch denim for comfort and style.",
    category: "women",
    brand: "zara",
    price: 69.99,
    salePrice: 59.99,
    totalStock: 110
  },
  {
    image: "https://images.unsplash.com/photo-1506629905607-e48b0e67d879?w=500&auto=format&fit=crop&q=60",
    title: "Puma Training Shorts",
    description: "Lightweight training shorts with moisture management. Perfect for gym sessions.",
    category: "men",
    brand: "puma",
    price: 35.99,
    salePrice: 29.99,
    totalStock: 140
  },
  {
    image: "https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=500&auto=format&fit=crop&q=60",
    title: "H&M Canvas Tote Bag",
    description: "Spacious canvas tote bag with sturdy handles. Ideal for daily use and shopping.",
    category: "accessories",
    brand: "h&m",
    price: 19.99,
    salePrice: 15.99,
    totalStock: 95
  },
  {
    image: "https://images.unsplash.com/photo-1608256246200-53e635b5b65f?w=500&auto=format&fit=crop&q=60",
    title: "Levi's Leather Formal Shoes",
    description: "Premium leather formal shoes with comfortable insole and durable sole.",
    category: "footwear",
    brand: "levi",
    price: 120.00,
    salePrice: 99.99,
    totalStock: 45
  },
  {
    image: "https://images.unsplash.com/photo-1586790170083-2f9ceadc732d?w=500&auto=format&fit=crop&q=60",
    title: "Nike Sport Backpack",
    description: "Durable sports backpack with multiple compartments and water bottle holder.",
    category: "accessories",
    brand: "nike",
    price: 49.99,
    salePrice: 42.99,
    totalStock: 75
  },
  {
    image: "https://images.unsplash.com/photo-1491553895911-0055eca6402d?w=500&auto=format&fit=crop&q=60",
    title: "Puma Running Shoes",
    description: "High-performance running shoes with cushioned sole and breathable mesh upper.",
    category: "footwear",
    brand: "puma",
    price: 89.99,
    salePrice: 79.99,
    totalStock: 60
  },
  {
    image: "https://images.unsplash.com/photo-1434389677669-e08b4cac3105?w=500&auto=format&fit=crop&q=60",
    title: "H&M Summer Skirt",
    description: "Light and flowy summer skirt with elastic waistband. Perfect for warm weather.",
    category: "women",
    brand: "h&m",
    price: 34.99,
    salePrice: 27.99,
    totalStock: 130
  }
];
25/10/2025, 3:30 am - Ansh Gupta: This message was deleted
25/10/2025, 3:30 am - Ansh Gupta: const productsData = [
  {
    image: "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=500&auto=format&fit=crop&q=60",
    title: "Nike Dry-Fit Running T-Shirt",
    description: "Lightweight and breathable running t-shirt with moisture-wicking technology. Perfect for workouts and casual wear.",
    category: "men",
    brand: "nike",
    price: 45.99,
    salePrice: 39.99,
    totalStock: 150
  },
  {
    image: "https://images.unsplash.com/photo-1595777457583-95e059d581b8?w=500&auto=format&fit=crop&q=60",
    title: "Zara Floral Summer Dress",
    description: "Elegant floral print dress with comfortable fit and soft fabric. Ideal for summer occasions.",
    category: "women",
    brand: "zara",
    price: 59.99,
    salePrice: 49.99,
    totalStock: 85
  },
  {
    image: "https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Kids Running Shoes",
    description: "Durable and comfortable running shoes for active kids. Features extra cushioning and flexible soles.",
    category: "kids",
    brand: "adidas",
    price: 55.00,
    salePrice: null,
    totalStock: 120
  },
  {
    image: "https://images.unsplash.com/photo-1542272604-787c3835535d?w=500&auto=format&fit=crop&q=60",
    title: "Levi's 501 Original Jeans",
    description: "Classic straight-fit jeans made from premium denim. Timeless style with comfortable wear.",
    category: "men",
    brand: "levi",
    price: 89.99,
    salePrice: 79.99,
    totalStock: 75
  },
  {
    image: "https://images.unsplash.com/photo-1589810635657-232948472d98?w=500&auto=format&fit=crop&q=60",
    title: "H&M Casual Cotton Top",
    description: "Soft cotton top with relaxed fit. Perfect for everyday wear and easy to style.",
    category: "women",
    brand: "h&m",
    price: 24.99,
    salePrice: 19.99,
    totalStock: 200
  },
  {
    image: "https://images.unsplash.com/photo-1606107557195-0e29a4b5b4aa?w=500&auto=format&fit=crop&q=60",
    title: "Puma Classic Sneakers",
    description: "Vintage-style sneakers with modern comfort technology. Great for casual outings.",
    category: "footwear",
    brand: "puma",
    price: 75.00,
    salePrice: 65.00,
    totalStock: 90
  },
  {
    image: "https://images.unsplash.com/photo-1588850561407-ed78c282e89b?w=500&auto=format&fit=crop&q=60",
    title: "Nike Sport Performance Cap",
    description: "Lightweight cap with sweat-wicking technology and adjustable strap for perfect fit.",
    category: "accessories",
    brand: "nike",
    price: 29.99,
    salePrice: 24.99,
    totalStock: 180
  },
  {
    image: "https://images.unsplash.com/photo-1558769366-14e8daf0b4f5?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Kids Hooded Jacket",
    description: "Warm and comfortable hooded jacket for kids. Features zip closure and front pockets.",
    category: "kids",
    brand: "adidas",
    price: 45.99,
    salePrice: null,
    totalStock: 60
  },
  {
    image: "https://images.unsplash.com/photo-1582418702059-97ebafb35d09?w=500&auto=format&fit=crop&q=60",
    title: "Zara High-Waist Jeans",
    description: "Trendy high-waist jeans with slim fit. Made from stretch denim for comfort and style.",
    category: "women",
    brand: "zara",
    price: 69.99,
    salePrice: 59.99,
    totalStock: 110
  },
  {
    image: "https://images.unsplash.com/photo-1506629905607-e48b0e67d879?w=500&auto=format&fit=crop&q=60",
    title: "Puma Training Shorts",
    description: "Lightweight training shorts with moisture management. Perfect for gym sessions.",
    category: "men",
    brand: "puma",
    price: 35.99,
    salePrice: 29.99,
    totalStock: 140
  },
  {
    image: "https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=500&auto=format&fit=crop&q=60",
    title: "H&M Canvas Tote Bag",
    description: "Spacious canvas tote bag with sturdy handles. Ideal for daily use and shopping.",
    category: "accessories",
    brand: "h&m",
    price: 19.99,
    salePrice: 15.99,
    totalStock: 95
  },
  {
    image: "https://images.unsplash.com/photo-1608256246200-53e635b5b65f?w=500&auto=format&fit=crop&q=60",
    title: "Levi's Leather Formal Shoes",
    description: "Premium leather formal shoes with comfortable insole and durable sole.",
    category: "footwear",
    brand: "levi",
    price: 120.00,
    salePrice: 99.99,
    totalStock: 45
  },
  {
    image: "https://images.unsplash.com/photo-1586790170083-2f9ceadc732d?w=500&auto=format&fit=crop&q=60",
    title: "Nike Sport Backpack",
    description: "Durable sports backpack with multiple compartments and water bottle holder.",
    category: "accessories",
    brand: "nike",
    price: 49.99,
    salePrice: 42.99,
    totalStock: 75
  },
  {
    image: "https://images.unsplash.com/photo-1491553895911-0055eca6402d?w=500&auto=format&fit=crop&q=60",
    title: "Puma Running Shoes",
    description: "High-performance running shoes with cushioned sole and breathable mesh upper.",
    category: "footwear",
    brand: "puma",
    price: 89.99,
    salePrice: 79.99,
    totalStock: 60
  },
  {
    image: "https://images.unsplash.com/photo-1434389677669-e08b4cac3105?w=500&auto=format&fit=crop&q=60",
    title: "H&M Summer Skirt",
    description: "Light and flowy summer skirt with elastic waistband. Perfect for warm weather.",
    category: "women",
    brand: "h&m",
    price: 34.99,
    salePrice: 27.99,
    totalStock: 130
  },
  {
    image: "https://images.unsplash.com/photo-1591047139829-d91aecb6caea?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Ultraboost Running Shoes",
    description: "Premium running shoes with responsive cushioning and energy return technology.",
    category: "men",
    brand: "adidas",
    price: 180.00,
    salePrice: 159.99,
    totalStock: 40
  },
  {
    image: "https://images.unsplash.com/photo-1576566588028-4147f3842f27?w=500&auto=format&fit=crop&q=60",
    title: "Zara Business Blazer",
    description: "Elegant business blazer with tailored fit. Perfect for formal occasions and office wear.",
    category: "women",
    brand: "zara",
    price: 89.99,
    salePrice: 74.99,
    totalStock: 65
  },
  {
    image: "https://images.unsplash.com/photo-1620799140408-edc6dcb6d633?w=500&auto=format&fit=crop&q=60",
    title: "Levi's Denim Jacket",
    description: "Classic denim jacket with vintage wash. Versatile layering piece for any season.",
    category: "men",
    brand: "levi",
    price: 78.99,
    salePrice: 68.99,
    totalStock: 85
  },
  {
    image: "https://images.unsplash.com/photo-1501196354995-cbb51c65aaea?w=500&auto=format&fit=crop&q=60",
    title: "H&M Wool Sweater",
    description: "Warm wool blend sweater with comfortable fit. Ideal for cold weather comfort.",
    category: "men",
    brand: "h&m",
    price: 49.99,
    salePrice: 39.99,
    totalStock: 110
  },
  {
    image: "https://images.unsplash.com/photo-1544441893-675973e31985?w=500&auto=format&fit=crop&q=60",
    title: "Nike Yoga Pants",
    description: "Flexible yoga pants with high waist and comfortable stretch fabric.",
    category: "women",
    brand: "nike",
    price: 65.00,
    salePrice: 55.00,
    totalStock: 95
  },
  {
    image: "https://images.unsplash.com/photo-1523381210434-271e8be1f52b?w=500&auto=format&fit=crop&q=60",
    title: "Puma Hooded Sweatshirt",
    description: "Cozy hooded sweatshirt with kangaroo pocket. Perfect for casual everyday wear.",
    category: "men",
    brand: "puma",
    price: 54.99,
    salePrice: 44.99,
    totalStock: 120
  },
  {
    image: "https://images.unsplash.com/photo-1552374196-1ab2a1c593e8?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Track Pants",
    description: "Comfortable track pants with signature stripes. Great for athletic activities.",
    category: "men",
    brand: "adidas",
    price: 59.99,
    salePrice: null,
    totalStock: 80
  },
  {
    image: "https://images.unsplash.com/photo-1515886657613-9f3515b0c78f?w=500&auto=format&fit=crop&q=60",
    title: "Zara Evening Gown",
    description: "Elegant evening gown with flowing silhouette. Perfect for special occasions.",
    category: "women",
    brand: "zara",
    price: 129.99,
    salePrice: 109.99,
    totalStock: 35
  },
  {
    image: "https://images.unsplash.com/photo-1503342217505-b0a15ec3261c?w=500&auto=format&fit=crop&q=60",
    title: "Levi's Cargo Shorts",
    description: "Durable cargo shorts with multiple pockets. Ideal for outdoor activities.",
    category: "men",
    brand: "levi",
    price: 45.99,
    salePrice: 38.99,
    totalStock: 100
  },
  {
    image: "https://images.unsplash.com/photo-1475180098004-ca77a66827be?w=500&auto=format&fit=crop&q=60",
    title: "H&M Kids T-Shirt Pack",
    description: "Pack of 3 colorful cotton t-shirts for kids. Soft fabric and fun designs.",
    category: "kids",
    brand: "h&m",
    price: 24.99,
    salePrice: 19.99,
    totalStock: 150
  },
  {
    image: "https://images.unsplash.com/photo-1543076447-215ad9ba6923?w=500&auto=format&fit=crop&q=60",
    title: "Nike Basketball Shorts",
    description: "Performance basketball shorts with moisture-wicking fabric and comfortable fit.",
    category: "men",
    brand: "nike",
    price: 42.99,
    salePrice: 36.99,
    totalStock: 90
  },
  {
    image: "https://images.unsplash.com/photo-1519457431-44ccd64a579b?w=500&auto=format&fit=crop&q=60",
    title: "Puma Women's Jacket",
    description: "Lightweight women's jacket with water-resistant coating. Stylish and functional.",
    category: "women",
    brand: "puma",
    price: 79.99,
    salePrice: 69.99,
    totalStock: 70
  },
  {
    image: "https://images.unsplash.com/photo-1554412933-514a83d2f3c8?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Soccer Cleats",
    description: "Professional soccer cleats with superior traction and ball control.",
    category: "footwear",
    brand: "adidas",
    price: 149.99,
    salePrice: 129.99,
    totalStock: 30
  },
  {
    image: "https://images.unsplash.com/photo-1485231183945-fffde7cb34e0?w=500&auto=format&fit=crop&q=60",
    title: "Zara Leather Handbag",
    description: "Genuine leather handbag with multiple compartments and adjustable strap.",
    category: "accessories",
    brand: "zara",
    price: 89.99,
    salePrice: 74.99,
    totalStock: 55
  },
  {
    image: "https://images.unsplash.com/photo-1554568218-0f1715e72254?w=500&auto=format&fit=crop&q=60",
    title: "Levi's Graphic T-Shirt",
    description: "Cotton graphic t-shirt with vintage-inspired print. Comfortable and stylish.",
    category: "men",
    brand: "levi",
    price: 29.99,
    salePrice: 24.99,
    totalStock: 180
  },
  {
    image: "https://images.unsplash.com/photo-1485231183945-fffde7cb34e0?w=500&auto=format&fit=crop&q=60",
    title: "H&M Winter Coat",
    description: "Warm winter coat with insulated lining and hood. Perfect for cold weather.",
    category: "women",
    brand: "h&m",
    price: 99.99,
    salePrice: 84.99,
    totalStock: 45
  },
  {
    image: "https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?w=500&auto=format&fit=crop&q=60",
    title: "Nike Golf Polo Shirt",
    description: "Performance golf polo with UV protection and moisture management technology.",
    category: "men",
    brand: "nike",
    price: 68.99,
    salePrice: 58.99,
    totalStock: 75
  },
  {
    image: "https://images.unsplash.com/photo-1506634572416-48cdfe530110?w=500&auto=format&fit=crop&q=60",
    title: "Puma Kids Sneakers",
    description: "Colorful kids sneakers with velcro straps for easy wearing. Durable and comfortable.",
    category: "kids",
    brand: "puma",
    price: 42.99,
    salePrice: 36.99,
    totalStock: 110
  },
  {
    image: "https://images.unsplash.com/photo-1556306535-0f09a537f0a3?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Swim Trunks",
    description: "Quick-dry swim trunks with built-in liner. Perfect for beach and pool activities.",
    category: "men",
    brand: "adidas",
    price: 38.99,
    salePrice: null,
    totalStock: 95
  },
  {
    image: "https://images.unsplash.com/photo-1515372039744-b8f02a3ae446?w=500&auto=format&fit=crop&q=60",
    title: "Zara Silk Blouse",
    description: "Elegant silk blouse with delicate details. Perfect for office or evening wear.",
    category: "women",
    brand: "zara",
    price: 79.99,
    salePrice: 67.99,
    totalStock: 60
  },
  {
    image: "https://images.unsplash.com/photo-1543086945-f607f7b0fd8e?w=500&auto=format&fit=crop&q=60",
    title: "Levi's Belt",
    description: "Genuine leather belt with classic buckle. Durable and timeless accessory.",
    category: "accessories",
    brand: "levi",
    price: 34.99,
    salePrice: 28.99,
    totalStock: 200
  },
  {
    image: "https://images.unsplash.com/photo-1556821840-3a63f95609a7?w=500&auto=format&fit=crop&q=60",
    title: "H&M Summer Dress",
    description: "Lightweight summer dress with floral pattern. Perfect for warm days.",
    category: "women",
    brand: "h&m",
    price: 39.99,
    salePrice: 32.99,
    totalStock: 125
  },
  {
    image: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=500&auto=format&fit=crop&q=60",
    title: "Nike Soccer Jersey",
    description: "Authentic soccer jersey with team colors and moisture-wicking fabric.",
    category: "men",
    brand: "nike",
    price: 84.99,
    salePrice: 74.99,
    totalStock: 50
  },
  {
    image: "https://images.unsplash.com/photo-1519457431-44ccd64a579b?w=500&auto=format&fit=crop&q=60",
    title: "Puma Sports Bra",
    description: "Supportive sports bra with comfortable fit. Ideal for high-intensity workouts.",
    category: "women",
    brand: "puma",
    price: 39.99,
    salePrice: 34.99,
    totalStock: 140
  },
  {
    image: "https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Backpack",
    description: "Spacious backpack with laptop compartment and multiple organizational pockets.",
    category: "accessories",
    brand: "adidas",
    price: 59.99,
    salePrice: 49.99,
    totalStock: 85
  },
  {
    image: "https://images.unsplash.com/photo-1503342217505-b0a15ec3261c?w=500&auto=format&fit=crop&q=60",
    title: "Zara Kids Jeans",
    description: "Durable kids jeans with adjustable waist. Comfortable for active children.",
    category: "kids",
    brand: "zara",
    price: 34.99,
    salePrice: 28.99,
    totalStock: 90
  },
  {
    image: "https://images.unsplash.com/photo-1475180098004-ca77a66827be?w=500&auto=format&fit=crop&q=60",
    title: "Levi's Western Shirt",
    description: "Classic western shirt with pearl snap buttons. Authentic cowboy style.",
    category: "men",
    brand: "levi",
    price: 64.99,
    salePrice: 54.99,
    totalStock: 65
  },
  {
    image: "https://images.unsplash.com/photo-1554412933-514a83d2f3c8?w=500&auto=format&fit=crop&q=60",
    title: "H&M Scarf Set",
    description: "Set of 2 lightweight scarves in complementary colors. Versatile accessory.",
    category: "accessories",
    brand: "h&m",
    price: 24.99,
    salePrice: 19.99,
    totalStock: 160
  },
  {
    image: "https://images.unsplash.com/photo-1519457431-44ccd64a579b?w=500&auto=format&fit=crop&q=60",
    title: "Nike Tennis Skirt",
    description: "Performance tennis skirt with built-in shorts. Perfect for court sports.",
    category: "women",
    brand: "nike",
    price: 52.99,
    salePrice: 45.99,
    totalStock: 80
  },
  {
    image: "https://images.unsplash.com/photo-1485231183945-fffde7cb34e0?w=500&auto=format&fit=crop&q=60",
    title: "Puma Slides",
    description: "Comfortable slides with cushioned footbed. Perfect for post-workout or casual wear.",
    category: "footwear",
    brand: "puma",
    price: 29.99,
    salePrice: 24.99,
    totalStock: 175
  },
  {
    image: "https://images.unsplash.com/photo-1554568218-0f1715e72254?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Yoga Mat",
    description: "Non-slip yoga mat with carrying strap. Essential for yoga and fitness practice.",
    category: "accessories",
    brand: "adidas",
    price: 34.99,
    salePrice: 28.99,
    totalStock: 120
  },
  {
    image: "https://images.unsplash.com/photo-1506634572416-48cdfe530110?w=500&auto=format&fit=crop&q=60",
    title: "Zara Perfume",
    description: "Elegant fragrance with floral notes. Long-lasting scent for everyday wear.",
    category: "accessories",
    brand: "zara",
    price: 45.99,
    salePrice: 38.99,
    totalStock: 95
  },
  {
    image: "https://images.unsplash.com/photo-1556306535-0f09a537f0a3?w=500&auto=format&fit=crop&q=60",
    title: "Levi's Beanie",
    description: "Warm knit beanie with logo detail. Perfect for cold weather protection.",
    category: "accessories",
    brand: "levi",
    price: 19.99,
    salePrice: 15.99,
    totalStock: 200
  },
  {
    image: "https://images.unsplash.com/photo-1515372039744-b8f02a3ae446?w=500&auto=format&fit=crop&q=60",
    title: "H&M Loungewear Set",
    description: "Comfortable loungewear set with matching top and bottom. Perfect for relaxing.",
    category: "women",
    brand: "h&m",
    price: 49.99,
    salePrice: 39.99,
    totalStock: 110
  },
  {
    image: "https://images.unsplash.com/photo-1543086945-f607f7b0fd8e?w=500&auto=format&fit=crop&q=60",
    title: "Nike Headbands",
    description: "Pack of 3 sweat-wicking headbands. Keep hair and sweat out of your face during workouts.",
    category: "accessories",
    brand: "nike",
    price: 22.99,
    salePrice: 18.99,
    totalStock: 180
  },
  {
    image: "https://images.unsplash.com/photo-1556821840-3a63f95609a7?w=500&auto=format&fit=crop&q=60",
    title: "Puma Water Bottle",
    description: "Insulated water bottle with leak-proof lid. Keep drinks cold for hours.",
    category: "accessories",
    brand: "puma",
    price: 24.99,
    salePrice: 19.99,
    totalStock: 150
  },
  {
    image: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=500&auto=format&fit=crop&q=60",
    title: "Adidas Socks Pack",
    description: "Pack of 6 performance socks with cushioning and arch support.",
    category: "accessories",
    brand: "adidas",
    price: 28.99,
    salePrice: 23.99,
    totalStock: 220
  }
];
25/10/2025, 3:32 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 3:56 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:12 am - Ansh Gupta: <Media omitted>
25/10/2025, 4:54 pm - Ayush: sb-atxro47036267@personal.example.com
25/10/2025, 4:54 pm - Ayush: aTXz+2r9
25/10/2025, 10:11 pm - Ansh Gupta: <Media omitted>
25/10/2025, 10:21 pm - Ansh Gupta: https://www.linkedin.com/in/ayush-raj-6b9172298?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app
25/10/2025, 11:59 pm - Ayush: https://pplx.ai/ayushashis15632
